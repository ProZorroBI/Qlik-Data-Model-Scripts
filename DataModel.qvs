///$tab Main
SET ThousandSep=' ';
SET DecimalSep=',';
SET MoneyThousandSep=' ';
SET MoneyDecimalSep=',';
SET MoneyFormat='# ##0,00грн.;-# ##0,00грн.';
SET TimeFormat='h:mm:ss';
SET DateFormat='DD.MM.YYYY';
SET TimestampFormat='DD.MM.YYYY h:mm:ss[.fff]';
SET MonthNames='січ;лют;бер;кві;тра;чер;лип;сер;вер;жов;лис;гру';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Нд';

SET DIC_QVD_PATH = '..\04_DataBase\02_QVD_DB\01_Dictionary\';
SET TRN_QVD_PATH = '..\04_DataBase\02_QVD_DB\02_Transaction\';
SET FILES_PATH = '..\04_DataBase\01_DataFiles\';

// Для возможности поиска в этих полях
NULLASVALUE Тендер, Лот, ОписаниеТендера, ОписаниеЛота; 

// Загрузка реальных тендеров - 0, тестовых - 1
SET vTestFlag = 0;

// Пороговое значение % экономии
SET LimitEconomy = 0.6;

LET vMinTenderDate = MakeDate(2015, 2, 4);

LET vCurrentDate = Today(1);

LET vPYTenderDate = YearStart(AddYears($(#vCurrentDate),-1));

LET vPY2TenderDate = YearStart(AddYears($(#vCurrentDate),-2));

SET vSDRCurr = 14.25;

// Дата введения правила формирования справочника Участников
LET vTendererRuleDate = MakeDate(2017, 10, 6);

// Проверка на наличие обновленных данных
DIRECTORY [$(DIC_QVD_PATH)];

IF NOT IsNull(FileSize('ReloadModel.txt')) THEN
	ReloadModel:
	LOAD 
		 ReloadModelFlag
	FROM
	ReloadModel.txt
	(txt, utf8, embedded labels, delimiter is '\t', msq);
	
		IF  Peek('ReloadModelFlag', -1, 'ReloadModel') = 0 THEN
			TRACE NO Updated data, EXIT with Error;
			
			ReloadModel:
			LOAD 
		 		FakeField
			FROM ReloadModel.txt
			(txt, utf8, embedded labels, delimiter is '\t', msq);
			
		ENDIF
	
	DROP  Table ReloadModel;
ENDIF

// Флаг начала процесса перезагрузки модели
StartControl:
LOAD
	 1 as StartControl
AutoGenerate 1;

STORE StartControl into StartControl.txt (txt);	
DROP Table StartControl; 
///$tab 1 Mapping
DIRECTORY [..\04_DataBase\02_QVD_DB\01_Dictionary\];

CountryMap:
Mapping
LOAD DBCountry, 
     RightCountry
FROM CountryMap.qvd (qvd);

RegionMap:
Mapping
LOAD DBRegion, 
     RightRegion
FROM RegionMap.qvd (qvd);

CityMap:
Mapping
LOAD DBCity, 
     RightCity
FROM CityMap.qvd (qvd);

TendererMap:
Mapping
LOAD DBTenderer, 
     RightTenderer
FROM TendererMap.qvd (qvd);

OrganizerMap:
Mapping
LOAD DBOrganizer, 
     RightOrganizer
FROM OrganizerMap.qvd (qvd);

MAP СтранаЖалобыТендера, ВопросОтСтрана, СтранаУчастника, [Країна постачальника], СтранаОрганизатора, [Страна поставки] using CountryMap;
MAP РегионЖалобыТендера, ВопросОтРегион, РегионУчастника, [Регіон постачальника], РегионОрганизатора, [Регион поставки] using RegionMap;
MAP ГородЖалобыТендера, ВопросОтГород, ГородУчастника, [Населений пункт постачальника], ГородОрганизатора, [Город поставки] using CityMap;
MAP Участник, ИмяУчастника, ЮрНазваниеУчастника, Постачальник, [Представник постачальника], [Юр назва постачальника] using TendererMap;
MAP Организатор, ПредставительОрганизатора, ЮрНазваниеОрганизатора using OrganizerMap;
///$tab 2 Документы
DIRECTORY [..\04_DataBase\02_QVD_DB\02_Transaction\];

// ================= Тендеры ================= 
Tender_Tmp:
LOAD 
     Критерий, 
//     [Конечная дата квалификации], 
//     [Начальная дата квалификации],
     [Конечная дата определения победителя], 
     [Начальная дата определения победителя], 
     [Начало квалификационного периода],
	 [Конец квалификационного периода], 
     ДатаИзмененияТендера, 
     ТерминальнаяДатаТендера,
     ОписаниеТендера, 
     description_en, //добавлен в 2.0.1
     [Конец периода уточнений], 
     [Начало периода уточнений], 
     IDTender as IDTenderKey, 
     IDTenderOrig as ID,
     ШагУменьшения, 
     ШагУменьшенияВалюта, 
     ШагУменьшенияНДС, 
     КоличествоПредложений, 
     procurementMethod, 
     procurementMethodType,
     IDOrganizatorOrig as IDOrganizatorKey, 
     СтатусТендера, 
     ТипТендера, 
     Идентификатор, 
     ПлощадкаТендера,
     [Конец приема предложений], 
     [Начало приема предложений], 
     Тендер, 
     Title, 
     kind,
     ТендерРу,
     СуммаТендера, 
     ВалютаТендера, 
     НДСТендера,
     [Обоснование использования метода],
	 cause,
	 [Обоснование использования],
	 ВалютаГарантииПредложения, 
     СуммаГарантииПредложения, 
     [Начальная дата обжалования тендера], 
     [Конечная дата обжалования тендера],
     Tender,
     [Ключ донора]
FROM Tender_????.qvd (qvd);

// Определение переговорных процедур, которые должны быть загружены (исключаются переговорные без Award.Status=active)
Award:
LOAD IDAward as IDAwardKey,
	 KeyLotBid, 
	 IDTenderKey,
     ДатаВремяЗакрытия as ДатаПредложения, 
     СтатусПротоколаОценки, 
     IsLimitedAward
FROM Award_????.qvd (qvd)
Where Exists(IDTenderKey);

// Для предотвращения потребления большого объема памяти
Left Join (Award)
LOAD Distinct
	IDAwardKey,
	Left(IDAwardKey, 4) as TenderYearAward
Resident Award;	

FOR Each vTenderYear in FieldValueList('TenderYearAward')
	AwardStaus_Tmp:
	LOAD KeyLotBid, 
	     LastValue(СтатусПротоколаОценки) as СтатусПротоколаОценки,
	     LastValue(IDTenderKey) as IDTenderKey,
	     LastValue(IDAwardKey) as IDAwardKey
	Resident Award
	Where TenderYearAward = $(vTenderYear)
	Group By KeyLotBid
	Order By ДатаПредложения;
NEXT


Left Join (Award)
LOAD
	 IDAwardKey,
	 1 as EndAwardStatusFlag
Resident AwardStaus_Tmp;

DROP Table AwardStaus_Tmp;

Left Join (Tender_Tmp)
LOAD 
	 IDTenderKey,
	 Max(ДатаПредложения) as ДатаПредложения, 
     1 as LoadLimFlag
Resident Award
Where EndAwardStatusFlag = 1 AND IsLimitedAward = 1 AND СтатусПротоколаОценки = 'active'
Group By IDTenderKey;

DROP Table Award;

Tender_:
NoConcatenate
LOAD
	 Критерий, 
//     Date([Конечная дата квалификации], '$(TimestampFormat)') as [Конечная дата квалификации], 
//     Date(Floor([Конечная дата квалификации])) as [Дата квалификации],
//     Date([Начальная дата квалификации], '$(TimestampFormat)') as [Начальная дата квалификации], 
     Date([Конечная дата определения победителя], '$(TimestampFormat)') as [Конечная дата определения победителя], 
     Date(Floor([Конечная дата определения победителя])) as [Дата определения победителя], 
     Date([Начальная дата определения победителя]) as [Начальная дата определения победителя], 
     Date([Начало квалификационного периода]) as [Начало квалификационного периода],
	 Date([Конец квалификационного периода]) as [Конец квалификационного периода],
     Date(ДатаИзмененияТендера, '$(TimestampFormat)') as ДатаИзмененияТендера, 
     Date(ТерминальнаяДатаТендера, '$(TimestampFormat)') as ТерминальнаяДатаТендера,
     ОписаниеТендера, 
     description_en, //добавлен в 2.0.1
     Date([Конец периода уточнений], '$(TimestampFormat)') as [Конец периода уточнений], 
     Date(Floor([Конец периода уточнений])) as [Дата завершения периода уточнений],
     Date([Начало периода уточнений], '$(TimestampFormat)') as [Начало периода уточнений], 
     Date(Floor([Начало периода уточнений])) as [Дата начала периода уточнений],
//   if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), Date(Floor([Начало периода уточнений]))) as [Дата объявления закупки],
//   if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), Date(Floor([Начало периода уточнений]))) as Дата,
     if(procurementMethodType='reporting', Alt(Date(Floor(ТерминальнаяДатаТендера)), Date(Floor(ДатаПредложения))), 
     	if(procurementMethodType Like 'negotiation*', Date(Floor(ДатаПредложения)),
     		Alt( Date(Floor([Начало периода уточнений])), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')) )
     	)
     ) as Дата,
     if(IsNull([Начальная дата определения победителя]), 0, 1) as IsStartQualifDate,
	 if(IsNull([Конечная дата определения победителя]), 0, 1) as IsEndQualifDate,
     IDTenderKey as IDTender, 
     IDTenderKey, 
     ID,
     ШагУменьшения as ШагУменьшения_,
     ШагУменьшения as ШагУменьшения_Валюта,
     ШагУменьшенияВалюта, 
     ШагУменьшенияНДС, 
     КоличествоПредложений, 
     procurementMethod,
     if(procurementMethodType='reporting' AND Left([Обоснование использования метода], 9)='catalogue', 'reportingECat', procurementMethodType) as procurementMethodType, 
     IDOrganizatorKey, 
     СтатусТендера, 
     ТипТендера, 
     Идентификатор, 
     ПлощадкаТендера,
     Date([Конец приема предложений], '$(TimestampFormat)') as [Конец приема предложений], 
     Date(Floor([Конец приема предложений])) as [Дата завершения подачи предложений],
     Date(Floor([Начало приема предложений])) as [Дата начала подачи предложений],
     Date([Начало приема предложений], '$(TimestampFormat)') as [Начало приема предложений], 
     Тендер, 
     Title, 
     if(IsNull(kind), 'from pilot project', kind) as kind,
     ТендерРу, 
     СуммаТендера as СуммаТендера_, 
     СуммаТендера as СуммаТендера_Валюта,
     ВалютаТендера, 
     НДСТендера,
     [Обоснование использования метода],
	 cause,
	 [Обоснование использования],
	 ВалютаГарантииПредложения, 
     СуммаГарантииПредложения as СуммаГарантииПредложения_, 
     СуммаГарантииПредложения as СуммаГарантииПредложения_Валюта,
     [Начальная дата обжалования тендера], 
     [Конечная дата обжалования тендера],
     Tender,
     [Ключ донора]
Resident Tender_Tmp //	
Where NOT ((procurementMethodType Like 'negotiation*' AND LoadLimFlag <> 1) OR (procurementMethodType = 'reporting' AND СтатусТендера  <> 'complete') OR WildMatch(procurementMethodType, 'competitiveDialogueEU*', 'competitiveDialogueUA*', 'esco', 'closeFrameworkAgreement*'));

DROP Table Tender_Tmp;	

//  ================= Лоты =================
Lot:
LOAD СтатусЛота as СтатусЛота_,
	 СсылкаНаАукцион, 
     IDTenderKey, 
     IDLot,
     IDLotOrig as IDLOT, 
     IDLot as IDLotKey,
     ИдентификаторЛота,
     ОписаниеЛота, 
     LotDescription_en, 
     Лот, 
     LotTitle_en, 
     IsLot, 
     ВалютаЛота, 
     СуммаЛота as СуммаЛота_, 
     СуммаЛота as СуммаЛота_Валюта,
     НДСЛота, 
     ШагУменьшенияЛотВалюта, 
     ШагУменьшенияЛот as ШагУменьшенияЛот_,
     ШагУменьшенияЛот as ШагУменьшенияЛот_Валюта, 
     ШагУменьшенияЛотНДС, 
     [Начальная дата аукциона лота], 
     [Конечная дата аукциона лота],
     ТерминальнаяДатаЛота,
     ВалютаГарантииПредложенияЛота, 
     СуммаГарантииПредложенияЛота as СуммаГарантииПредложенияЛота_,
     СуммаГарантииПредложенияЛота as СуммаГарантииПредложенияЛота_Валюта,
     Lot
FROM Lot_????.qvd (qvd)
Where Exists(IDTenderKey);

Left Join (Lot)
LOAD
	IDTenderKey,
	if(Lower(procurementMethod) = 'limited', 1) as IsLimitedLot,
	СтатусТендера,
	Дата as ДатаТендера
Resident Tender_;

Left Join (Lot)
LOAD
	IDLotKey,
	if(IsNull(СтатусЛота_), 
		if(СтатусТендера Like 'active*', 'active', СтатусТендера),
			if(Match(СтатусТендера, 'unsuccessful', 'cancelled') AND СтатусЛота_='active', СтатусТендера, СтатусЛота_)) as СтатусЛота //при отмене тендера, лоты не перенимают изменения статуса, а потому остаются в статусе "active", но поскольку закупка отменена, то и принимать участие в таких лотах невозможно
Resident Lot;

//DROP Field СтатусЛота_;


//  ================= Предложения ================= 
Bid_:
LOAD 
	 IDTenderKey, 
     ДатаПредложения, 
     IDBid, 
     IDBidOrig as IDBID,
     IDBid as IDBidKey,
     ПлощадкаПредложения,
     СтатусПредложения, 
     СуммаПредложения, 
     ВалютаПредложения, 
     НДСПредложения, 
     IDTendererOrig as IDTendererKey,
     KeyLotBid,
     IDLotKey,
     LotBidType
FROM Bid_????.qvd (qvd)
Where Exists(IDTenderKey);

Bid_Tmp:
LOAD 
	 IDTenderKey, 
     Timestamp(ДатаПредложения) as ДатаПредложения, 
     IDBid, 
     IDBidKey,
     IDBID,
     ПлощадкаПредложения,
     СтатусПредложения, 
     СуммаПредложения as СуммаПредложения_,
     СуммаПредложения as СуммаПредложения_Валюта, 
     ВалютаПредложения, 
     НДСПредложения, 
     IDTendererKey,
     KeyLotBid,
     IDLotKey,
     if(СтатусПредложения<>'invalid', 1, 0) as KeyLotBidFlag, // Для исключения ценовых предложений, где Bid в статусе invalid
     1 as BidType,
     LotBidType
Resident Bid_     
Where СтатусПредложения <> 'deleted' /*AND СтатусПредложения <> 'invalid'*/; 

DROP Table Bid_;

//
//  ================= Оценки ================= 
Award_:     
LOAD KeyLotBid, 
	 IDTenderKey,
	 IDLotKey,
	 ДатаВремяЗакрытия,
     ДатаЗакрытия, 
     ОписаниеПротоколаОценки,
     IDAward, 
     СтатусПротоколаОценки, 
     IDTendererOrig as IDTendererKey,
     IsLimitedAward,
     ПротоколОценки,
     СуммаПротоколаОценки,
	 ВалютаПротоколаОценки, 
	 НДСПротоколаОценки,
     [Начальная дата обжалования],
     [Конечная дата обжалования],
     ПодтверждениеСоответствия,
     DisqualGrpResID
FROM Award_????.qvd (qvd)
Where Exists(IDTenderKey);

Award:
LOAD KeyLotBid, 
	 IDTenderKey,
	 Left(IDAward, 4) as TenderYearAward,
	 IDLotKey,
     Timestamp(ДатаВремяЗакрытия) as ДатаПредложения, 
	 if(СтатусПротоколаОценки='unsuccessful', ДатаЗакрытия) as ДатаДисквалификации,
	 if(СтатусПротоколаОценки='active', ДатаЗакрытия) as ДатаОпределенияПобедителя,
     ДатаЗакрытия, 
     ОписаниеПротоколаОценки,
     IDAward, 
     IDAward as IDAwardKey,
     СтатусПротоколаОценки, 
     IDTendererKey,
     IsLimitedAward,
     ПротоколОценки,
     СуммаПротоколаОценки as СуммаПредложения_,
     СуммаПротоколаОценки as СуммаПредложения_Валюта,
	 ВалютаПротоколаОценки as ВалютаПредложения, 
	 НДСПротоколаОценки as НДСПредложения,
     [Начальная дата обжалования],
     [Конечная дата обжалования],
     ПодтверждениеСоответствия,
     DisqualGrpResID
Resident  Award_;

DROP Table Award_;

//  ================= Квалификации ================= 
Qualification:
LOAD 
	 KeyLotBid, 
//   IDTenderOrig, 
//   IDTenderKey, 
//   IDBidOrig, 
//   IDLotOrig, 
   	 IDLotKey, 
//   IDQualificationOrig, 
     IDQualification, 
     IDQualification as IDQualificationKey,
     ДатаВремяКвалификации, 
     ОписаниеКвалификации, 
     Квалификация, 
     ПодтверждениеСоответствияКвалификации, 
     ПодтверждениеУчастияКвалификации, 
     СтатусКвалификации,
     DisqualGrpResID
FROM Qualification_????.qvd (qvd)
Where Exists(KeyLotBid);

// ====== Определение причин дисквалификаций ======
// ТЗ https://docs.google.com/document/d/1JiE5z6fCex0x34EdB35n4UGsugHvCJ7svJBys6IGMVk
Disqualifications:
LOAD Distinct
	 KeyLotBid,
	 SubField(DisqualGrpResID, ',') as DisqualGrpResID
Resident Award
Where СтатусПротоколаОценки = 'unsuccessful'; 

Concatenate (Disqualifications)
LOAD Distinct
	 KeyLotBid,
	 SubField(DisqualGrpResID, ',') as DisqualGrpResID
Resident Qualification
Where СтатусКвалификации = 'unsuccessful';

DROP Field DisqualGrpResID From Award, Qualification;

//  ================= Контракты ================= 
Contract1:
Load 
	 IDTenderKey,
	 IDAwardKey, 
     IDContract,
     IDContractOrig,
     IDContract as IDContractKey,
     ИдентификаторКонтракта as [Ідентифікатор договору],
	 НомерКонтракта,
     СтатусКонтракта as СтатусКонтракта_, 
     ОписаниеКонтракта as [Опис договору з тендерів], 
     Контракт as ДоговірЗтендерів, 
//     КонДатаКонтракта, 
//     КонДатаКонтракта as [Дата закрытия контракта], 
     КонДатаКонтракта as [Дата закінчення дії договору (згідно тендера)],
     НачДатаКонтракта as [Дата початку дії договору], 
//     СуммаКонтракта as СуммаКонтракта_, 
//     СуммаКонтракта as СуммаКонтракта_Валюта,
	 СуммаКонтракта as [Сума договору (згідно тендера)],
	 СуммаКонтракта as [Сума договору (згідно тендера)_Валюта],
     ВалютаКонтракта as ВалютаКонтракта_, 
     НДСКонтракта, 
     СуммаКонтрактаБезНДС as [Сума договору без ПДВ (згідно тендера)],
     СуммаКонтрактаБезНДС as [Сума договору без ПДВ (згідно тендера)_Валюта],
//     ДатаВремяПодписания as [Дата і час підписання договору],
     ДатаПодписания as [Дата підписання договору],
     ДатаАктивацииКонтракта as [Дата публікації договору],
//     ДатаВремяАктивацииКонтракта as [Дата і час публікації договору],
     isFromContracting
FROM Contract_????.qvd (qvd)
Where Exists(IDAwardKey);

Contract_C:
LOAD 
     IDTenderKey, 
     IDAwardKey, 
     IDContractOrig, 
//     IDContractKey, 
     IDContract,
     ИдентификаторКонтракта as [Ідентифікатор договору], 
     НомерКонтракта, 
     СтатусКонтракта, 
     ОписаниеКонтракта as [Опис договору], 
     Контракт as Договір, 
     ПлощадкаКонтракта, 
     НачДатаКонтракта as [Дата початку дії договору], 
//     КонДатаКонтракта as [Дата закрытия контракта],
	 КонДатаКонтракта as [Дата закінчення дії договору (згідно договору)],
     ВалютаКонтракта, 
     ВалютаПлатежа, 
//     СуммаКонтракта as СуммаКонтракта_, 
//     СуммаКонтракта as СуммаКонтракта_Валюта,
     СуммаКонтракта as [Сума договору (згідно договору)],
     СуммаКонтракта as [Сума договору (згідно договору)_Валюта],
     СуммаПлатежа as [Сплачена сума_],
     СуммаПлатежа as [Сплачена сума у валюті договору], 
     НДСКонтракта, 
     НДСПлатежа, 
     СуммаКонтрактаБезНДС as [Сума договору без ПДВ (згідно договору)],
     СуммаКонтрактаБезНДС as [Сума договору без ПДВ (згідно договору)_Валюта],
//     ДатаВремяПодписания as [Дата і час підписання договору], 
     ДатаПодписания as [Дата підписання договору], 
     ДатаИзмененияКонтракта, 
     terminationDetails as [Причини розірвання договору],
     [Причина розірвання договору], 
     [Причина разрыва договора], 
     [Cause of contract termination],
     [Ініціатор розірвання договору] as [Відповідальний за розірвання договору],
     Initiator as [Responsible for contract cancellation],
     IDSupplierOrig as [Код постачальника (тех. ключ)],
     isFromContracting 
FROM Contract_C_????.qvd (qvd)
Where Exists(IDAwardKey);


Left Join (Contract1)
LOAD
	 IDContract,
//	 if(not IsNull([Причини розірвання договору]), 'terminated', СтатусКонтракта) as СтатусКонтракта,
	 СтатусКонтракта,
	 ВалютаПлатежа,
	 [Сплачена сума_],
     [Сплачена сума у валюті договору],
     НДСПлатежа,
     [Причини розірвання договору],
     [Причина розірвання договору], 
     [Причина разрыва договора], 
     [Cause of contract termination],
     [Відповідальний за розірвання договору],
     [Responsible for contract cancellation],
     ПлощадкаКонтракта,
     [Код постачальника (тех. ключ)],
     ВалютаКонтракта,
     ДатаИзмененияКонтракта,
     [Сума договору (згідно договору)],
     [Сума договору без ПДВ (згідно договору)],
     [Сума договору без ПДВ (згідно договору)_Валюта],
     [Дата закінчення дії договору (згідно договору)],
     Договір,
     [Опис договору]
Resident Contract_C;	 

Concatenate (Contract1)
LOAD 
     IDTenderKey, 
     IDAwardKey, 
     IDContractOrig, 
     IDContract as IDContractKey, 
     IDContract,
     [Ідентифікатор договору], 
     НомерКонтракта, 
//     if(not IsNull([Причини розірвання договору]), 'terminated', СтатусКонтракта) as СтатусКонтракта, 
     СтатусКонтракта,
     [Опис договору], 
     Договір, 
     ПлощадкаКонтракта, 
     [Дата початку дії договору], 
//     КонДатаКонтракта, 
     ВалютаКонтракта, 
     ВалютаПлатежа, 
     [Сума договору (згідно договору)],
     [Сума договору (згідно договору)_Валюта],
     [Сума договору (згідно договору)] as [Сума договору (згідно тендера)],
     [Сума договору (згідно договору)_Валюта] as [Сума договору (згідно тендера)_Валюта],
     [Сума договору без ПДВ (згідно договору)],
     [Сума договору без ПДВ (згідно договору)_Валюта],
     [Сума договору без ПДВ (згідно договору)] as [Сума договору без ПДВ (згідно тендера)],
     [Сума договору без ПДВ (згідно договору)_Валюта] as [Сума договору без ПДВ (згідно тендера)_Валюта],
     [Дата закінчення дії договору (згідно договору)],
     [Дата закінчення дії договору (згідно договору)] as [Дата закінчення дії договору (згідно тендера)],
     [Сплачена сума_],
     [Сплачена сума у валюті договору], 
     НДСКонтракта, 
     НДСПлатежа, 
//     [Дата і час підписання договору], 
     [Дата підписання договору], 
     ДатаИзмененияКонтракта, 
     [Причини розірвання договору],
     [Причина розірвання договору], 
     [Причина разрыва договора], 
     [Cause of contract termination],
     [Відповідальний за розірвання договору],
     [Responsible for contract cancellation],
     [Код постачальника (тех. ключ)],
     isFromContracting
Resident Contract_C
Where NOT Exists(IDContractKey, IDContract);

DROP Table Contract_C;

Left join(Contract1)
Load IDTenderKey,
	 Идентификатор as ИдентификаторТендераКонтракт,
	 procurementMethodType as procurementMethodTypeContract,
	 ОписаниеТендера as ОписаниеТендера,
	 Тендер as Тендер
Resident Tender_;

Left join(Contract1)
Load IDAwardKey,
	 IDLotKey
Resident Award;

Left join(Contract1)
Load 
	 IDLotKey,
	 ОписаниеЛота,
	 Лот
Resident Lot;

ContractTmp:
NoConcatenate
LOAD  
	 IDTenderKey, 
     IDAwardKey, 
     IDContractOrig, 
     IDContractKey, 
//     IDContractKey as IDContractKey_TEMP,
     IDContract,
     if(IsNull([Ідентифікатор договору]), ИдентификаторТендераКонтракт&'-c1', [Ідентифікатор договору]) as [Ідентифікатор договору], 
     procurementMethodTypeContract,
     НомерКонтракта, 
     if(IsNull(СтатусКонтракта), СтатусКонтракта_, СтатусКонтракта) as СтатусКонтракта, 
     
     if(NOT IsNull([Опис договору]), [Опис договору],
	 	if(NOT IsNull([Опис договору з тендерів]), [Опис договору з тендерів],
	 		if(NOT IsNull(ОписаниеЛота), ОписаниеЛота,
	 			if(NOT IsNull(ОписаниеТендера), ОписаниеТендера
	 			)
	 		)
	 	)
	 ) as [Опис договору],
	 
	 if(NOT IsNull(Договір), Договір,
	 	if(NOT IsNull(ДоговірЗтендерів), ДоговірЗтендерів,
	 		if(NOT IsNull(Лот), Лот,
	 			if(NOT IsNull(Тендер), Тендер
	 			)
	 		)
	 	)
	 ) as Договір,
     
     ПлощадкаКонтракта, 
     [Дата початку дії договору], 
     if(IsNull(ВалютаКонтракта), ВалютаКонтракта_, ВалютаКонтракта) as ВалютаКонтракта, 
     ВалютаПлатежа, 
//     СуммаКонтракта_, 
//     СуммаКонтракта_Валюта,
	 Alt([Сума договору (згідно тендера)], [Сума договору (згідно договору)]) as [Сума договору (згідно тендера)_],
     Alt([Сума договору (згідно тендера)_Валюта], [Сума договору (згідно договору)_Валюта]) as [Сума договору (згідно тендера)_Валюта],
     Alt([Сума договору (згідно договору)], [Сума договору (згідно тендера)]) as [Сума договору (згідно договору)_],
     Alt([Сума договору (згідно договору)_Валюта], [Сума договору (згідно тендера)_Валюта]) as [Сума договору (згідно договору)_Валюта],
     Alt([Дата закінчення дії договору (згідно договору)], [Дата закінчення дії договору (згідно тендера)]) as [Дата закінчення дії договору (згідно договору)],
     Alt([Дата закінчення дії договору (згідно тендера)], [Дата закінчення дії договору (згідно договору)]) as [Дата закінчення дії договору (згідно тендера)],
     
     [Сума договору без ПДВ (згідно тендера)] as [Сума договору без ПДВ (згідно тендера)_],
     [Сума договору без ПДВ (згідно тендера)_Валюта],
     
     [Сума договору без ПДВ (згідно договору)] as [Сума договору без ПДВ (згідно договору)_],
     [Сума договору без ПДВ (згідно договору)_Валюта],
     
     [Сплачена сума_],
     [Сплачена сума у валюті договору], 
     НДСКонтракта, 
     НДСПлатежа, 
//     [Дата і час підписання договору], 
     [Дата підписання договору], 
     if(СтатусКонтракта = 'terminated', Date(Floor(ДатаИзмененияКонтракта))) as [Дата завершення договору], 
     [Причини розірвання договору],
     [Причина розірвання договору], 
     [Причина разрыва договора], 
     [Cause of contract termination],
     [Відповідальний за розірвання договору],
     [Responsible for contract cancellation],
//     Alt([Дата час публікації договору], ДатаВремяПодписания) as [Дата подписания контракта],
     [Код постачальника (тех. ключ)],
     Date(Floor([Дата публікації договору])) as [Дата публікації договору],
//     [Дата і час публікації договору],
     isFromContracting
Resident Contract1;

DROP Table Contract1;

Contract:
NoConcatenate
LOAD  
	 IDTenderKey, 
     IDAwardKey, 
     IDContractOrig, 
     IDContractKey, 
     IDContract,
     [Ідентифікатор договору], 
     НомерКонтракта, 
     СтатусКонтракта, 
     [Опис договору], 
     Договір, 
     ПлощадкаКонтракта, 
     Date(Floor([Дата початку дії договору])) as [Дата початку дії договору], 
//     КонДатаКонтракта, 
     ВалютаКонтракта, 
     ВалютаПлатежа, 
//     СуммаКонтракта_, 
//     СуммаКонтракта_Валюта,
	 [Сума договору (згідно тендера)_],
     [Сума договору (згідно тендера)_Валюта],
     [Сума договору (згідно договору)_],
     [Сума договору (згідно договору)_Валюта],
     
     [Сума договору без ПДВ (згідно тендера)_],
     [Сума договору без ПДВ (згідно тендера)_Валюта],
     
     [Сума договору без ПДВ (згідно договору)_],
     [Сума договору без ПДВ (згідно договору)_Валюта],
     
     Date(Floor([Дата закінчення дії договору (згідно договору)])) as [Дата закінчення дії договору (згідно договору)],
     Date(Floor([Дата закінчення дії договору (згідно тендера)])) as [Дата закінчення дії договору (згідно тендера)],
     if(СтатусКонтракта='active' AND [Дата закінчення дії договору (згідно договору)]+3 >= '$(vCurrentDate)', 1,
     	if(СтатусКонтракта='active' AND ([Дата закінчення дії договору (згідно договору)]+3 < '$(vCurrentDate)' OR IsNull([Дата закінчення дії договору (згідно договору)])), 2,
     		if(СтатусКонтракта='terminated' AND (IsNull([Причини розірвання договору]) OR [Причини розірвання договору]=''), 3,
     			if(СтатусКонтракта='terminated' AND (NOT (IsNull([Причини розірвання договору]) OR [Причини розірвання договору]='')) AND [Сплачена сума_]=0, 4,
     				if(СтатусКонтракта='terminated' AND (NOT (IsNull([Причини розірвання договору]) OR [Причини розірвання договору]='')) AND [Сплачена сума_]>0, 5
     				)
     			)
     		)
     	)
     ) as ContractSubStatus,
     RangeMax(0, '$(vCurrentDate)'-(Floor([Дата закінчення дії договору (згідно договору)])+3) ) as [Затримка звіту про виконання договору (днів)],
     if(СтатусКонтракта='active' AND Floor([Дата закінчення дії договору (згідно договору)])+3 < '$(vCurrentDate)', 1, 
     	if(СтатусКонтракта='terminated' AND Floor([Дата закінчення дії договору (згідно договору)])+3 < [Дата завершення договору], 1, 0
     	)
     ) as [Невчасно опублікований звіт про виконання],
     [Сплачена сума_],
     [Сплачена сума у валюті договору], 
     НДСКонтракта, 
     НДСПлатежа, 
//     [Дата і час підписання договору], 
     [Дата підписання договору], 
     [Дата завершення договору], 
     if(([Дата публікації договору] - [Дата підписання договору]>3 AND NOT procurementMethodTypeContract Like 'reporting*')
     	OR ([Дата публікації договору] - [Дата підписання договору]>1 AND procurementMethodTypeContract Like 'reporting*'), 1, 0) as [Невчасно опублікований договір],
     [Причини розірвання договору],
     [Причина розірвання договору], 
     [Причина разрыва договора], 
     [Cause of contract termination],
     [Відповідальний за розірвання договору],
     [Responsible for contract cancellation],
//     [Дата подписания контракта],
     [Код постачальника (тех. ключ)],
     [Дата публікації договору],
//     [Дата і час публікації договору],
     isFromContracting
Resident ContractTmp
Where NOT Match(СтатусКонтракта, 'cancelled', 'pending');

DROP Table ContractTmp;

//   ================ Изменения контракта из модуля контрактинга ================= 
ContractChangeTmp:
LOAD  
     IDContractKey, 
     //IDTenderKey, 
     СтатусИзмененияКонтракта, 
     ДопНомерКонтракта, 
     Обоснование, 
     ДатаВнесенияИзмененияКонтракта as [Дата публікації змін до договору], 
//     ДатаВремяВнесенияИзмененияКонтракта as [Дата і час публікації змін до договору],
     IDContractChange as [Ідентифікатор зміни договору], 
     [Дата внесення змін до договору],
     IDContractChangeKey
FROM ContractChange_C_????.qvd (qvd)
Where Exists(IDContractKey);

ContractChange:
LOAD  
     IDContractKey, 
     ДопНомерКонтракта, 
     Обоснование, 
     [Дата публікації змін до договору], 
//     [Дата і час публікації змін до договору],
     [Ідентифікатор зміни договору], 
     Date(Floor([Дата внесення змін до договору])) as [Дата внесення змін до договору],
     if([Дата публікації змін до договору]  - Date(Floor([Дата внесення змін до договору])) > 3, 1, 0) as [Невчасно опублікована дод. угода],
     IDContractChangeKey
Resident ContractChangeTmp
Where СтатусИзмененияКонтракта='active';

DROP Table ContractChangeTmp;

//    ================ Изменения контракта из модуля контрактинга ================= 
ContractChangeRationaleType:
LOAD //IDContractChange, 
     IDContractChangeKey, 
     rationaleType as [Rationale types of contract change]
FROM ContractChangeRationaleType_C_????.qvd (qvd)
Where Exists(IDContractChangeKey);


//  ================= Жалобы Тендера ================= 
ComplaintTenderTmp:
LOAD ComplaintTenderStatus, 
     ОписаниеЖалобыТендера, 
     ЖалобаТендера, 
     ДатаЖалобыТендера, 
     ДатаПодачиТребованияЖалобыТендера, 
     ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера, 
     ДатаЭскалацииТребованияЖалобыТендера, 
     ДатаПринятияРешенияПоТребованиюЖалобыТендера, 
     ДатаОтклоненияЖалобыТендера, 
     IDComplaintTender as IDComplaintTenderKey, 
     IDComplaintTender, 
     ИдентификаторЖалобыТендера, 
     РешениеЗаказчикаЖалобыТендера, 
     resolutionTypeTender, 
     [Complaint tender type], 
     УдовлетвореноЖалобыТендера, 
     РешениеОрганаОбжалованияЖалобыТендера, 
     ПричиныОтклоненияЖалобыТендера, 
     IDLotKey,
     ДействиеУчастникаЖалобыТендера, 
     ДатаДействияУчастникаЖалобыТендера, 
     ДатаАкцептаЖалобыТендера,
     ОрганизацияЖалобыТендера, 
     ИндексЖалобыТендера, 
     СтранаЖалобыТендера, 
     АдресЖалобыТендера, 
     РегионЖалобыТендера, 
     ГородЖалобыТендера, 
     СхемаЖалобыТендера, 
     КодОргЖалобыТендера, 
     ТелефонЖалобыТендера, 
     ИмяЖалобыТендера, 
     ЭлАдресЖалобыТендера, 
     ПретензияУдовлетворенаЖалобыТендера, 
     rejectReasonTender, 
     ОписаниеПричиныОтклоненияЖалобыТендера, 
     ДатаРассмотренияЖалобыТендера, 
     МестоРассмотренияЖалобыТендера, 
     IDTenderKey,
     ComplaintLevel,
     ПодавшийЖалобу,
     Complainant,
     ДатаЖалобы
FROM ComplaintTender_????.qvd (qvd)
Where Exists(IDTenderKey);

Left Join (ComplaintTenderTmp)
LOAD
	1 as  ComplaintType
AutoGenerate 1; 	
	

//  ================= Жалобы Оценок ================= 
ComplaintAward:
LOAD ComplaintAwardStatus as ComplaintTenderStatus, 
     ОписаниеЖалобыОценки as ОписаниеЖалобыТендера, 
     ЖалобаОценки as ЖалобаТендера, 
     ДатаЖалобыОценки as ДатаЖалобыТендера, 
     ДатаПодачиТребованияЖалобыОценки as ДатаПодачиТребованияЖалобыТендера, 
     ДатаОтветаЗаказчикаНаТребованиеЖалобыОценки as ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера, 
     ДатаЭскалацииТребованияЖалобыОценки as ДатаЭскалацииТребованияЖалобыТендера, 
     ДатаПринятияРешенияПоТребованиюЖалобыОценки as ДатаПринятияРешенияПоТребованиюЖалобыТендера, 
     ДатаОтклоненияЖалобыОценки as ДатаОтклоненияЖалобыТендера, 
     IDComplaintTender as IDComplaintTenderKey, 
     IDComplaintTender, 
     ИдентификаторЖалобыОценки as ИдентификаторЖалобыТендера, 
     РешениеЗаказчикаЖалобыОценки as РешениеЗаказчикаЖалобыТендера, 
     resolutionTypeAward as resolutionTypeTender, 
     [Complaint award type] as [Complaint tender type], 
     УдовлетвореноЖалобыОценки as УдовлетвореноЖалобыТендера, 
     РешениеОрганаОбжалованияЖалобыОценки as РешениеОрганаОбжалованияЖалобыТендера, 
     ПричиныОтклоненияЖалобыОценки as ПричиныОтклоненияЖалобыТендера, 
     IDLotKey,
     ДействиеУчастникаЖалобыОценки as ДействиеУчастникаЖалобыТендера, 
     ДатаДействияУчастникаЖалобыОценки as ДатаДействияУчастникаЖалобыТендера, 
     ДатаАкцептаЖалобыОценки as ДатаАкцептаЖалобыТендера,
     ОрганизацияЖалобыОценки as ОрганизацияЖалобыТендера, 
     ИндексЖалобыОценки as ИндексЖалобыТендера, 
     СтранаЖалобыОценки as СтранаЖалобыТендера, 
     АдресЖалобыОценки as АдресЖалобыТендера, 
     РегионЖалобыОценки as РегионЖалобыТендера, 
     ГородЖалобыОценки as ГородЖалобыТендера, 
     СхемаЖалобыОценки as СхемаЖалобыТендера, 
     КодОргЖалобыОценки as КодОргЖалобыТендера, 
     ТелефонЖалобыОценки as ТелефонЖалобыТендера, 
     ИмяЖалобыОценки as ИмяЖалобыТендера, 
     ЭлАдресЖалобыОценки as ЭлАдресЖалобыТендера, 
     ПретензияУдовлетворенаЖалобыОценки as ПретензияУдовлетворенаЖалобыТендера, 
     rejectReasonAward as rejectReasonTender, 
     ОписаниеПричиныОтклоненияЖалобыОценки as ОписаниеПричиныОтклоненияЖалобыТендера, 
     ДатаРассмотренияЖалобыОценки as ДатаРассмотренияЖалобыТендера, 
     МестоРассмотренияЖалобыОценки as МестоРассмотренияЖалобыТендера, 
     IDTenderKey, 
     IDAwardKey as IDComplaintAwardKey,
     ComplaintLevel,
     ПодавшийЖалобу,
     Complainant,
     ДатаЖалобы
FROM ComplaintAward_????.qvd (qvd)
Where Exists(IDTenderKey);

Left Join (ComplaintAward)
LOAD
	2 as  ComplaintType
AutoGenerate 1; 

Concatenate (ComplaintTenderTmp)
LOAD
	 *
Resident ComplaintAward;

DROP Table 	ComplaintAward; 

//  ================= Жалобы Квалификаций ================= 

ComplaintQualif:
LOAD ComplaintQualifStatus as ComplaintTenderStatus, 
     ОписаниеЖалобыКвалификации as ОписаниеЖалобыТендера, 
     ЖалобаКвалификации as ЖалобаТендера, 
     ДатаЖалобыКвалификации as ДатаЖалобыТендера, 
     ДатаПодачиТребованияЖалобыКвалификации as ДатаПодачиТребованияЖалобыТендера, 
     ДатаОтветаЗаказчикаНаТребованиеЖалобыКвалификации as ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера, 
     ДатаЭскалацииТребованияЖалобыКвалификации as ДатаЭскалацииТребованияЖалобыТендера, 
     ДатаПринятияРешенияПоТребованиюЖалобыКвалификации as ДатаПринятияРешенияПоТребованиюЖалобыТендера, 
     ДатаОтклоненияЖалобыКвалификации as ДатаОтклоненияЖалобыТендера, 
     IDComplaintTender, 
     IDComplaintTender as IDComplaintTenderKey,
     ИдентификаторЖалобыКвалификации as ИдентификаторЖалобыТендера, 
     РешениеЗаказчикаЖалобыКвалификации as РешениеЗаказчикаЖалобыТендера, 
     resolutionTypeQualif as resolutionTypeTender, 
     [Complaint qualif type] as [Complaint tender type], 
     УдовлетвореноЖалобыКвалификации as УдовлетвореноЖалобыТендера, 
     РешениеОрганаОбжалованияЖалобыКвалификации as РешениеОрганаОбжалованияЖалобыТендера, 
     ПричиныОтклоненияЖалобыКвалификации as ПричиныОтклоненияЖалобыТендера,
     IDLotKey, 
     ДействиеУчастникаЖалобыКвалификации as ДействиеУчастникаЖалобыТендера, 
     ДатаДействияУчастникаЖалобыКвалификации as ДатаДействияУчастникаЖалобыТендера, 
     ОрганизацияЖалобыКвалификации as ОрганизацияЖалобыТендера, 
     ИндексЖалобыКвалификации as ИндексЖалобыТендера, 
     СтранаЖалобыКвалификации as СтранаЖалобыТендера, 
     АдресЖалобыКвалификации as АдресЖалобыТендера, 
     РегионЖалобыКвалификации as РегионЖалобыТендера, 
     ГородЖалобыКвалификации as ГородЖалобыТендера, 
     СхемаЖалобыКвалификации as СхемаЖалобыТендера, 
     КодОргЖалобыКвалификации as КодОргЖалобыТендера, 
     ТелефонЖалобыКвалификации as ТелефонЖалобыТендера, 
     ИмяЖалобыКвалификации as ИмяЖалобыТендера, 
     ЭлАдресЖалобыКвалификации as ЭлАдресЖалобыТендера, 
     ПретензияУдовлетворенаЖалобыКвалификации as ПретензияУдовлетворенаЖалобыТендера, 
     ДатаАкцептаЖалобыКвалификации as ДатаАкцептаЖалобыТендера, 
     rejectReasonQualif as rejectReasonTender, 
     ОписаниеПричиныОтклоненияЖалобыКвалификации as ОписаниеПричиныОтклоненияЖалобыТендера, 
     ДатаРассмотренияЖалобыКвалификации as ДатаРассмотренияЖалобыТендера, 
     МестоРассмотренияЖалобыКвалификации as МестоРассмотренияЖалобыТендера, 
     IDTenderKey, 
     KeyLotBid, 
     ComplaintLevel, 
     ПодавшийЖалобу, 
     Complainant,
     ДатаЖалобы
FROM ComplaintQualification_????.qvd (qvd)
Where Exists(IDTenderKey);

Left Join (ComplaintQualif)
LOAD
	3 as  ComplaintType
AutoGenerate 1; 

Concatenate (ComplaintTenderTmp)
LOAD
	 *
Resident ComplaintQualif;

DROP Table 	ComplaintQualif; 

ComplaintTender_:
NoConcatenate
LOAD 
	 ComplaintTenderStatus, 
     ОписаниеЖалобыТендера, 
     ЖалобаТендера, 
     ДатаЖалобыТендера, 
     ДатаПодачиТребованияЖалобыТендера, 
     Date(Floor(ДатаПодачиТребованияЖалобыТендера)) as ДатаПодачиТребования,
     ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера, 
     ДатаЭскалацииТребованияЖалобыТендера, 
     ДатаПринятияРешенияПоТребованиюЖалобыТендера, 
     ДатаОтклоненияЖалобыТендера, 
     IDComplaintTenderKey, 
     IDComplaintTender, 
     ИдентификаторЖалобыТендера, 
     РешениеЗаказчикаЖалобыТендера, 
     resolutionTypeTender, 
     [Complaint tender type], 
     УдовлетвореноЖалобыТендера, 
     РешениеОрганаОбжалованияЖалобыТендера, 
     ПричиныОтклоненияЖалобыТендера, 
     ДействиеУчастникаЖалобыТендера, 
     ДатаДействияУчастникаЖалобыТендера, 
     ДатаАкцептаЖалобыТендера,
     ОрганизацияЖалобыТендера, 
     ИндексЖалобыТендера, 
     СтранаЖалобыТендера, 
     АдресЖалобыТендера, 
     РегионЖалобыТендера, 
     ГородЖалобыТендера, 
     СхемаЖалобыТендера, 
     КодОргЖалобыТендера, 
     ТелефонЖалобыТендера, 
     ИмяЖалобыТендера, 
     ЭлАдресЖалобыТендера, 
     ПретензияУдовлетворенаЖалобыТендера, 
     rejectReasonTender, 
     ОписаниеПричиныОтклоненияЖалобыТендера, 
     ДатаРассмотренияЖалобыТендера, 
     МестоРассмотренияЖалобыТендера, 
     IDTenderKey, 
     IDComplaintAwardKey,
     KeyLotBid,
	 IDLotKey,
     ComplaintLevel,
     ПодавшийЖалобу as ПодавшийЖалобу_,
     Complainant as Complainant_,
     ДатаЖалобы,
     ComplaintType
Resident  ComplaintTenderTmp
Where ComplaintTenderStatus <> 'draft' AND Year(ДатаЖалобы)>2015; 

DROP Table ComplaintTenderTmp;

// Определение приостановленных тендеров (Жалобы в статусах: pending, accepted, stopping)
Left Join (Tender_)
LOAD Distinct
	 IDTenderKey,
	 1 as ComplaintTenderFlag
Resident ComplaintTender_
Where Match(ComplaintTenderStatus, 'pending', 'accepted', 'stopping') AND Lower([Complaint tender type])='complaint';	 

Left Join (Tender_)
LOAD Distinct
	 IDTenderKey,
	 1 as IsComplaintTender_
Resident ComplaintTender_;

// Типы процедур в жалобах
Left Join (ComplaintTender_)
LOAD
	 IDTenderKey,
	 procurementMethodType
Resident Tender_;	 

// Правка названий подавших Жалобы
Left Join (ComplaintTender_)
LOAD
	 КодОргЖалобыТендера,
	 LastValue(ПодавшийЖалобу_) as ПодавшийЖалобу,
	 LastValue(Complainant_) as Complainant
Resident ComplaintTender_
Where NOT IsNull(КодОргЖалобыТендера)
Group By КодОргЖалобыТендера
Order By ДатаЖалобыТендера;
	 
//  ================= Вопросы ================= 
Question:
LOAD IDTenderKey, 
     ДатаВремяВопроса, 
     ДатаВремяОтвета,
     Вопрос, 
     IDQuestion, 
     questionOf, 
     IDItemKey, 
     IDLotKey, 
     ЗаголовокВопроса, 
     Ответ, 
     ВопросОтEmail, 
     ВопросОтИмя, 
     ВопросОтТелефон, 
     ВопросОтUrl, 
     ВопросОтIDOrg, 
     ВопросОтОрганизация, 
     ВопросОтСхема, 
     ВопросОтЮрНазваниеОрганизации, 
     ВопросОтСтрана, 
     ВопросОтГород, 
     ВопросОтИндекс, 
     ВопросОтРегион, 
     ВопросОтАдрес
FROM Question_????.qvd (qvd)
Where Exists(IDTenderKey);

Left Join (Question)
LOAD
	IDQuestion,
	if(Ответ='' OR IsNull(Ответ), 0, 1) as IsAnswered
Resident Question;	

//  ================= Товары Тендера ================= 
TenderItemTmp_:
LOAD 
	 IDTenderKey, 
     КонДатаПоставки, 
     НачДатаПоставки, 
     Товар, 
     Количество, 
     IDItem, 
     IDItem as IDItemKey,
     IDLotKey, 
//     IDClassCPVKey, 
     IDClassCPV,
     IDClassItemDKPPKey, 
     ItemUnitCode, 
     LineNo, 
     [Страна поставки], 
     [Город поставки], 
     [Индекс поставки], 
     [Регион поставки], 
     [Адрес поставки],
     Широта, 
     Долгота
FROM TenderItem_????.qvd (qvd)
Where Exists(IDTenderKey); 

TenderItemTmp:
NoConcatenate
LOAD 
	*,
	IDClassCPV as IDClassCPVKey
Resident TenderItemTmp_
Where NOT IsNull(IDLotKey);	// Не загружаются Items без привязки к Лоту

DROP Table TenderItemTmp_;

//  ================= Отмены ================= 
FOR Each vFileName in FileList('Cancellation_????.qvd')
	CancellationTmp:
	LOAD 
	     IDTenderKey, 
	     IDCancellation, 
	     cancellationOf, 
	     IDLotKey, 
	     СтатусОтмены, 
	     ПричинаОтмены, 
	     ДатаОтмены
	FROM [$(vFileName)] (qvd)
	Where Exists(IDTenderKey);
NEXT

Cancellation:
LOAD * Inline [
IDTenderKey, IDCancellation, IDCancellationKey,  cancellationOf, IDLotKey, IDLotKey_TEMP, СтатусОтмены, ПричинаОтмены, ДатаОтмены
];

IF NoOfRows('CancellationTmp') > 0
	Concatenate(Cancellation)
	LOAD 
	     IDTenderKey, 
	     IDCancellation,
	     IDCancellation as IDCancellationKey, 
	     cancellationOf, 
	     IDLotKey, 
	     IDLotKey as IDLotKey_TEMP,
	     СтатусОтмены, 
	     ПричинаОтмены, 
	     ДатаОтмены
	Resident CancellationTmp
	Where СтатусОтмены <> 'pending';
	
	DROP Table CancellationTmp;	  
ENDIF   

Left Join (Tender_)
LOAD
	LastValue(ДатаОтмены) as ДатаОтменыТендер,
	IDTenderKey
Resident Cancellation
Where СтатусОтмены = 'active' AND cancellationOf = 'tender'
Group By IDTenderKey
Order By ДатаОтмены;	

//добавление unsuccessful лотов допорогов
Cancellation_Below:
NoConcatenate
load IDTenderKey,
//	 'lot' as cancellationOf,
//	 'відсутність пропозицій' as ПричинаОтмены
	 [Конец приема предложений] as ДатаОтмены
Resident Tender_
where СтатусТендера <> 'active' and СтатусТендера <> 'active.enquiries' and СтатусТендера <> 'active.tendering' and СтатусТендера <> 'cancelled' and procurementMethodType = 'belowThreshold';

inner join (Cancellation_Below)
load IDTenderKey,
	 IDLotKey
//	 IDLotKey&'C' as IDCancellation
Resident Lot
where СтатусЛота = 'unsuccessful';

Concatenate (Cancellation)
load IDTenderKey,
	 IDLotKey,
//	 AutoNumber(IDTenderKey&'-'&IDLotKey&'-', 'AddLinkID') as AddLinkID_Key,
	 IDLotKey&'B' as IDCancellation, 
	 IDLotKey&'B' as IDCancellationKey, 
	 'Відсутність тендерних пропозицій' as ПричинаОтмены,
	 'lot' as cancellationOf,
	 ДатаОтмены,
	 'active' as СтатусОтмены
	 //IDCancellation
Resident Cancellation_Below
where not Exists(IDLotKey_TEMP, IDLotKey);

drop table Cancellation_Below;

//добавление unsuccessful надпорогов (aboveThresholdUA, aboveThresholdEU, aboveThesholdUA.defense)

//формирование общего списка

Cancellation_Above_all:
NoConcatenate
Load IDTenderKey,
	 //'lot' as cancellationOf,
	 [Конец приема предложений] as ДатаОтмены1,
	 //[ТерминальнаяДатаТендера] as ДатаОтмены2,
	 [Конечная дата определения победителя] as ДатаОтмены2, 
	 [Конец квалификационного периода] as ДатаОтмены3,
	 procurementMethodType
Resident Tender_
where СтатусТендера <> 'active' and СтатусТендера <> 'active.tendering' and СтатусТендера <> 'cancelled' and procurementMethodType <> 'belowThreshold' and procurementMethod = 'open' /*and procurementMethodType <> 'aboveThresholdUA.defense'*/;

inner join (Cancellation_Above_all)
load IDTenderKey,
	 IDLotKey
	 //IDLotKey&'A' as IDCancellation
Resident Lot
where СтатусЛота = 'unsuccessful';

left join (Cancellation_Above_all)
LOAD IDLotKey,
//	 Only(IDLotKey) as IDLotKey, 
     IDBid as IDBidKey
Resident Bid_Tmp
where СтатусПредложения = 'active';

//добавление aboveThresholdUA

Cancellation_Above_UA:
load IDLotKey,
	 Only(IDTenderKey) as IDTenderKey,
	 if(Count(DISTINCT IDBidKey)>=2, Only(ДатаОтмены2), Only(ДатаОтмены1)) as ДатаОтмены,
	 if(Count(DISTINCT IDBidKey)>=2, 'Відхилення всіх тендерних пропозицій згідно з Законом про публічні закупівлі', 'Подання для участі в торгах менше двох тендерних пропозицій') as ПричинаОтмены
Resident Cancellation_Above_all
where procurementMethodType = 'aboveThresholdUA'
Group by IDLotKey;

Concatenate (Cancellation)
load IDTenderKey,
	 IDLotKey,
//	 AutoNumber(IDTenderKey&'-'&IDLotKey&'-', 'AddLinkID') as AddLinkID_Key,
	 IDLotKey&'A' as IDCancellation,
	 IDLotKey&'A' as IDCancellationKey,
	 ПричинаОтмены,
	 'lot' as cancellationOf,
	 'active' as СтатусОтмены,
//	 IDAwardConcat,
//	 IDAwardCount,
//	 IDAwardCountDistinct,
	 ДатаОтмены
Resident Cancellation_Above_UA
where not Exists(IDLotKey_TEMP, IDLotKey);

drop table Cancellation_Above_UA;

//добавление aboveThresholdEU
Left Join (Cancellation_Above_all)
LOAD	
	 IDLotKey,
	 IDQualification
Resident Qualification
Where СтатусКвалификации = 'active';	

DROP Field IDLotKey From Qualification;

Cancellation_Above_EU:
load IDLotKey,
	 Only(IDTenderKey) as IDTenderKey,
	 //Concat(IDQualification) as IDQualificationConcat,
	 if(Count(DISTINCT IDBidKey)<=2, Only(ДатаОтмены1), if(Count(DISTINCT IDQualification)<=2, Only(ДатаОтмены3), Only(ДатаОтмены2))) as ДатаОтмены,
	 if(Count(DISTINCT IDBidKey)<=2, 'Подання для участі в торгах менше двох тендерних пропозицій', if(Count(DISTINCT IDQualification)<=2, 'Допущення до оцінки менше двох тендерних пропозицій', 'Відхилення всіх тендерних пропозицій згідно з Законом про публічні закупівлі')) as ПричинаОтмены
Resident Cancellation_Above_all
where procurementMethodType = 'aboveThresholdEU'
Group by IDLotKey;

Concatenate (Cancellation)
load IDTenderKey,
	 IDLotKey,
//	 AutoNumber(IDTenderKey&'-'&IDLotKey&'-', 'AddLinkID') as AddLinkID_Key,
	 IDLotKey&'A' as IDCancellation,
	 IDLotKey&'A' as IDCancellationKey,
	 ПричинаОтмены,
	 'lot' as cancellationOf,
	 'active' as СтатусОтмены,
	 //IDQualificationConcat,
	 ДатаОтмены
Resident Cancellation_Above_EU
where not Exists(IDLotKey_TEMP, IDLotKey);

drop table Cancellation_Above_EU;

Cancellation_Above_defense:
load IDLotKey,
	 Only(IDTenderKey) as IDTenderKey,
	 if(Count(IDBidKey)>=1, Only(ДатаОтмены2), Only(ДатаОтмены1)) as ДатаОтмены,
	 if(Count(IDBidKey)>=1, 'Відхилення всіх тендерних пропозицій згідно з Законом про публічні закупівлі', 'Не подання для участі в торгах жодної тендерної пропозиції') as ПричинаОтмены
Resident Cancellation_Above_all
where procurementMethodType = 'aboveThresholdUA.defense'
Group by IDLotKey;

drop table Cancellation_Above_all;

Concatenate (Cancellation)
load IDTenderKey,
	 IDLotKey,
//	 AutoNumber(IDTenderKey&'-'&IDLotKey&'-', 'AddLinkID') as AddLinkID_Key,
	 ПричинаОтмены,
	 'active' as СтатусОтмены,
	 ДатаОтмены,
	 'lot' as cancellationOf,
	 IDLotKey&'D' as IDCancellation,
	 IDLotKey&'D' as IDCancellationKey
Resident Cancellation_Above_defense
where not Exists(IDLotKey_TEMP, IDLotKey);

drop table Cancellation_Above_defense;

drop field IDLotKey_TEMP from Cancellation;

Left Join (Lot)
LOAD
	LastValue(ДатаОтмены) as ДатаОтменыЛот,
	IDLotKey
Resident Cancellation
Where СтатусОтмены = 'active' AND cancellationOf = 'lot'
Group By IDLotKey
Order By ДатаОтмены;

//  ================= Аукционы ================= 
FOR Each vFileName in FileList('Auction_????.qvd')
	AuctionTmp:
	LOAD 
		 KeyLotBid,
		 IDTender as IDTenderKey,
	     [Начальная сумма аукциона], 
	     [Дата начального предложения],
	     [Приведенная цена], 
	     [Коэффициент коррекции],
	     [Конечная сумма аукциона], 
	     [Дата конечного предложения],
	     [Сумма 3 раунда], 
	     [Дата предложения 3 раунда],
	     [Сумма 1 раунда], 
	     [Дата предложения 1 раунда],
	     [Сумма 2 раунда], 
	     [Дата предложения 2 раунда]
	FROM [$(vFileName)] (qvd)
	Where Exists(KeyLotBid);
NEXT

// Для предотвращения потребления большого объема памяти
Left Join (AuctionTmp)
LOAD Distinct
	 IDTenderKey,
	 Left(IDTenderKey, 4) as TenderYearAuction
Resident AuctionTmp;	 

Auction_:
NoConcatenate
LOAD * Inline [
KeyLotBid, IDTenderKey, Начальная сумма аукциона, Дата начального предложения, Приведенная цена, Коэффициент коррекции, Конечная сумма аукциона, Дата конечного предложения, Сумма 3 раунда, Дата предложения 3 раунда, Сумма 1 раунда, Дата предложения 1 раунда, Сумма 2 раунда, Дата предложения 2 раунда, DistBidQty
];

IF NoOfRows('AuctionTmp') > 0
	FOR Each vTenderYear in FieldValueList('TenderYearAuction')
		Concatenate (Auction_)
		LOAD 
			 KeyLotBid,
			 LastValue(IDTenderKey) as IDTenderKey,
		     LastValue([Начальная сумма аукциона]) as [Начальная сумма аукциона], 
		     LastValue([Дата начального предложения]) as [Дата начального предложения],
		     LastValue([Приведенная цена]) as [Приведенная цена], 
		     LastValue([Коэффициент коррекции]) as [Коэффициент коррекции],
		     LastValue([Конечная сумма аукциона]) as [Конечная сумма аукциона], 
		     LastValue([Дата конечного предложения]) as [Дата конечного предложения],
		     LastValue([Сумма 3 раунда]) as [Сумма 3 раунда], 
		     LastValue([Дата предложения 3 раунда]) as [Дата предложения 3 раунда],
		     LastValue([Сумма 1 раунда]) as [Сумма 1 раунда], 
		     LastValue([Дата предложения 1 раунда]) as [Дата предложения 1 раунда],
		     LastValue([Сумма 2 раунда]) as [Сумма 2 раунда], 
		     LastValue([Дата предложения 2 раунда]) as [Дата предложения 2 раунда]
		Resident AuctionTmp 
		Where  TenderYearAuction = $(vTenderYear)   
		Group By KeyLotBid;
	NEXT
	
	DROP Table AuctionTmp;
	
	Auction:
	NoConcatenate
	LOAD 
		 KeyLotBid,
		 IDTenderKey,
	     [Начальная сумма аукциона] as [Начальная сумма аукциона_], 
	     [Начальная сумма аукциона] as [Начальная сумма аукциона_Валюта],
	     [Приведенная цена] as [Приведенная цена_], 
	     [Приведенная цена] as [Приведенная цена_Валюта],
	     [Коэффициент коррекции],
	     Date([Дата начального предложения], '$(TimestampFormat)') as [Дата начального предложения],
	     [Конечная сумма аукциона] as [Конечная сумма аукциона_],  
	     [Конечная сумма аукциона] as [Конечная сумма аукциона_Валюта], 
	     Date([Дата конечного предложения], '$(TimestampFormat)') as [Дата конечного предложения],
	     [Сумма 3 раунда] as [Сумма 3 раунда_], 
	     [Сумма 3 раунда] as [Сумма 3 раунда_Валюта],
	     Date([Дата предложения 3 раунда], '$(TimestampFormat)') as [Дата предложения 3 раунда],
	     [Сумма 1 раунда] as [Сумма 1 раунда_], 
	     [Сумма 1 раунда] as [Сумма 1 раунда_Валюта],
	     Date([Дата предложения 1 раунда], '$(TimestampFormat)') as [Дата предложения 1 раунда],
	     [Сумма 2 раунда] as [Сумма 2 раунда_], 
	     [Сумма 2 раунда] as [Сумма 2 раунда_Валюта],
	     Date([Дата предложения 2 раунда], '$(TimestampFormat)') as [Дата предложения 2 раунда], 
	     // Кол-во уникальных ставок на аукционе для каждого предложения по лоту
	     Rangenumericcount([Начальная сумма аукциона], if([Сумма 1 раунда]=[Начальная сумма аукциона], '', 1), if([Сумма 2 раунда]=[Сумма 1 раунда], '', 1), if([Сумма 3 раунда]=[Сумма 2 раунда], '', 1)) as DistBidQty
	// = Для устранения задвоенных записей, некорректная структура yaml файлов
	Resident Auction_;
	
	DROP Table Auction_;
ENDIF

//  ================= Неценовые критерии ================= 
FOR Each vFileName in FileList('Features_????.qvd')
	Features:     
	LOAD  
	//	 IDTenderOrig, 
	     IDTenderKey, 
	//   IDFeatureOrig, 
	//   IDItemOrig, 
	     IDItemKey as IDItemFeatureKey, 
	//   IDLotOrig, 
	     IDLotKey as IDLotFeatureKey,
	     featureOf, 
	     [Описание критерия], 
	     [Название критерия], 
	     [Описание значения], 
	     [Значение критерия], 
	     [Название значения],
	//   IDBidOrig, 
	//     IDBidKey, 
		 IDBidKey as IDBidFeatureKey, 
	     KeyFeature
	FROM [$(vFileName)] (qvd)
	Where Exists(IDTenderKey);
NEXT

//  ================= Milestones =================
// ТЗ https://docs.google.com/spreadsheets/d/127b_o1qy3Vr7WKA8LFM9TRZIUNbnSSw-xqlDgrDTick
FOR Each vFileName in FileList('Milestones_????.qvd')
	Milestones:
	LOAD 
//		 IDTenderOrig, 
//	     IDTenderKey, 
//	     IDLotOrig, 
	     IDLotKey, 
//	     IDMilestone, 
	     MilestoneCode, 
	     [Опис події] as [Опис події оплати], 
//	     sequenceNumber, 
	     MilestoneTitle, 
	     Розмір as [Розмір оплати, %], 
	     MilestoneType, 
	     [ID умови] as [ID умови оплати], 
	     MilestoneDurationType, 
	     [Період (днів)] as [Період оплати (днів)]
	FROM [$(vFileName)] (qvd)
	Where Exists(IDLotKey);
NEXT

MilestoneType:
Right Keep (Milestones)
LOAD * Inline [
MilestoneType
financing
];

DROP Table MilestoneType;
DROP Field MilestoneType;

//  ================= Файлы документов тендера ================= 
FOR Each vFileName in FileList('TenderDocuments_????.qvd')
	TenderDocuments:
	LOAD
	     IDTenderKey, 
	//     [Дата изм. файла тендера], 
	     [Дата публ. файла тендера], 
	//   IDTenderDocOrig, 
	     IDTenderDoc, 
	     [Файл тендера] 
	//     [Описание файла тендера], 
	//   [Формат файла тендера], 
	//     [Ссылка на файл тендера], 
	//     TenderDocumentOf, 
	//     TenderDocumentType
	//     TenderDocLanguage, 
	//   IDItemOrig, 
	//     IDItemKey, 
	//   IDLotOrig, 
	//     IDLotKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDTenderKey);
NEXT

//  ================= Файлы документов оценки ================= 
FOR Each vFileName in FileList('AwardDocuments_????.qvd')
	AwardDocuments:
	LOAD 
	//	 IDTenderOrig, 
	//   IDTenderKey, 
		 IDAwardKey,
	     [Дата изм. файла оценки], 
	     [Дата публ. файла оценки] 
	//   IDAwardDocOrig, 
	//     IDAwardDoc 
	//     [Файл оценки], 
	//   [Формат файла квалификации], 
	//     [Ссылка на файл оценки], 
	//   [Описание файла оценки], 
	//     AwardDocumentOf, 
	//     AwardDocumentType, 
	//     AwardDocLanguage, 
	//   IDItemOrig, 
	//     IDItemKey as IDItemAwardDocKey, 
	//   IDLotOrig, 
	//     IDLotKey as IDLotAwardDocKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDAwardKey);
NEXT

//  ================= Файлы документов квалификации ================= 
FOR Each vFileName in FileList('QualificationDocuments_????.qvd')
	QualificationDocuments:
	LOAD 
	//	 IDTenderOrig, 
	//   IDTenderKey, 
	//   IDQualificationOrig, 
	     IDQualificationKey, 
	//     [Формат файла квалификации], 
	//     [Ссылка на файл квалификации], 
	     [Файл квалификации], 
	//   [Описание файла квалификации], 
	     [Дата публ. файла квалификации] 
	//     [Дата изм. файла квалификации], 
	//   IDQualificationDocOrig, 
	//     IDQualificationDoc, 
	//     QualificationDocumentOf, 
	//     QualificationDocumentType, 
	//     QualificationDocLanguage, 
	//   IDItemOrig, 
	//     IDItemKey as IDItemQualificationDocKey, 
	//   IDLotOrig, 
	//     IDLotKey as IDLotQualificationDocKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDQualificationKey);
NEXT

// Дополнительный Классификатор
FOR Each vFileName in FileList('AdditionalClassification_????.qvd')
	AdditionalClassification:
	LOAD 
	//   IDTenderOrig,
	//	 IDClassCPV,
	//	 IDClassDKPPKey,
		 IDClassItemDKPPKey,
	//	 ОписаниеКласс,  
	   	 ItemAddClasId as IDClassDKPPKey,
	     СхемаДопКлас
	//   Товар
	FROM [$(vFileName)] (qvd)
	Where Exists(IDClassItemDKPPKey);
NEXT

Left Join (TenderItemTmp)
LOAD Distinct
	 IDClassItemDKPPKey,
	 IDClassDKPPKey as [Індекс дороги]
Resident AdditionalClassification
Where СхемаДопКлас = 'UA-ROAD';	 

DROP Field СхемаДопКлас;

//  ================= Файлы документов предложений ================= 
//  У Bid в статусе invalid отсутствуют связи и файлы 
//ValidBids:
//LOAD
//	 IDBidKey as IDBidKeyValid
//Resident Bid_Tmp
//Where СтатусПредложения <> 'invalid';	 

// Связь через Bid, есть Bid, где док ссылается на лот, к которому нет ценового предложения
FOR Each vFileName in FileList('BidDocuments_????.qvd')
	BidDocuments:
	LOAD 
		 IDTenderKey, 
		 IDBidKey,
	//     [Дата изм. файла предложения], 
	     [Дата публ. файла предложения], 
	//     IDBidDoc, 
	     [Файл предложения], 
	//   [Формат файла предложения], 
	//     [Ссылка на файл предложения], 
	//   [Описание файла предложения], 
	//     BidDocumentOf, 
	//     BidDocumentType, 
	//     BidDocLanguage, 
	//     IDItemKey as IDItemBidDocumentsKey, 
	//     IDLotKey as IDLotBidDocumentsKey,
	     confidentiality
	//     [Причины конфиденциальности],
	//     envelopeType
	FROM [$(vFileName)] (qvd)
	Where Exists(IDBidKey);
NEXT

//DROP Table ValidBids;
IF NoOfRows('BidDocuments') > 0 THEN
	Left Join (BidDocuments)
	LOAD
		 IDTenderKey,
		 [Конец приема предложений],
		 procurementMethod
	Resident Tender_;	 
ENDIF

//  ================= Файлы документов контракта ================= 
FOR Each vFileName in FileList('ContractDocuments_C_????.qvd')
	ContractDocuments:
	Load 
	//	 IDTenderOrig, 
	//     IDTenderKey, 
		 IDContractKey,
	//     [Дата изм. файла контракта], 
	     [Дата публ. файла контракта], 
	//   IDBidDocOrig, 
	//     IDContractDoc, 
	     [Файл контракта]
	//   [Описание файла контракта], 
	//   [Формат файла контракта], 
	//   [Ссылка на файл контракта], 
	//     ContractDocumentOf, 
	//     ContractDocumentType, 
	//     ContractDocLanguage, 
	//   IDItemOrig_C, 
	//     IDItemKey as IDItemContractDocKey, 
	//   IDLotOrig, 
	//     IDLotKey as IDLotContractDocKey,
	//     IDContractChangeKey as IDContractChangeDocKey
	From [$(vFileName)] (qvd)
	Where Exists(IDContractKey);
NEXT

//  ================= Файлы документов Жалоб Тендера ================= 
FOR Each vFileName in FileList('ComplaintTenderDocuments_????.qvd')
	ComplaintTenderDocuments:
	LOAD 
	//	 IDTenderOrig, 
	//   IDTenderKey, 
		 IDComplaintTenderKey,
	//     [Дата изм. файла жалобы тендера], 
	     [Дата публ. файла жалобы тендера] 
	//   IDBidDocOrig, 
	//     IDComplaintTenderDoc, 
	//     [Файл жалобы тендера], 
	//   [Формат файла жалобы], 
	//     [Ссылка на файл жалобы тендера], 
	//   [Описание файла жалобы тендера], 
	//     ComplaintTenderDocumentOf, 
	//     ComplaintTenderDocumentType, 
	//     ComplaintTenderDocLanguage, 
	//   IDItemOrig, 
	//     IDItemKeyComplaintTender as IDItemComplaintTenderDocKey, 
	//   IDLotOrig, 
	//     IDLotKeyComplaintTender as IDLotComplaintTenderDocKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDComplaintTenderKey);
NEXT

//  ================= Файлы документов Жалоб Оценки ================= 
FOR Each vFileName in FileList('ComplaintAwardDocuments_????.qvd') 
	Concatenate(ComplaintTenderDocuments)
	LOAD 
	//	 IDTenderOrig, 
	//   IDTenderKey, 
	     IDComplaintTenderKey, 
	//     [Дата изм. файла жалобы оценки] as [Дата изм. файла жалобы тендера], 
	     [Дата публ. файла жалобы оценки] as [Дата публ. файла жалобы тендера] 
	//     IDComplaintAwardDoc as IDComplaintTenderDoc, 
	//     [Файл жалобы оценки] as [Файл жалобы тендера], 
	//   [Формат файла жалобы оценки], 
	//     [Ссылка на файл жалобы оценки] as [Ссылка на файл жалобы тендера], 
	//   [Описание файла жалобы оценки] as [Описание файла жалобы тендера], 
	//     ComplaintAwardDocumentOf as ComplaintTenderDocumentOf, 
	//     ComplaintAwardDocumentType as ComplaintTenderDocumentType, 
	//     ComplaintAwardDocLanguage as ComplaintTenderDocLanguage, 
	//     IDItemKeyComplaintAward as IDItemComplaintTenderDocKey, 
	//     IDLotKeyComplaintAward as IDLotComplaintTenderDocKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDComplaintTenderKey); 
NEXT

//  ================= Файлы документов Жалоб Квалификации ================= 
FOR Each vFileName in FileList('ComplaintQualificationDocuments_????.qvd') 
	Concatenate(ComplaintTenderDocuments)
	LOAD  
	     IDComplaintTenderKey, 
	//     [Дата изм. файла жалобы квалификации] as [Дата изм. файла жалобы тендера], 
	     [Дата публ. файла жалобы квалификации] as [Дата публ. файла жалобы тендера]
	//     IDComplaintQualifDoc  as IDComplaintTenderDoc, 
	//     [Файл жалобы квалификации] as [Файл жалобы тендера], 
	//   [Формат файла жалобы квалификации]
	//     [Ссылка на файл жалобы квалификации] as [Ссылка на файл жалобы тендера], 
	//   [Описание файла жалобы квалификации] as [Описание файла жалобы тендера], 
	//     ComplaintQualifDocumentOf as ComplaintTenderDocumentOf, 
	//     ComplaintQualifDocumentType as ComplaintTenderDocumentType, 
	//     ComplaintQualifDocLanguage as ComplaintTenderDocLanguage, 
	//     IDItemKeyComplaintQualif as IDItemComplaintTenderDocKey, 
	//     IDLotKeyComplaintQualif as IDLotComplaintTenderDocKey
	FROM [$(vFileName)] (qvd)
	Where Exists(IDComplaintTenderKey); 
NEXT

////  ================= Файлы документов Отмен =================
//IF FileSize('CancellationDocuments.qvd') > 0 THEN 
//CancellationDocuments:
//LOAD 
////	 IDTenderOrig, 
////   IDTenderKey, 
//	 IDCancellationKey,
//     [Дата изм. файла отмены], 
//     [Дата публ. файла отмены], 
////   IDBidDocOrig, 
//     IDCancellationDoc, 
//     [Файл отмены], 
////   [Формат файла отмены], 
////     [Ссылка на файл отмены], 
////   [Описание файла отмены], 
//     CancellationDocumentOf, 
//     CancellationDocumentType, 
//     CancellationDocLanguage, 
////   IDItemOrig, 
//     IDItemKey as IDItemCancellationDocKey, 
////   IDLotOrig, 
//     IDLotKey as IDLotCancellationDocKey
//FROM CancellationDocuments.qvd (qvd)
//Where Exists(IDCancellationKey);
//ENDIF;

// Ризик-індикатори DoZorro
// ТЗ https://docs.google.com/document/d/1nRc1U4n-tk9Go4eGbZyPy2HZAbUYtcfHfao3YDhqJrw/edit
DoZorroRisks_:
LOAD 
	 IDLOT, 
     [Код ризику], 
     [Значення ризику], 
     ID
FROM DoZorroRisks.qvd (qvd)
Where Exists(ID);

DoZorroRisks:
LOAD 
	 [Код ризику], 
     [Значення ризику], 
     ID
Resident  DoZorroRisks_
Where IsNull(IDLOT);    

Left Join (DoZorroRisks)
LOAD
	 ID,
	 IDTenderKey
Resident Tender_;	 

DROP Field ID From DoZorroRisks;

Left Join (DoZorroRisks)
LOAD
	 IDTenderKey,
	 IDLOT
Resident Lot;	 

DROP Field IDTenderKey From DoZorroRisks;

Concatenate (DoZorroRisks)
LOAD Distinct
	 IDLOT, 
     [Код ризику], 
     [Значення ризику]
Resident DoZorroRisks_
Where NOT IsNull(IDLOT);

DROP Table DoZorroRisks_;	 

Left Join (DoZorroRisks)
LOAD
	 IDLotKey,
	 IDLOT
Resident Lot;

DROP Field IDLOT From DoZorroRisks;
///$tab 3 Справочники
DIRECTORY [..\04_DataBase\02_QVD_DB\01_Dictionary\];

// Участники
//SET vTendererConvert = "if(Trim(IDTendererOrig)=0 OR (Left(IDTendererOrig, 1)='-' AND Right(IDTendererOrig, 1)='-') OR (Left(IDTendererOrig, 1)='_' AND Right(IDTendererOrig, 1)='_'), $2, $1)";

Tenderer:
//LOAD 
//	 $(vTendererConvert(СтранаУчастника, '')) as СтранаУчастника, 
//     $(vTendererConvert(ГородУчастника, '')) as ГородУчастника, 
//     $(vTendererConvert(ИндексУчастника, '')) as ИндексУчастника, 
//     $(vTendererConvert(РегионУчастника, '')) as РегионУчастника, 
//     $(vTendererConvert(АдресУчастника, '')) as АдресУчастника, 
//     $(vTendererConvert(EmailУчастника, '')) as EmailУчастника, 
//     $(vTendererConvert(ИмяУчастника, 'Некоректно заповнений код')) as ИмяУчастника, 
//     $(vTendererConvert(ТелефонУчастника, '')) as ТелефонУчастника, 
//     $(vTendererConvert(СайтУчастника, '')) as СайтУчастника,
//     IDTendererOrig as IDTenderer,
//     IDTenderer as IDTendererKey, 
//     $(vTendererConvert(ЮрНазваниеУчастника, 'Некоректно заповнений код')) as ЮрНазваниеУчастника, 
//     СхемаУчастника, 
//     $(vTendererConvert(Участник, 'Некоректно заповнений код')) as Участник,
//     $(vTendererConvert(Tenderer, 'Code filled incorrectly')) as Tenderer, 
//     $(vTendererConvert(contactPointTenderer, 'Code filled incorrectly')) as contactPointTenderer, 
//     $(vTendererConvert(legalNameTenderer, 'Code filled incorrectly')) as legalNameTenderer, 
//     $(vTendererConvert(TendererEN, 'Code filled incorrectly')) as TendererEN, 
//     $(vTendererConvert([Tenderer city], '')) as [Tenderer city], 
//     $(vTendererConvert([Tenderer region], '')) as [Tenderer region], 
//     $(vTendererConvert([Tenderer country], '')) as [Tenderer country]; 

LOAD СтранаУчастника as _СтранаУчастника, 
     ГородУчастника as _ГородУчастника, 
     ИндексУчастника as _ИндексУчастника, 
     РегионУчастника as _РегионУчастника, 
     АдресУчастника as _АдресУчастника, 
     EmailУчастника, 
     ИмяУчастника, 
     ТелефонУчастника, 
     СайтУчастника,
     IDTendererOrig as IDTenderer,
     ЮрНазваниеУчастника, 
     СхемаУчастника as _СхемаУчастника, 
     Участник as _Участник, 
     Tenderer, 
     IDTendererOrig as IDTendererKey,
     contactPointTenderer, 
     legalNameTenderer, 
     TendererEN, 
     [Tenderer city], 
     [Tenderer region], 
     [Tenderer country],
     FromTenderId as [ІД тендера із останньою пропозицією],
     procedureType,
     DateTimeTenderer,
     [Посилання на профіль в YouControl],
//ТЗ https://docs.google.com/document/d/1-4Tl1hQ9FFWxNKQw2c35WV5VWm6HsDZ-A3v-4xA68PQ/edit     
     if([Дата реєстрації юридичної особи]>='01.01.1927', [Дата реєстрації юридичної особи]) as [Дата реєстрації юридичної особи], 
     RegDateStatus,
     scale;

LOAD СтранаУчастника, 
     ГородУчастника, 
     ИндексУчастника, 
     РегионУчастника, 
     АдресУчастника, 
     EmailУчастника, 
     ИмяУчастника, 
     ТелефонУчастника, 
     СайтУчастника,
     IDTendererOrig,
     ЮрНазваниеУчастника, 
     СхемаУчастника, 
     Участник, 
     Tenderer, 
//     IDTenderer,
     contactPointTenderer, 
     legalNameTenderer, 
     TendererEN, 
     [Tenderer city], 
     [Tenderer region], 
     [Tenderer country],
     FromTenderId,
     procedureType,
     DateTimeTenderer,
     [Посилання на профіль в YouControl],
     [Дата реєстрації юридичної особи], 
     RegDateStatus,
     scale 
FROM Tenderer.qvd (qvd)
Where Exists(IDTendererKey, IDTendererOrig);

Left Join (Tenderer)
LOAD IDTendererOrig  as IDTenderer, 
     СхемаУчастника as СхемаУчастника_, 
     Участник as Участник_, 
     АдресУчастника as АдресУчастника_, 
     ГородУчастника as ГородУчастника_, 
     РегионУчастника as РегионУчастника_, 
     ИндексУчастника as ИндексУчастника_, 
     СтранаУчастника as СтранаУчастника_
FROM TendererNames.qvd (qvd);

Left Join (Tenderer)
LOAD BLCode as IDTenderer, 
     [Дата останнього оновлення чорного списку АМКУ] as [Є в чорному списку АМКУ_]
FROM AMKU.qvd (qvd);

Left Join (Tenderer)
LOAD Distinct 
     [Дата останнього оновлення чорного списку АМКУ]
FROM AMKU.qvd (qvd);

Left Join (Tenderer)
LOAD
	 IDTenderer,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(СхемаУчастника_), СхемаУчастника_, _СхемаУчастника) as СхемаУчастника,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(Участник_), Участник_, _Участник) as Участник,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(АдресУчастника_), АдресУчастника_, _АдресУчастника) as АдресУчастника,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(ГородУчастника_), ГородУчастника_, _ГородУчастника) as ГородУчастника,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(РегионУчастника_), РегионУчастника_, _РегионУчастника) as РегионУчастника,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(ИндексУчастника_), ИндексУчастника_, _ИндексУчастника) as ИндексУчастника,
	 if((procedureType='noncompetitive' OR (procedureType='competitive' AND (DateTimeTenderer<'$(vTendererRuleDate)' OR IsNull(DateTimeTenderer)))) AND NOT IsNull(СтранаУчастника_), СтранаУчастника_, _СтранаУчастника) as СтранаУчастника,
	 if(NOT IsNull([Є в чорному списку АМКУ_]), 1, 0) as [Є в чорному списку АМКУ]
Resident Tenderer;	 

Left Join (Tenderer)
Load
	 IDTenderer,
	 Участник&' | '&IDTenderer as [Назва Учасника | Код Учасника],
     TendererEN&' | '&IDTenderer as [Tenderer | Tenderer code]
Resident  Tenderer;	    

DROP Fields СхемаУчастника_, _СхемаУчастника, Участник_, _Участник, АдресУчастника_, _АдресУчастника, ГородУчастника_, 
_ГородУчастника, РегионУчастника_, _РегионУчастника, ИндексУчастника_, _ИндексУчастника, СтранаУчастника_, 
_СтранаУчастника, procedureType, DateTimeTenderer, [Є в чорному списку АМКУ_] From Tenderer;

// ТЗ https://docs.google.com/document/d/1aT3zBQr-IwPxEeirHjezwqwlgrHiF37upojYOcGRDlk
// Статус юр. лица
Left Join (Tenderer)
LOAD EDRPOU as IDTenderer, 
//     [Статус юридичної особи із ЄДР], 
     [Дата оновлення інформації про статус юридичної особи],
     StatusUOID,
     Resident as _Resident
FROM EDR_UO.qvd (qvd);

Left Join (Tenderer)
LOAD * Inline [
StatusUOID,	Статус юридичної особи,							Legal person status,								Статус юридического лица
1,			Припинено,										Liquidated,											Ликвидировано
2,			В стані припинення,								Under liquidation,									В стадии ликвидации
3,			Порушено справу про банкрутство (санація),		Bankruptcy case initiated (external management),	Возбуждено дело о банкротстве (санация)
4,			Порушено справу про банкрутство,				Bankruptcy case initiated,							Возбуждено дело о банкротстве  
5,			Свідоцтво про державну реєстрацію недійсне,		Certificate of registration invalid,				Свидетельство о государственной регистрации недействительно
6,			Зареєстровано,									Operating,											Действующее
];

DROP Field StatusUOID;

// Сума податкового боргу
Left Join (Tenderer)
LOAD EDRPOU as IDTenderer, 
     TAX_DEBT as [Сума податкового боргу (на початок місяця)]
//     [Дата оновлення інформації про податковий борг юридичних осіб]
FROM TAX_DEBT.qvd (qvd);

Left Join (Tenderer)
LOAD Distinct
     [Дата оновлення інформації про податковий борг юридичних осіб]
FROM TAX_DEBT.qvd (qvd);

Left Join (Tenderer)
LOAD * Inline [
scale,				Тип учасника,						Scale
micro,				Мікропідприємництво,				Micro
sme,				Мале підприємництво,				SME
mid,				Середнє підприємництво,				Middle
large,				Велике підприємництво,				Large
not specified,		Не є суб'єктом господарювання,		Not a business entity
];

// Поставщики (контрактинг)
Suppliers:
LOAD  
     СтранаПоставщика as [Країна постачальника], 
     ГородПоставщика as [Населений пункт постачальника], 
     ИндексПоставщика as [Індекс постачальника], 
     РегионПоставщика as [Регіон постачальника], 
     АдресПоставщика as [Адреса постачальника], 
     EmailПоставщика as [Email постачальника], 
     ИмяПоставщика as [Представник постачальника], 
     ТелефонПоставщика as [Телефон постачальника], 
     СайтПоставщика as [Сайт постачальника], 
     ФаксПоставщика as [Факс постачальника], 
     IDSupplierOrig as [Код постачальника], 
     IDSupplierOrig as [Код постачальника (тех. ключ)], 
     ЮрНазваниеПоставщика as [Юр назва постачальника], 
     СхемаПоставщика as [Код реєстру постачальника], 
     Поставщик as [Постачальник];
     
LOAD //DateTimeSupplier, 
     СтранаПоставщика, 
     ГородПоставщика, 
     ИндексПоставщика, 
     РегионПоставщика, 
     АдресПоставщика, 
     EmailПоставщика, 
     ИмяПоставщика, 
     ТелефонПоставщика, 
     СайтПоставщика, 
     ФаксПоставщика, 
     IDSupplierOrig, 
//     IDSupplier, 
     ЮрНазваниеПоставщика, 
     СхемаПоставщика, 
     Поставщик
FROM Supplier_C.qvd (qvd)
Where Exists ([Код постачальника (тех. ключ)], IDSupplierOrig);


// Классификация CPV
ClassificationCPV:
LOAD  
     ГруппаТовара as КлассификацияCPV,
     ItemGroup as ClassificationCPV,
     IDClassCPV as IDClassCPVKey
FROM ItemCPV.qvd (qvd)
Where Exists(IDClassCPVKey, IDClassCPV);

ItemTmp:
LOAD IDClassCPV, 
     ГруппаТовара as [Классификация CPV],
     ItemGroup as [CPV Classification],
     Left(IDClassCPV, 2) as КодПодразделения,
     if(Mid(IDClassCPV, 3, 1)<>0, Left(IDClassCPV, 3)) as КодГруппы,
     if(Mid(IDClassCPV, 4, 1)<>0, Left(IDClassCPV, 4)) as КодКласса,
     if(Mid(IDClassCPV, 5, 1)<>0, Left(IDClassCPV, 5)) as КодКатегории,
     if(Mid(IDClassCPV, 6, 1)<>0, Left(IDClassCPV, 8)) as КодПодКатегории,
     IDClassCPV as IDClassCPVKey;
     
LOAD IDClassCPV, 
     ГруппаТовара,
     ItemGroup
FROM ItemCPV.qvd (qvd)
//Where Exists(IDClassCPVKey) // Д/б весь справочник
;

Left Join (ItemTmp)
LOAD
	Left(IDClassCPV, 2) as КодПодразделения,
	[Классификация CPV] as Подразделения,
	[CPV Classification] as Divisions
Resident ItemTmp
Where IDClassCPV like '??000000*';	

Left Join (ItemTmp)
LOAD
	Left(IDClassCPV, 3) as КодГруппы,
	[Классификация CPV] as Группы,
	[CPV Classification] as Groups
Resident ItemTmp
Where IDClassCPV like '???00000*' AND Mid(IDClassCPV, 3, 1)<>0;

Left Join (ItemTmp)
LOAD
	Left(IDClassCPV, 4) as КодКласса,
	[Классификация CPV] as Классы,
	[CPV Classification] as Classes
Resident ItemTmp
Where IDClassCPV like '????0000*' AND Mid(IDClassCPV, 4, 1)<>0;

Left Join (ItemTmp)
LOAD
	Left(IDClassCPV, 5) as КодКатегории,
	[Классификация CPV] as Категории,
	[CPV Classification] as Categories
Resident ItemTmp
Where IDClassCPV like '?????000*' AND Mid(IDClassCPV, 5, 1)<>0;

Left Join (ItemTmp)
LOAD
	Left(IDClassCPV, 8) as КодПодКатегории,
	[Классификация CPV] as Подкатегории,
	[CPV Classification] as Subcategories
Resident ItemTmp
Where Mid(IDClassCPV, 6, 1)<>0 AND NOT IDClassCPV like '99999999*';

ItemTmpLast:
NoConcatenate
LOAD
	 [Классификация CPV],
	 [Классификация CPV] as Подразделения,
	 [CPV Classification],
	 [CPV Classification] as Divisions,
	 IDClassCPVKey,
	 IDClassCPV
Resident ItemTmp
Where IDClassCPV like '99999999*';

Drop Fields КодПодразделения, КодГруппы, КодКласса, КодКатегории, КодПодКатегории;

ItemCPV:
NoConcatenate
LOAD
	*,
	Подразделения&if(NOT IsNull(Группы), '+/')&Группы&if(NOT IsNull(Классы), '+/')&Классы&if(NOT IsNull(Категории), '+/')&Категории&if(NOT IsNull(Подкатегории), '+/')&Подкатегории as [Иерархия товаров],
	Divisions&if(NOT IsNull(Groups), '+/')&Groups&if(NOT IsNull(Classes), '+/')&Classes&if(NOT IsNull(Categories), '+/')&Categories&if(NOT IsNull(Subcategories), '+/')&Subcategories as [Item hierarchy]
Resident ItemTmp
Where NOT IDClassCPV like '99999999*';

DROP Table ItemTmp;

// Для кода 99999999-9 — Не визначено
Concatenate (ItemCPV)
LOAD
	 [Классификация CPV],
	 Подразделения,
	 [CPV Classification],
	 Divisions,
	 IDClassCPVKey,
	 IDClassCPV,
	 [Классификация CPV] as [Иерархия товаров],
	 [CPV Classification]as [Item hierarchy]
Resident ItemTmpLast;

DROP Table ItemTmpLast;

// Определение справочника товаров, работ и услуг

//031 - 449
NumGoodsList:
LOAD
	 Text(NUM(RecNo()+2, '00')) as IDClassCPVGoods
AutoGenerate 42;	 

LET vNumGoodsListCount = NoOfRows('NumGoodsList')+2;

SET vIDClassCPVGoods ='';

FOR Each FValue in FieldValueList('IDClassCPVGoods')
	LET vIDClassCPVGoods = vIDClassCPVGoods & chr(39) & FValue & '*' & chr(39) & if(FValue<>vNumGoodsListCount, ', ');
NEXT FValue;

DROP Table NumGoodsList;

CPVTypes:
LOAD
	 IDClassCPV,
	 1 as CPVType // CPV Goods
Resident ItemCPV
Where WildMatch(IDClassCPV, $(vIDClassCPVGoods));	 

Concatenate (CPVTypes)
LOAD
	 IDClassCPV,
	 2 as CPVType // CPV Works
Resident ItemCPV
Where WildMatch(IDClassCPV, '45*');	 

Concatenate (CPVTypes)
LOAD
	 IDClassCPV,
	 3 as CPVType // CPV services
Resident ItemCPV
Where NOT WildMatch(IDClassCPV, $(vIDClassCPVGoods),'45*');

Left Join (ItemCPV)
LOAD
	 IDClassCPV,
	 CPVType
Resident CPVTypes;	

DROP Table  CPVTypes;

CPVType:
LOAD * Inline [
CPVType,	Тип CPV, 	CPV type,		Тип CPVру
1,			Товари,		Goods,			Товары
2,			Роботи,		Works,			Работы
3,			Послуги,	Services,		Услуги
];


ClassificationDKPP:
LOAD 
	 ItemAddClasId, 
     ItemAddClasId as IDClassDKPPKey, 
     Класс
FROM ClassificationDKPP.qvd (qvd)
Where Exists(IDClassDKPPKey, ItemAddClasId);

// Организаторы
OrganizatorTmp:
LOAD СтранаОрганизатора, 
	 ИндексОрганизатора,
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ТелефонОрганизатора,
     IDOrganizatorOrig as IDOrganizator, 
     if(IDOrganizatorOrig='', 1, 0) as IDOrganizatorBlankFlag,
     IDOrganizatorOrig as IDOrganizatorKey, 
     Trim(Replace(Replace(ЮрНазваниеОрганизатора, Chr(10), ' '), Chr(13), ' ')) as ЮрНазваниеОрганизатора, 
     СхемаОрганизатора, 
     Trim(Replace(Replace(Организатор, Chr(10), ' '), Chr(13), ' ')) as Организатор,
     СайтОрганизатора,
     ФаксОрганизатора,
//   kind,
     Trim(Replace(Replace(Organizer, Chr(10), ' '), Chr(13), ' ')) as Organizer, 
     contactPointName,
     ПредставительОрганизатораРу, 
     Trim(Replace(Replace([legalName_en], Chr(10), ' '), Chr(13), ' ')) as legalName_en,
     Trim(Replace(Replace(Organiser, Chr(10), ' '), Chr(13), ' ')) as Organiser,
     [Organiser city];

LOAD СтранаОрганизатора,
	 ИндексОрганизатора, 
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ТелефонОрганизатора,
     IDOrganizatorOrig, 
//     IDOrganizator, 
     ЮрНазваниеОрганизатора, 
     СхемаОрганизатора, 
     Организатор,
     СайтОрганизатора,
     ФаксОрганизатора,
//   kind,
     Organizer, 
     contactPointName, 
     ПредставительОрганизатораРу, 
     [legalName_en],
     Organiser,
     [Organiser city] 
FROM Organizator.qvd (qvd)
Where Exists(IDOrganizatorKey, IDOrganizatorOrig);

// Подмена пустого кода ЕДРПОУ на 20517231
Concatenate (OrganizatorTmp)
LOAD
	СтранаОрганизатора, 
	 ИндексОрганизатора,
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ТелефонОрганизатора,
     '' as IDOrganizator, 
     IDOrganizatorKey, 
     ЮрНазваниеОрганизатора, 
     СхемаОрганизатора, 
     Организатор,
     СайтОрганизатора,
     ФаксОрганизатора,
//   kind,
     Organizer, 
     contactPointName, 
     ПредставительОрганизатораРу, 
     [legalName_en],
     Organiser,
     [Organiser city] 
Resident OrganizatorTmp
Where IDOrganizator='20517231';	

Left Join (OrganizatorTmp)
LOAD
	 IDOrganizator, 
     IDOrganizatorKey as IDOrganizatorKeyBlank
Resident OrganizatorTmp
Where IDOrganizatorBlankFlag=1;	 

Left Join (OrganizatorTmp)
LOAD 
	 [GPA Kind] as [GPA Organiser Kind], 
     IDOrganizator, 
     OrganizatorEN
FROM GPAOrganizator.qvd (qvd);

Organizator_Tmp:
NoConcatenate
LOAD
	 СтранаОрганизатора, 
	 ИндексОрганизатора,
     ГородОрганизатора, 
     РегионОрганизатора, 
     АдресОрганизатора, 
     EmailОрганизатора, 
     ПредставительОрганизатора, 
     ТелефонОрганизатора,
     IDOrganizator, 
//   IDOrganizatorKeyBlank,
     if(IDOrganizator='', IDOrganizatorKeyBlank, IDOrganizatorKey) as IDOrganizatorKey, 
     ЮрНазваниеОрганизатора, 
     СхемаОрганизатора, 
     Организатор,
     СайтОрганизатора,
     ФаксОрганизатора,
//   kind,
     Organizer, 
     contactPointName, 
     ПредставительОрганизатораРу, 
     [legalName_en],
     Organiser,
     OrganizatorEN,
     [Organiser city],
     [GPA Organiser Kind] 
Resident OrganizatorTmp
Where IDOrganizatorBlankFlag<>1;	

DROP Table OrganizatorTmp;

IF NOT IsNull(FileSize('OrgRegionCityMap.qvd'))  THEN
	Left Join (Organizator_Tmp)
	LOAD 
		 IDOrganizator, 
	     Region
	//     Locality
	FROM OrgRegionCityMap.qvd (qvd);
	
	Organizator:
	NoConcatenate
	LOAD СтранаОрганизатора, 
		 if(Lower(СтранаОрганизатора)='україна', 'Ukraine', 'Other') as [Organiser country],
		 ИндексОрганизатора,
	     ГородОрганизатора, 
	     if(РегионОрганизатора='', if(NOT IsNull(Region), Region, ''), РегионОрганизатора) as РегионОрганизатора, 
	//   Region,
	     АдресОрганизатора, 
	     EmailОрганизатора, 
	     ПредставительОрганизатора, 
	     ТелефонОрганизатора,
	     IDOrganizator, 
	     IDOrganizatorKey, 
	     ЮрНазваниеОрганизатора, 
	     СхемаОрганизатора, 
	     Организатор,
	     СайтОрганизатора,
	     ФаксОрганизатора,
	//   kind,
	     Organizer, 
	     contactPointName, 
	     ПредставительОрганизатораРу, 
	     [legalName_en],
	     if(IsNull(OrganizatorEN), Organiser, OrganizatorEN) as Organiser,
	     [Organiser city],
	     [GPA Organiser Kind] 
	Resident Organizator_Tmp;
	
	DROP Table Organizator_Tmp;
ENDIF

// Флаг для отборов в Single API
IF NOT IsNull(FileSize('apiExp.qvd')) THEN
	Left Join (Organizator)
	LOAD IDOrganizator, 
	     ExpFlag as _ExpFlag
	FROM apiExp.qvd (qvd);
ENDIF

// Иерархия Организаторов
HierarchyOrganizatorTmp:
LOAD 
     IDOrganizator, 
     [Краткое название], 
     [Главный орган], 
     [Второстепенный орган],
     [Менеджер],
     [Short name],
     [Secondary agency],
     [Head agency],
     [Функції замовників] as [Функції організатора],
     [Procurement entity functions]
FROM HierarchyOrganizator.qvd (qvd)
Where Exists(IDOrganizator);

Concatenate (HierarchyOrganizatorTmp)
LOAD Distinct
	 [Главный орган],
	 [Head agency]
Resident HierarchyOrganizatorTmp;	

Concatenate (HierarchyOrganizatorTmp)
LOAD Distinct
	 [Главный орган],
	 [Head agency],
	 [Второстепенный орган],
	 [Secondary agency]
Resident HierarchyOrganizatorTmp;	

HierarchyOrganizator:
NoConcatenate
LOAD
	*,
	1 as HierarchyFlag,
	[Главный орган]&if(NOT IsNull([Второстепенный орган]), '+/')&[Второстепенный орган]&if(NOT IsNull([Краткое название]), '+/')&[Краткое название] as [Иерархия организаторов],
	[Head agency]&if(NOT IsNull([Secondary agency]), '+/')&[Secondary agency]&if(NOT IsNull([Short name]), '+/')&[Short name] as [Organiser hierarchy]
Resident HierarchyOrganizatorTmp;

DROP Table HierarchyOrganizatorTmp;

Left Join (HierarchyOrganizator)
LOAD
	IDOrganizator,
	IDOrganizatorKey as IDOrganizatorHierarchyKey
Resident Organizator;	

Concatenate (HierarchyOrganizator)
LOAD
	Организатор as [Главный орган],
//	Organiser as [Head agency],
	Организатор as [Иерархия организаторов],
//	Organiser as [Organiser hierarchy],
	IDOrganizator,
	0 as HierarchyFlag
Resident 	Organizator
Where NOT Exists(IDOrganizatorHierarchyKey, IDOrganizatorKey);

DROP Field IDOrganizatorHierarchyKey;

Left Join (Organizator)
LOAD Distinct
	 IDOrganizator,
	 if(HierarchyFlag=0, 'Без ГО', [Главный орган]) as [Главный_орган],
	 if(HierarchyFlag=0, 'Without HA', [Head agency]) as [Head_agency]
Resident HierarchyOrganizator;	 

// Дополнительные контакты организаторов
AddOrgContactPoints:
LOAD ТелефонОрганизатораДоп, 
     contactPointNameAdd, 
     ПредставительОрганизатораДоп, 
     availableLanguageAdd, 
     EmailОрганизатораДоп, 
     СайтОрганизатораДоп, 
     ФаксОрганизатораДоп, 
	 IDOrganizatorOrig as IDOrganizatorKey
//     IDOrganizatorKey
FROM AddOrgContactPoints.qvd (qvd)
Where Exists(IDOrganizatorKey, IDOrganizatorOrig);


// Единицы измерения товаров
Left Join (TenderItemTmp)
LOAD 
     ItemUnitCode, 
     [Од. виміру], 
     Unit, 
     [Ед. измерения]
FROM UnitCodes.qvd (qvd)
Where Lower(ItemUnitCodeType)='name';

// Названия дорог
Left Join (TenderItemTmp)
LOAD [Індекс дороги], 
     [Назва дороги]
FROM UAroads.qvd (qvd);

// Типы заказчиков

OrganizatorType:
Left Keep (Tender_)
LOAD * Inline [
kind,			 		Тип організатора,				Тип организатора,				Organiser Type
general,		 		Замовник (загальний),			Заказчик (общий),				General
special,		 		Замовник в окремих сферах,		Заказчик в отдельных сферах,	Special
defense,		 		Замовник оборони,				Заказчик обороны,				Defense
other,			 		Замовник інший,					Заказчик другой,				Other
from pilot project,		З пілотного проекту,			С пилотного проекта,			From Pilot Project
];

// Координаты областей
RegionCoordinates:
LOAD Region as РегионОрганизатора, 
	 RegionEN as [Region of Organizer],
     Coordinates
FROM
RegionCoordinates.qvd (qvd)
//Where Exists (РегионОрганизатора, Region)
;

TendererRegionCoordinates:
LOAD Region as РегионУчастника, 
	 RegionEN as [Region of Tenderer],
     Coordinates as TendererCoordinates
FROM
RegionCoordinates.qvd (qvd)
Where Exists (РегионУчастника, Region);

Left Join (Tenderer)
LOAD
	 РегионУчастника, 
	 [Region of Tenderer] as [Region of Tenderer_]
Resident TendererRegionCoordinates;	 


// Статусы тендеров, перевод, сортировка
TendersStatus:
//Left Keep (Tender_)
LOAD * Inline [
СтатусТендера, 							Статус, 								СтатусРу,								Status,							ПорядокСтатуса
active,									Активна закупівля,						Активная закупка,						Active tender,					1
active.enquiries, 						Період уточнень, 						Период уточнений,						Enquiry period,					2
active.tendering, 						Очікування пропозицій, 					Ожидание предложений,					Tendering,						3
active.pre-qualification,				Прекваліфікація,						Преквалификация,						Pre-qualification,				4	
active.pre-qualification.stand-still,	Прекваліфікація (період оскаржень),		Преквалификация (период обжалований),	Pre-qualification stand-still,	5
active.auction, 						Період аукціону, 						Период аукциона,						Auction	period,					6
active.qualification, 					Кваліфікація переможця, 				Квалификация победителя,				Winner qualification,			7
active.awarded, 						Пропозиції розглянуто, 					Предложения рассмотрено,				Awarded,						8
unsuccessful, 							Закупівля не відбулась, 				Закупка не состоялась,					Tender unsuccessful,			9
complete, 								Завершена закупівля, 					Завершенная закупка,					Tender completed,				10
cancelled, 								Відмінена закупівля, 					Отмененная закупка,						Tender cancelled,				11
];

// ПодСтатусы тендеров, перевод
SubTendersStatus:
LOAD * Inline [
ПодСтатусТендера,						Підстатуси тендера,						Подстатусы тендера,							TenderSubStatuses,								Узагальнені статуси,	Обобщенные статусы,	Generalized statuses,	ПорядокПодСтатуса, GenStatusOrder
active,									Опубліковано намір укласти договір,		Опубликовано намерение заключить договор,	Intention published to conclude a contract,		Відбуваються,			Происходят,			Proceed,				1,					1
active.enquiries,						Період уточнень,						Период уточнений,							Enquiry period,									Відбуваються,			Происходят,			Proceed,				2,					1
active.tendering,						Період прийому пропозицій,				Период прийома предложений,					Tendering,										Відбуваються,			Происходят,			Proceed,				3,					1
active.pre-qualification,				Прекваліфікація,						Преквалификация,							Pre-qualification,								Відбуваються,			Происходят,			Proceed,				4,					1
active.pre-qualification.stand-still,	Прекваліфікація (період оскаржень),		Преквалификация (период обжалований),		Pre-qualification stand-still,					Відбуваються,			Происходят,			Proceed,				5,					1
active.auction,							Аукціон,								Аукцион,									Auction,										Відбуваються,			Происходят,			Proceed,				6,					1
active.qualification,					Розгляд пропозицій,						Рассмотрение предложений,					Winner qualification,							Відбуваються,			Происходят,			Proceed,				7,					1
active.qualification30,					Розгляд пропозицій 30 днів+,			Рассмотрение предложений 30 дней+,			Winner qualification 30 days+,					Відбуваються,			Происходят,			Proceed,				8,					1
active.awarded,							Пропозиції розглянуто,					Предложения рассмотрено,					Awarded,										Відбуваються,			Происходят,			Proceed,				9,					1
active.awarded30,						Пропозиції розглянуто 30 днів+,			Предложения рассмотрено 30 дней+,			Awarded 30 days+,								Відбуваються,			Происходят,			Proceed,				10,					1
stopped.by.complaint,					Зупинено оскарженням,					Остановлено обжалованием,					Stopped by complaint,							Відбуваються,			Происходят,			Proceed,				11,					1
unsuccessful,							Не відбувся,							Не состоялся,								Unsuccessful,									Неуспішні,				Неуспешные,			Unsuccessful,			12,					2
complete,								Завершена закупівля,					Завершенная закупка,						Complete,										Завершені,				Завершенные,		Complete,				13,					3
cancelled,								Скасовано,								Отменено,									Cancelled,										Неуспішні,				Неуспешные,			Unsuccessful,			14,					2
];

TendersGrStatus:
LOAD * Inline [
IDStatusGrTender, 	СтатусГр, 					СтатусГрРу,					StatusGr,				СтатусКл, 	СтатусКлРу,		StatusCl, 	IDStatusClTender
1, 					Невдалі, 					Неудачные,					Failed,					НЕВДАЛІ,	НЕУДАЧНЫЕ,		FAILED, 	1	
2, 					Завершені (1 уч-к), 		Завершенные (1 уч-к),		Completed (1 t-r),		ЗАКРИТІ,	ЗАКРЫТЫЕ,		CLOSED,		2
3, 					Завершені (>1 уч-ка), 		Завершенные (>1 уч-ка),		Completed (>1 t-r),		ЗАКРИТІ,	ЗАКРЫТЫЕ,		CLOSED,		2
4, 					Незавершені (1 уч-к), 		Незавершенные (1 уч-к),		Not completed (1 t-r),	ВІДКРИТІ,	ОТКРЫТЫЕ,		OPENED,		3
5, 					Незавершені (>1 уч-ка), 	Незавершенные (>1 уч-ка),	Not completed (>1 t-r),	ВІДКРИТІ,	ОТКРЫТЫЕ,		OPENED,		3
6, 					Нові, 						Новые,						New,					НОВІ,		НОВЫЕ,			NEW,		4
];


// Метод закупки
ProcurementMethod:
Left Keep (Tender_)
LOAD * Inline [
procurementMethod, Метод закупівлі, Метод закупки
open,			   Відкрита,		Открытая
limited,		   Обмежена,		Ограниченная
];

// Тип процедуры закупки
ProcurementMethodType:
Left Keep (Tender_)
LOAD * Inline [
procurementMethodType,		Procurement Method Type,	 		Тип методу закупівлі, 							Тип метода закупки,										Конкурентність,		Конкурентность,		Competitiveness,	Допороговість,	BelowThresholdness,			Допороговость
belowThreshold,		   		Below Threshold,					Допорогова закупівля,			 				Допороговая закупка,									Конкурентні,		Конкурентные,		Competitive,		Допороги,		Below Threshold,			Допороги
reporting,			   		Reporting,							Процедура звітування про укладений договір,		Отчетная процедура о заключенном договоре,				Неконкурентні,		Неконкурентные,		NonCompetitive,		Допороги,		Below Threshold,			Допороги
negotiation,		   		Negotiation,						Переговорна процедура,							Переговорная процедура,									Неконкурентні,		Неконкурентные,		NonCompetitive,		Надпороги,		Above Threshold,			Сверхпороги
negotiation.quick,	   		Quick Negotiation,					Переговорна процедура за нагальною потребою,	Переговорная процедура по неотложной потребности,		Неконкурентні,		Неконкурентные,		NonCompetitive,		Надпороги,		Above Threshold,			Сверхпороги
aboveThresholdUA,	   		Above Threshold UA,					Відкриті торги,									Открытые торги,											Конкурентні,		Конкурентные,		Competitive,		Надпороги,		Above Threshold,			Сверхпороги
aboveThresholdEU,	   		Above Threshold EU,					Відкриті торги із публікацією англ. мовою,		Открытые торги с публикацией на англ. языке,			Конкурентні,		Конкурентные,		Competitive,		Надпороги,		Above Threshold,			Сверхпороги
aboveThresholdUA.defense,	Above Threshold UA Defense,			Переговорна процедура (для потреб оборони),		Переговорная процедура (для нужд обороны),				Конкурентні,		Конкурентные,		Competitive,		Надпороги,		Above Threshold,			Сверхпороги
reportingECat,				E-catalogues,						Е-каталоги,										Е-каталоги,												Неконкурентні,		Неконкурентные,		NonCompetitive,		Допороги,		Below Threshold,			Допороги
];


// Основание использования
ProcurementCause:
Left Keep (Tender_)
LOAD * Inline [
cause,						Причина використання, 									Причина использования
artContestIP,				Закупівля творів мистецтва,								Закупка произведений искусства
noCompetition,				Відсутність конкуренції,								Отсутствие конкуренции
twiceUnsuccessful,			Замовником двічі відмінено тендер,						Заказчиком дважды отменен тендер
additionalPurchase,			Потреба здійснити додаткову закупівлю,					Необходимость совершить дополнительную закупку
additionalConstruction,		Необхідність проведення додаткових будівельних робіт,	Необходимость проведения дополнительных строительных работ
stateLegalServices,			Закупівля юридичних послуг,								Закупка юридических услуг
quick,						Нагальна потреба у здійсненні закупівлі,				Срочная необходимость совершения закупки
];

// Статусы контрактов, перевод, сортировка

ContractsStatus:
Left Keep (Contract)
LOAD * Inline [
СтатусКонтракта, 	Статус контракта, 		Статус контрактаРу,			Contract status,			ПорядокСтатусаКонтракта
pending, 			Узгодження договору, 	Согласование договора,		Approval of the contract,			1
active, 			Активний, 				Активный,					Active,								2
cancelled, 			Скасований до підпису, 	Отмененный до подписания,	Cancelled before signing,			3
terminated, 		Завершений, 			Завершенный,				Terminated,							4
];

// Подстатусы контрактов, перевод, сортировка
ContractSubStatus:
Left Keep (Contract)
LOAD * Inline [
ContractSubStatus, 	Підстатус договору, 					Подстатус договора,					Contract substatus,			Підстатус договору (версія 2),	Substatus of a contract (vol.2),	Подстатус договора (версия 2)
1, 					Активний, 								Активный,							Active,						Активний,						Active,								Активный
2, 					Активний (із затримкою звітування), 	Активный (с задержкой отчета),		Active (report delay),		Активний,						Active,								Активный
3, 					Виконаний, 								Исполненный,						Performed,					Виконаний,						Performed,							Исполненный
4, 					Розірваний (без сплати), 				Расторгнут (без оплаты),			Cancelled (no payments),	Розірваний,						Cancelled,							Расторгнут
5,					Розірваний (були платежі),				Расторгнут (были платежи),			Cancelled (with payments),	Розірваний,						Cancelled,							Расторгнут
];

// Типы причин изменений контрактов, перевод

RationaleType:
Left Keep (ContractChangeRationaleType)
LOAD * Inline [
Rationale types of contract change; 	Тип причини додання змін;																	Тип причины внесения изменений;																			Rationale type
volumeCuts;								1. Зменшення обсягів закупівлі;																1. Уменьшение объемов закупки;																			1. Volume cuts
itemPriceVariation;						2. Зміна ціни за одиницю товару;															2. Изменение цены за единицу товара;																	2. Item price variation
qualityImprovement;						3. Покращення якості предмета закупівлі;													3. Улучшение качества предмета закупки;																	3. Quality Improvement
durationExtension;						4. Продовження строку дії договору;															4. Продление срока действия договора;																	4. Duration extension
priceReduction;							5. Узгоджене зменшення ціни;																5. Согласованное уменьшение цены;																		5. Price reduction
taxRate;								6. Зміна ціни у зв’язку із зміною ставок податків і зборів;									6. Изменение цены в связи с изменением налоговых ставок и сборов;										6. Tax rate change
thirdParty;								7. Зміна зовнішніх показників (споживчі ціни, курси валют, регульованих тарифів і т.п);		7. Изменение внешних показателей (потребительские цены, курсы валют, регулированых тарифов и т.п.);		7. Third party influance (сonsumer price index, exchange rate and so on)	
fiscalYearExtension;					8. Продовження строку дії договору на наступний рік;										8. Продление срока действия договора на следующий год;													8. Fiscal year extension
]
(delimiter is ';');

//// Статусы изменений контрактов, перевод
//
//ContractChangeStatus:
//Left Keep (ContractChange)
//LOAD * Inline [
//ContractChangeStatus, 	Статус зміни договору, Статус изменения договора
//active,					Підтверджена,			Подтвержено
//pending,					Додана,					Добавлено
//];

// Статусы лотов, перевод, сортировка

LotStatus:
Left Keep (Lot)
LOAD * Inline [
СтатусЛота, 		Статус лота, 						Статус лотаРу,				Lot status,					ПорядокСтатусаЛота
active, 			Активний лот закупівлі, 			Активный лот закупки,		Active tender lot,			1
unsuccessful, 		Неуспішний лот закупівлі, 			Неуспешный лот закупки,		Unsuccessful tender lot,	2
complete, 			Завершено лот закупівлі, 			Завершено лот закупки,		Complete tender lot,		3
cancelled, 			Скасовано лот закупівлі, 			Отменено лот закупки,		Cancelled tender lot,		4
];

// Типы неценовых критериев, перевод

FeatureType:
Left Keep (Features)
LOAD * Inline [
featureOf, 	Тип неценового критерия, 	Тип нецінового критерію
tenderer, 	участник, 					учасник
lot, 		лот, 						лот
item, 		номенклатура, 				номенклатура
];

// Типы отмен, перевод

CancellationType:
Left Keep (Cancellation)
LOAD * Inline [
cancellationOf,	Тип отмены,	Тип скасування
tender, 		закупка, 	закупівля
lot, 			лот, 		лот
];

// Типы документов тендеров, перевод

//TenderDocumentType:
//Left Keep (TenderDocuments)
//LOAD * Inline [
//TenderDocumentType,			Тип документа тендера,									Тип документа тендераРу
//tenderNotice, 				Повідомлення про закупівлю, 							Сообщение о закупке
//biddingDocuments, 			Документи закупівлі, 									Документы закупки
//technicalSpecifications,	Технічні специфікації,									Технические спецификации
//evaluationCriteria,			Критерії оцінки,										Критерии оценки
//clarifications,				Пояснення до питань заданих учасниками,					Объяснения вопросов заданных участниками
//eligibilityCriteria,		Критерії прийнятності,									Критерии приемлемости
//shortlistedFirms,			Фірми у короткому списку,								Фирмы в коротком списке
//riskProvisions,				Положення для управління ризиками та зобов’язаннями,	Положения для управления рисками и обязательствами
//billOfQuantity,				Кошторис,												Смета
//bidders,					Інформація про учасників,								Информация об участниках
//conflictOfInterest,			Виявлені конфлікти інтересів,							Выявленные конфликты интересов
//debarments,					Відмова у допуску до закупівлі,							Отказ допуска к закупке
//];

// Типы документов предложений, перевод

//BidDocumentType:
//Left Keep (BidDocuments)
//LOAD * Inline [
//BidDocumentType;			Тип документа пропозиції;					Тип документа предложения
//commercialProposal; 		Цінова пропозиція; 							Ценовое предложение
//qualificationDocuments; 	Документи, що підтверджують кваліфікацію; 	Документы, что подтверждают квалификацию
//eligibilityDocuments;		Документи, що підтверджують відповідність;	Документы, что подтверждают соответствие
//billOfQuantity;				Рахунок за кількість;						Счет за количество
//technicalSpecifications;	Технічні специфікації;						Технические спецификации
//]
//(delimiter is ';');

// Типы документов предложений по конфиденциальности, перевод

//BidDocumentConfidentiality:
//Left Keep (BidDocuments)
//LOAD * Inline [
//confidentiality,			Конфіденційність,					Конфиденциальность
//public,				 		Відкрито, 							Открыто
//buyerOnly,					Для замовника,						Для заказчика
//];

// Типы пакетов документов предложений, перевод

//BidDocumentEnvelopeType:
//Left Keep (BidDocuments)
//LOAD * Inline [
//envelopeType,				Тип пакета,					Тип пакетаРу
//documents,				 	Документи, 					Документы
//financialDocuments,			Фінансові документи,		Финансовые документы
//eligibilityDocuments,		Документи відповідності,	Документы соответствия
//qualificationDocuments,		Документи кваліфікації,		Документы квалификации
//];

// Типы документов оценок, перевод

//AwardDocumentType:
//Left Keep (AwardDocuments)
//LOAD * Inline [
//AwardDocumentType;			Тип документа оцінки;			Тип документа оценки
//awardNotice; 				Повідомлення про рішення; 		Сообщение о решении
//evaluationReports; 			Звіт про оцінку; 				Отчет об оценке
//winningBid;					Пропозиція, що перемогла;		Победившее предложение
//complaints;					Скарги та рішення;				Жалобы и решения
//]
//(delimiter is ';');

// Типы документов контрактов, перевод

//ContractDocumentType:
//Left Keep (ContractDocuments)
//LOAD * Inline [
//ContractDocumentType,		Тип документа контракту,			Тип документа контрактаРу
//contractNotice, 			Повідомлення про договір, 			Сообщение о договоре
//contractSigned, 			Підписаний договір, 				Подписанный договор
//contractArrangements,		Заходи для припинення договору,		Мероприятия по прекращению договора
//contractSchedule,			Розклад та етапи,					Расписание и этапы
//contractAnnexe,				Додатки до договору,				Приложения к договору
//contractGuarantees,			Гарантії,							Гарантии
//subContract,				Субпідряд,							Субподряд
//];

// Типы жалоб тендера, перевод

ComplaintTenderType:
Left Keep (ComplaintTender_)
LOAD * Inline [
Complaint tender type,			Тип скарги тендера,		Тип жалобы тендера
claim, 							Вимога, 				Требование
complaint, 						Скарга, 				Жалоба
];

// Статусы жалоб тендера, перевод

ComplaintTenderStatus:
Left Keep (ComplaintTender_)
LOAD * Inline [
ComplaintTenderStatus,		Статус жалобы тендера, 								Статус скарги тендера,				Статус процедури		
draft, 						Черновик,											Чорновик,							Не заблокована
mistaken, 					Ошибочный,											Помилковий,							Не заблокована
claim, 						Требование,											Вимога,								Не заблокована
answered,					Дан ответ,											Дано відповідь,						Не заблокована
pending,					Ожидает принятия к рассмотрению,					Очікує прийняття до розгляду,		Заблокована
invalid,					Оставлена без рассмотрения,							Залишена без розгляду,				Не заблокована
declined,					Рассмотрена,										Розглянута,							Не заблокована
resolved,					Решена,												Вирішена,							Не заблокована
cancelled,					Отменена жалобщиком,								Скасована скаржником,				Не заблокована
accepted,					Принята к рассмотрению,								Прийнята до розгляду,				Заблокована
stopped,					Рассмотрена,										Розглянута,							Не заблокована
stopping,					Принята к рассмотрению,								Прийнята до розгляду,				Заблокована
satisfied,					Рассмотрена,										Розглянута,							Заблокована
];

// Типы решений по жалобам тендера, перевод

ComplaintTenderResolutionType:
Left Keep (ComplaintTender_)
LOAD * Inline [
resolutionTypeTender,			Тип рішення скарги тендера,		Тип решения жалобы тендера		
invalid, 						Недійсно, 						Недействительно
declined, 						Відхилено, 						Отклонено
resolved,						Вирішено,						Решено
];

// Причины отклонений жалоб тендера, перевод

RejectReasonTender:
Left Keep (ComplaintTender_)
LOAD * Inline [
rejectReasonTender,				Причина відхилення скарги тендера,		Причина отклонения жалобы тендера		
law, 							Закон, 									Закон
payment, 						Оплата, 								Оплата
fixed,							Виправлено,								Исправлено
];

// Уровень жалобы
ComplaintLevel:
LOAD * Inline [
ComplaintLevel,	Рівень скарги,	Уровень жалобы
condition,		На умови,		На условия	
decision,		На рішення,		На решение
];

//// Обобщенные статусы жалоб
//// без статусов просрочки
GenComplaintStatus:
LOAD * Inline [
ComplaintStatusCode,	Статус жалобы,																Статус скарги,															Complaint status,															Обобщенный статус жалобы,	Узагальнений статус скарги,	Generalized complaint status
1,						Удовлетворено,																Задоволено,																Satisfied,																	Удовлетворено,				Задоволено,					Satisfied
2,						Отклонено,																	Відхилено,																Rejected,																	Отклонено,					Відхилено,					Rejected
3,						Не удовлетворено,															Не задоволено,															Not satisfied,																Не удовлетворено,			Не задоволено,				Not satisfied
4,						Отозвано,																	Відкликано,																Revoked,																	Отозвано,					Відкликано,					Revoked
5,						Требование.В процессе,														Вимога.В процесі,														Claim.In the process,														В процессе,					В процесі,					In the process
6,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
7,						Жалоба.В рассмотрении,														Скарга.В розгляді,														Complaint.Reviewing,														В процессе,					В процесі,					In the process
8,						Жалоба.В процессе отзыва,													Скарга.В процесі відкликання,											Complaint.Revoking,															В процессе,					В процесі,					In the process
9,						Жалоба.Не рассмотрено,														Скарга.Не розглянуто,													Complaint.Not reviewed,														В процессе,					В процесі,					In the process
10,						Жалоба.В процессе удовлетворения,											Скарга.В процесі задоволення,											Complaint.Satisfying,														В процессе,					В процесі,					In the process
11,						Требование.В процессе,														Вимога.В процесі,														Claim.In the process,														В процессе,					В процесі,					In the process
12,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
13,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
14,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
15,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
16,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
];

//// Со статусами просрочки
//GenComplaintStatus:
//LOAD * Inline [
//ComplaintStatusCode,	Статус жалобы,																Статус скарги,															Complaint status,															Обобщенный статус жалобы,	Узагальнений статус скарги,	Generalized complaint status
//1,						Удовлетворено,																Задоволено,																Satisfied,																	Удовлетворено,				Задоволено,					Satisfied
//2,						Отклонено,																	Відхилено,																Rejected,																	Отклонено,					Відхилено,					Rejected
//3,						Не удовлетворено,															Не задоволено,															Not satisfied,																Не удовлетворено,			Не задоволено,				Not satisfied
//4,						Отозвано,																	Відкликано,																Revoked,																	Отозвано,					Відкликано,					Revoked
//5,						Требование.В процессе,														Вимога.В процесі,														Claim.In the process,														В процессе,					В процесі,					In the process
//6,						Жалоба.В процессе,															Скарга.В процесі,														Complaint.In the process,													В процессе,					В процесі,					In the process
//7,						Жалоба.В рассмотрении,														Скарга.В розгляді,														Complaint.Reviewing,														В процессе,					В процесі,					In the process
//8,						Жалоба.В процессе отзыва,													Скарга.В процесі відкликання,											Complaint.Revoking,															В процессе,					В процесі,					In the process
//9,						Жалоба.Не рассмотрено,														Скарга.Не розглянуто,													Complaint.Not reviewed,														В процессе,					В процесі,					In the process
//10,						Жалоба.В процессе удовлетворения,											Скарга.В процесі задоволення,											Complaint.Satisfying,														В процессе,					В процесі,					In the process
//11,						Требование.Прострочено,														Вимога.Прострочено,														Claim.Expired,																Прострочено,				Прострочено,				Expired
//12,						Жалоба.Прострочено удовлетворение,											Скарга.Прострочено задоволення,											Complaint.Expired satisfaction,												Прострочено,				Прострочено,				Expired
//13,						Жалоба.Прострочено рассмотрение,											Скарга.Прострочено розгляд,												Complaint.Expired consideration,											Прострочено,				Прострочено,				Expired
//14,						Жалоба.Прострочено решение о приеме к рассмотрению,							Скарга.Прострочено рішення про прийняття до розгляду,					Complaint.Decision expired on the admission to the review,					Прострочено,				Прострочено,				Expired
//15,						Жалоба.Прострочено прекращение рассмотрения к принятию к рассмотрению,		Скарга.Прострочено припинення розгляду до прийняття до розгляду,		Complaint.Termination of consideration expired to take into review,			Прострочено,				Прострочено,				Expired
//16,						Жалоба.Просрочка прекращения рассмотрения после принятия к рассмотрению,	Скарга.Прострочення припинення розгляду після прийняття до розгляду,	Complaint.Termination delay of a review after the adoption consideration,	Прострочено,				Прострочено,				Expired
//];

// Для отображения с НДС, без НДС
VATTable:
LOAD * Inline [
VATID,	ПДВ,		НДС,		VAT
1,		З ПДВ,		С НДС,		VAT included	
0,		Без ПДВ,	Без НДС,	Without VAT
];

// Справочник источника финансирования
FinanceSource:
LOAD * Inline [
IsFunder,	Джерело фінансування,	Source of finance,			Источник финансирования 
1,			Донорські кошти,		Funder's money,				Деньги донора
0,			Інші кошти,				Other sources of funding,	Другие средства
];

Funders:
LOAD [Ключ донора], 
     Донор, 
     [Країна донора], 
     [Населений пункт донора], 
     [Індекс донора], 
     [Регіон донора], 
     [Адреса донора], 
     [Email донора], 
     [Факс донора], 
     [Представник донора], 
     [Телефон донора], 
     [Посилання на донора], 
     [Код донора], 
     [Юридична назва донора], 
     [Код реєстру донора], 
     Funder, 
     [Funder contact point name], 
     [Funder legal name], 
     ДонорРу, 
     [Представитель донора], 
     [Юридическое название донора]
FROM Funders.qvd (qvd)
Where Exists([Ключ донора]);

// Причины дисквалификации
DisqualificationResons:
Left Keep (Disqualifications)
LOAD Distinct
	 DisqualGrpResID,
     [Причини дискваліфікації], 
     [Disqualification reasons] 
FROM RegExpDisqualTemplate.qvd (qvd);

// Milestones
MilestoneCode:
Left Keep (Milestones)
LOAD * Inline [
MilestoneCode, Тип оплати,   Payment type
prepayment,	   Аванс,		 Prepayments
postpayment,   Пiсляоплата,	 Postpayments
];

//MilestonesType:
//Left Keep (Milestones)
//LOAD * Inline [
//MilestoneType, Тип події,    Milestone type
//financing,	   Фінансування, Financing
//];

MilestoneDurationType:
Left Keep (Milestones)
LOAD * Inline [
MilestoneDurationType, 	Тип днів оплати, 	Payment's days type
working,	   			робочі, 			working
banking,				банківські,			banking
calendar,				календарні,			calendar
];

MilestoneTitle:
Left Keep (Milestones)
LOAD * Inline [
MilestoneTitle, 				Подія оплати, 						Payment event
executionOfWorks,	   			виконання робіт, 					execution of works
deliveryOfGoods,				поставка товару,					delivery of goods
submittingServices,				надання послуг,						submitting services
signingTheContract,				підписання договору,				signing the contract
submissionDateOfApplications,	дата подання заявки,				submission date of applications
dateOfInvoicing,				дата виставлення рахунку,			date of invoicing
endDateOfTheReportingPeriod,	дата закінчення звітного періоду,	end date of the reporting period
anotherEvent,					інша подія,							another event
];

// Выходные дни от КМУ
Holidays:
LOAD 
	 Holidays
FROM
Holidays.qvd (qvd);

LET vHolidays = Peek('Holidays', 0, 'Holidays');

// Для рассчета показателей НафтоГаза
Naftogaz:
LOAD Id, 
     SheetNo
FROM
Naftogaz.qvd (qvd);

// Ризик-індикатори DoZorro
DoZorroRiskTypes:
Left Keep (DoZorroRisks)
LOAD [Код ризику], 
     [Опис ризику], 
     [Важливість ризику], 
     [Назва ризику], 
     [Технічна назва ризику], 
//     [Тип ризику]
	 [Група ризику]
FROM DoZorroRiskTypes.qvd (qvd);

///$tab 4 Валюта
// Определение последней даты победителя в тендере
Left Join (Tender_)
LOAD IDTenderKey, 
     LastValue(ДатаЗакрытия) as ДатаОпределенияПобедителя
Resident Award
Where СтатусПротоколаОценки = 'active'
Group By IDTenderKey
Order By ДатаПредложения;

// Определение последней даты подписания контракта в тендере
LastContract:
LOAD IDAwardKey, 
     LastValue([Дата підписання договору]) as ДатаПодписанияКонтракта 
Resident Contract
Where Match(СтатусКонтракта, 'active', 'terminated')
Group By IDAwardKey
Order By [Дата підписання договору];

Left Join (LastContract)
LOAD Distinct
	 IDAwardKey,
	 IDTenderKey
Resident Award;	 

Left Join (Tender_)
LOAD IDTenderKey, 
     LastValue(ДатаПодписанияКонтракта) as ДатаПодписанияКонтракта
Resident LastContract
Group By IDTenderKey
Order By ДатаПодписанияКонтракта;

DROP Table LastContract;

Left Join (Tender_)
LOAD IDTenderKey, 
     Alt(ДатаПодписанияКонтракта, ДатаОпределенияПобедителя, Дата) as ДатаКурсаВалют
Resident Tender_;

DROP Fields ДатаПодписанияКонтракта, ДатаОпределенияПобедителя From Tender_;

// Период дат для тендеров
//DistDates:
//LOAD Distinct
//	 Дата,
//	 Дата as TenderDate
//Resident Tender_;	

DistDates:
LOAD 
	 Num(Fieldvalue('Дата',RecNo())) as TenderDate
AUTOGENERATE FieldValueCount('Дата'); 

MinMaxDates:
LOAD 
	Min(TenderDate) as MinDate,
	Max(TenderDate) as MaxDate
RESIDENT DistDates;

LET vMinDate = Date(Peek('MinDate', -1, 'MinMaxDates'));
LET vMaxDate = Date(Peek('MaxDate', -1, 'MinMaxDates'));

DROP TABLE MinMaxDates;
//DROP Field Дата From DistDates;

Calendar_Tmp:
LOAD Date('$(vMinDate)' + RecNo() - 1) as Дата
AutoGenerate vMaxDate - vMinDate + 1;

DIRECTORY [..\04_DataBase\02_QVD_DB\02_Transaction\];

Currency:
LOAD Дата, 
     Валюта, 
     Курс
FROM Currency_*.qvd (qvd);

// Курс до конца периода
Currency_Tmp:
LOAD 
	 Валюта, 
	 Max(Дата) as MaxDate 
RESIDENT Currency 
GROUP BY Валюта;

LEFT JOIN (Currency_Tmp)
LOAD 
	 Валюта, 
	 Дата as MaxDate, 
	 Курс 
RESIDENT Currency;

LEFT JOIN (Currency_Tmp)
LOAD Дата
RESIDENT Calendar_Tmp;

DROP Table Calendar_Tmp;

Concatenate(Currency)
LOAD Валюта, 
	 Курс,
	 Дата
RESIDENT Currency_Tmp
WHERE Дата > MaxDate;

DROP TABLE Currency_Tmp;  

// Курсы валют в тендерах
FOR Each vCurr in FieldValueList('Валюта') 	

	Left Join (Tender_)
	LOAD 
	 	Дата as ДатаКурсаВалют,
	 	Курс as Curr$(vCurr)
	Resident Currency
	Where Валюта='$(vCurr)';	
// Для пересчета сумм 	в EUR для GPA
	
	Left Join (Tender_)
	LOAD 
	 	Дата,
	 	Курс as CurrPub$(vCurr)
	Resident Currency
	Where Валюта='$(vCurr)';
	
NEXT  vCurr;

Left Join (Tender_)
LOAD
	 IDTender,
 	 // Для нормальной отработки IntervalMatch в диапазонах
	 NUM#(Pick(Match(ВалютаТендера, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаТендера_, СуммаТендера_*CurrUSD, СуммаТендера_*CurrEUR, СуммаТендера_*CurrRUB, СуммаТендера_*CurrGBP)) as СуммаТендера,
	 Pick(Match(ШагУменьшенияВалюта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), ШагУменьшения_, ШагУменьшения_*CurrUSD, ШагУменьшения_*CurrEUR, ШагУменьшения_*CurrRUB, ШагУменьшения_*CurrGBP) as ШагУменьшения,
	 Pick(Match(ВалютаГарантииПредложения, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаГарантииПредложения_, СуммаГарантииПредложения_*CurrUSD, СуммаГарантииПредложения_*CurrEUR, СуммаГарантииПредложения_*CurrRUB, СуммаГарантииПредложения_*CurrGBP) as СуммаГарантииПредложения,
	 
	 NUM#(Pick(Match(ВалютаТендера, 'UAH', 'USD', 'RUB', 'GBP'), СуммаТендера_, СуммаТендера_*CurrPubUSD, СуммаТендера_*CurrPubRUB, СуммаТендера_*CurrPubGBP)) as СуммаТендераPub,
	 Pick(Match(ШагУменьшенияВалюта, 'UAH', 'USD', 'RUB', 'GBP'), ШагУменьшения_, ШагУменьшения_*CurrPubUSD, ШагУменьшения_*CurrPubRUB, ШагУменьшения_*CurrPubGBP) as ШагУменьшенияPub,
	 Pick(Match(ВалютаГарантииПредложения, 'UAH', 'USD', 'RUB', 'GBP'), СуммаГарантииПредложения_, СуммаГарантииПредложения_*CurrPubUSD, СуммаГарантииПредложения_*CurrPubRUB, СуммаГарантииПредложения_*CurrPubGBP) as СуммаГарантииПредложенияPub
Resident Tender_;	 

Left Join (Tender_)
LOAD
	 IDTender,
	 NUM#(if(ВалютаТендера='EUR', СуммаТендера_, Round(Floor(СуммаТендераPub/CurrPubEUR, 0.001), 0.01))) as TenderAmountEUR,
	 if(ШагУменьшенияВалюта='EUR', ШагУменьшения_, Round(Floor(ШагУменьшенияPub/CurrPubEUR, 0.001), 0.01)) as MinStepEUR,
	 if(ВалютаГарантииПредложения='EUR', СуммаГарантииПредложения_, Round(Floor(СуммаГарантииПредложенияPub/CurrPubEUR, 0.001), 0.01)) as GuaranteeEUR
Resident Tender_;	 

DROP Fields СуммаТендера_, ШагУменьшения_, СуммаГарантииПредложения_, СуммаТендераPub, ШагУменьшенияPub, СуммаГарантииПредложенияPub;

// Курсы валют в лотах
Left Join (Lot)
LOAD 
	 IDTenderKey,
	 CurrUSD,
	 CurrEUR,
	 CurrRUB,
	 CurrGBP,
	 CurrPubUSD,
	 CurrPubEUR,
	 CurrPubRUB,
	 CurrPubGBP
Resident Tender_;	 

Left Join (Lot)
LOAD
	 IDLotKey,
	 // Для нормальной отработки IntervalMatch в диапазонах
	 NUM#(Pick(Match(ВалютаЛота, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаЛота_, СуммаЛота_*CurrUSD, СуммаЛота_*CurrEUR, СуммаЛота_*CurrRUB, СуммаЛота_*CurrGBP)) as СуммаЛота,
	 Pick(Match(ШагУменьшенияЛотВалюта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), ШагУменьшенияЛот_, ШагУменьшенияЛот_*CurrUSD, ШагУменьшенияЛот_*CurrEUR, ШагУменьшенияЛот_*CurrRUB, ШагУменьшенияЛот_*CurrGBP) as ШагУменьшенияЛот,
	 Pick(Match(ВалютаГарантииПредложенияЛота, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаГарантииПредложенияЛота_, СуммаГарантииПредложенияЛота_*CurrUSD, СуммаГарантииПредложенияЛота_*CurrEUR, СуммаГарантииПредложенияЛота_*CurrRUB, СуммаГарантииПредложенияЛота_*CurrGBP) as СуммаГарантииПредложенияЛота,
	 
	 NUM#(Pick(Match(ВалютаЛота, 'UAH', 'USD', 'RUB', 'GBP'), СуммаЛота_, СуммаЛота_*CurrPubUSD, СуммаЛота_*CurrPubRUB, СуммаЛота_*CurrPubGBP)) as СуммаЛотаPub,
	 Pick(Match(ШагУменьшенияЛотВалюта, 'UAH', 'USD', 'RUB', 'GBP'), ШагУменьшенияЛот_, ШагУменьшенияЛот_*CurrPubUSD, ШагУменьшенияЛот_*CurrPubRUB, ШагУменьшенияЛот_*CurrPubGBP) as ШагУменьшенияЛотPub,
	 Pick(Match(ВалютаГарантииПредложенияЛота, 'UAH', 'USD', 'RUB', 'GBP'), СуммаГарантииПредложенияЛота_, СуммаГарантииПредложенияЛота_*CurrPubUSD, СуммаГарантииПредложенияЛота_*CurrPubRUB, СуммаГарантииПредложенияЛота_*CurrPubGBP) as СуммаГарантииПредложенияЛотаPub
Resident Lot;	 

Left Join (Lot)
LOAD
	 IDLotKey,
	 // Для нормальной отработки IntervalMatch в диапазонах
	 NUM#(if(ВалютаЛота='EUR', СуммаЛота_, Round(Floor(СуммаЛотаPub/CurrPubEUR, 0.001), 0.01))) as LotAmountEUR,
	 if(ШагУменьшенияЛотВалюта='EUR', ШагУменьшенияЛот_, Round(Floor(ШагУменьшенияЛотPub/CurrPubEUR, 0.001), 0.01)) as MinStepLotEUR,
	 if(ВалютаГарантииПредложенияЛота='EUR', СуммаГарантииПредложенияЛота_, Round(Floor(СуммаГарантииПредложенияЛотаPub/CurrPubEUR, 0.001), 0.01)) as LotGuaranteeEUR
Resident Lot;	

DROP Fields СуммаЛота_, ШагУменьшенияЛот_, СуммаГарантииПредложенияЛота_, СуммаЛотаPub, ШагУменьшенияЛотPub, СуммаГарантииПредложенияЛотаPub;

// Курсы валют в предложениях 
Left Join (Bid_Tmp)
LOAD 
	 IDTenderKey,
	 CurrUSD,
	 CurrEUR,
	 CurrRUB,
	 CurrGBP,
	 CurrPubUSD,
	 CurrPubEUR,
	 CurrPubRUB,
	 CurrPubGBP
Resident Tender_;

Left Join (Bid_Tmp)
LOAD
	 KeyLotBid,
	 Pick(Match(ВалютаПредложения, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаПредложения_, СуммаПредложения_*CurrUSD, СуммаПредложения_*CurrEUR, СуммаПредложения_*CurrRUB, СуммаПредложения_*CurrGBP) as СуммаПредложения,
	 Pick(Match(ВалютаПредложения, 'UAH', 'USD', 'RUB', 'GBP'), СуммаПредложения_, СуммаПредложения_*CurrPubUSD, СуммаПредложения_*CurrPubRUB, СуммаПредложения_*CurrPubGBP) as СуммаПредложенияPub
Resident Bid_Tmp;

Left Join (Bid_Tmp)
LOAD
	 KeyLotBid,
	 if(ВалютаПредложения='EUR', СуммаПредложения_, Round(Floor(СуммаПредложенияPub/CurrPubEUR, 0.001), 0.01)) as BidAmountEUR
Resident Bid_Tmp;

DROP Fields СуммаПредложения_, СуммаПредложенияPub From Bid_Tmp;

// Курсы валют в протоколах оценки 
Left Join (Award)
LOAD 
	 IDTenderKey,
	 CurrUSD,
	 CurrEUR,
	 CurrRUB,
	 CurrGBP,
	 CurrPubUSD,
	 CurrPubEUR,
	 CurrPubRUB,
	 CurrPubGBP
Resident Tender_;

Left Join (Award)
LOAD
	 IDAwardKey,
	 Pick(Match(ВалютаПредложения, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), СуммаПредложения_, СуммаПредложения_*CurrUSD, СуммаПредложения_*CurrEUR, СуммаПредложения_*CurrRUB, СуммаПредложения_*CurrGBP) as СуммаПредложения,
	 Pick(Match(ВалютаПредложения, 'UAH', 'USD', 'RUB', 'GBP'), СуммаПредложения_, СуммаПредложения_*CurrPubUSD, СуммаПредложения_*CurrPubRUB, СуммаПредложения_*CurrPubGBP) as СуммаПредложенияPub
Resident Award;

Left Join (Award)
LOAD
	 IDAwardKey,
	 if(ВалютаПредложения='EUR', СуммаПредложения_, Round(Floor(СуммаПредложенияPub/CurrPubEUR, 0.001), 0.01)) as BidAmountEUR
Resident Award;

DROP Fields СуммаПредложения_, СуммаПредложенияPub From Award;

// Курсы валют в контрактах 
Left Join (Contract)
LOAD 
	 IDAwardKey,
	 CurrUSD,
	 CurrEUR,
	 CurrRUB,
	 CurrGBP,
	 CurrPubUSD,
	 CurrPubEUR,
	 CurrPubRUB,
	 CurrPubGBP
Resident Award;

Left Join (Contract)
LOAD
	 IDContractKey,
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сума договору (згідно договору)_], [Сума договору (згідно договору)_]*CurrUSD, [Сума договору (згідно договору)_]*CurrEUR, [Сума договору (згідно договору)_]*CurrRUB, [Сума договору (згідно договору)_]*CurrGBP) as [Сума договору (згідно договору)],
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сума договору (згідно тендера)_], [Сума договору (згідно тендера)_]*CurrUSD, [Сума договору (згідно тендера)_]*CurrEUR, [Сума договору (згідно тендера)_]*CurrRUB, [Сума договору (згідно тендера)_]*CurrGBP) as [Сума договору (згідно тендера)],
	 Pick(Match(ВалютаПлатежа, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сплачена сума_], [Сплачена сума_]*CurrUSD, [Сплачена сума_]*CurrEUR, [Сплачена сума_]*CurrRUB, [Сплачена сума_]*CurrGBP) as [Сплачена сума],
	 
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сума договору без ПДВ (згідно договору)_], [Сума договору без ПДВ (згідно договору)_]*CurrUSD, [Сума договору без ПДВ (згідно договору)_]*CurrEUR, [Сума договору без ПДВ (згідно договору)_]*CurrRUB, [Сума договору без ПДВ (згідно договору)_]*CurrGBP) as [Сума договору без ПДВ (згідно договору)],
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сума договору без ПДВ (згідно тендера)_], [Сума договору без ПДВ (згідно тендера)_]*CurrUSD, [Сума договору без ПДВ (згідно тендера)_]*CurrEUR, [Сума договору без ПДВ (згідно тендера)_]*CurrRUB, [Сума договору без ПДВ (згідно тендера)_]*CurrGBP) as [Сума договору без ПДВ (згідно тендера)],
	 
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'RUB', 'GBP'), [Сума договору (згідно договору)_], [Сума договору (згідно договору)_]*CurrPubUSD, [Сума договору (згідно договору)_]*CurrPubRUB, [Сума договору (згідно договору)_]*CurrPubGBP) as СуммаКонтрактаPub,
	 Pick(Match(ВалютаКонтракта, 'UAH', 'USD', 'RUB', 'GBP'), [Сума договору (згідно тендера)_], [Сума договору (згідно тендера)_]*CurrPubUSD, [Сума договору (згідно тендера)_]*CurrPubRUB, [Сума договору (згідно тендера)_]*CurrPubGBP) as СуммаКонтрактаТендPub,
	 Pick(Match(ВалютаПлатежа, 'UAH', 'USD', 'RUB', 'GBP'), [Сплачена сума_], [Сплачена сума_]*CurrPubUSD, [Сплачена сума_]*CurrPubRUB, [Сплачена сума_]*CurrPubGBP) as СуммаПлатежаPub
Resident Contract;

Left Join (Contract)
LOAD
	 IDContractKey,
	 if(ВалютаКонтракта='EUR', [Сума договору (згідно договору)_], Round(Floor(СуммаКонтрактаPub/CurrPubEUR, 0.001), 0.01)) as ContractAmountEUR,
	 if(ВалютаКонтракта='EUR', [Сума договору (згідно тендера)_], Round(Floor(СуммаКонтрактаТендPub/CurrPubEUR, 0.001), 0.01)) as ContractTendAmountEUR,
	 if(ВалютаПлатежа='EUR', [Сплачена сума_], Round(Floor(СуммаПлатежаPub/CurrPubEUR, 0.001), 0.01)) as PayAmountEUR
Resident Contract;

DROP Fields [Сума договору (згідно тендера)_], [Сума договору (згідно договору)_], [Сплачена сума_], [Сума договору без ПДВ (згідно договору)_], [Сума договору без ПДВ (згідно тендера)_], СуммаКонтрактаPub, СуммаКонтрактаТендPub, СуммаПлатежаPub;

// Курсы валют в аукционах (на дату создания тендера)
Left Join (Auction)
LOAD 
	 KeyLotBid,
	 ВалютаПредложения,
	 CurrUSD,
	 CurrEUR,
	 CurrRUB,
	 CurrGBP,
	 CurrPubUSD,
	 CurrPubEUR,
	 CurrPubRUB,
	 CurrPubGBP
Resident Bid_Tmp;

// Если валюта предложения не определена (статус Bid=unsuccessful), то берется валюта из тендера
Left Join (Auction)
LOAD
	 IDTenderKey,
	 ВалютаТендера
Resident Tender_;	 

Left Join (Auction)
LOAD 
	 KeyLotBid,
	 if(IsNull(ВалютаПредложения), ВалютаТендера, ВалютаПредложения) as ВалютаПредложенияАукциона
Resident Auction;	 

DROP Fields ВалютаПредложения, ВалютаТендера, IDTenderKey From Auction;

Left Join (Auction)
LOAD
	 KeyLotBid,
	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Начальная сумма аукциона_], [Начальная сумма аукциона_]*CurrUSD, [Начальная сумма аукциона_]*CurrEUR, [Начальная сумма аукциона_]*CurrRUB, [Начальная сумма аукциона_]*CurrGBP) as [Начальная сумма аукциона],
	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Приведенная цена_], [Приведенная цена_]*CurrUSD, [Приведенная цена_]*CurrEUR, [Приведенная цена_]*CurrRUB, [Приведенная цена_]*CurrGBP) as [Приведенная цена],
	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Конечная сумма аукциона_], [Конечная сумма аукциона_]*CurrUSD, [Конечная сумма аукциона_]*CurrEUR, [Конечная сумма аукциона_]*CurrRUB, [Конечная сумма аукциона_]*CurrGBP) as [Конечная сумма аукциона],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сумма 3 раунда_], [Сумма 3 раунда_]*CurrUSD, [Сумма 3 раунда_]*CurrEUR, [Сумма 3 раунда_]*CurrRUB, [Сумма 3 раунда_]*CurrGBP) as [Сумма 3 раунда],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сумма 1 раунда_], [Сумма 1 раунда_]*CurrUSD, [Сумма 1 раунда_]*CurrEUR, [Сумма 1 раунда_]*CurrRUB, [Сумма 1 раунда_]*CurrGBP) as [Сумма 1 раунда],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'EUR', 'RUB', 'GBP'), [Сумма 2 раунда_], [Сумма 2 раунда_]*CurrUSD, [Сумма 2 раунда_]*CurrEUR, [Сумма 2 раунда_]*CurrRUB, [Сумма 2 раунда_]*CurrGBP) as [Сумма 2 раунда],
 	 
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Начальная сумма аукциона_], [Начальная сумма аукциона_]*CurrPubUSD, [Начальная сумма аукциона_]*CurrPubRUB, [Начальная сумма аукциона_]*CurrPubGBP) as [Начальная сумма аукционаPub],
	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Приведенная цена_], [Приведенная цена_]*CurrPubUSD, [Приведенная цена_]*CurrPubRUB, [Приведенная цена_]*CurrPubGBP) as [Приведенная ценаPub],
	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Конечная сумма аукциона_], [Конечная сумма аукциона_]*CurrUSD, [Конечная сумма аукциона_]*CurrRUB, [Конечная сумма аукциона_]*CurrGBP) as [Конечная сумма аукционаPub],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Сумма 3 раунда_], [Сумма 3 раунда_]*CurrPubUSD, [Сумма 3 раунда_]*CurrPubRUB, [Сумма 3 раунда_]*CurrPubGBP) as [Сумма 3 раундаPub],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Сумма 1 раунда_], [Сумма 1 раунда_]*CurrPubUSD, [Сумма 1 раунда_]*CurrPubRUB, [Сумма 1 раунда_]*CurrPubGBP) as [Сумма 1 раундаPub],
 	 Pick(Match(ВалютаПредложенияАукциона, 'UAH', 'USD', 'RUB', 'GBP'), [Сумма 2 раунда_], [Сумма 2 раунда_]*CurrPubUSD, [Сумма 2 раунда_]*CurrPubRUB, [Сумма 2 раунда_]*CurrPubGBP) as [Сумма 2 раундаPub]
Resident Auction;

Left Join (Auction)
LOAD
	 KeyLotBid,
	 if(ВалютаПредложенияАукциона='EUR', [Начальная сумма аукциона_], Round(Floor([Начальная сумма аукционаPub]/CurrPubEUR, 0.001), 0.01)) as StartAuctionAmountEUR,
	 if(ВалютаПредложенияАукциона='EUR', [Приведенная цена_], Round(Floor([Приведенная ценаPub]/CurrPubEUR, 0.001), 0.01)) as ReducedPriceEUR,
	 if(ВалютаПредложенияАукциона='EUR', [Конечная сумма аукциона_], Round(Floor([Конечная сумма аукционаPub]/CurrPubEUR, 0.001), 0.01)) as EndAuctionAmountEUR,
 	 if(ВалютаПредложенияАукциона='EUR', [Сумма 3 раунда_], Round(Floor([Сумма 3 раундаPub]/CurrPubEUR, 0.001), 0.01)) as Round3AmountEUR,
 	 if(ВалютаПредложенияАукциона='EUR', [Сумма 1 раунда_], Round(Floor([Сумма 1 раундаPub]/CurrPubEUR, 0.001), 0.01)) as Round1AmountEUR,
 	 if(ВалютаПредложенияАукциона='EUR', [Сумма 2 раунда_], Round(Floor([Сумма 2 раундаPub]/CurrPubEUR, 0.001), 0.01)) as Round2AmountEUR
Resident Auction;

DROP Fields [Начальная сумма аукциона_], [Приведенная цена_], [Конечная сумма аукциона_], [Сумма 3 раунда_], [Сумма 2 раунда_], [Сумма 1 раунда_], [Начальная сумма аукционаPub], [Приведенная ценаPub], [Конечная сумма аукционаPub], [Сумма 3 раундаPub], [Сумма 2 раундаPub], [Сумма 1 раундаPub];

DROP Fields CurrUSD, CurrEUR, CurrRUB, CurrGBP From Lot, Bid_Tmp, Award, Contract, Auction;
DROP Fields CurrPubUSD, CurrPubEUR, CurrPubRUB, CurrPubGBP From Tender_, Bid_Tmp, Award, Contract, Auction;
DROP Fields CurrPubUSD, CurrPubRUB, CurrPubGBP From Lot;
DROP Table Currency;

//DROP Table Tender_, Lot, Bid_Tmp, Award, Contract;//, Qualification, ComplaintTender, ComplaintAward, Question, TenderItemTmp, Cancellation, Auction, Features, TenderDocuments, AwardDocuments, QualificationDocuments,
//BidDocuments, ContractDocuments, ComplaintTenderDocuments, ComplaintAwardDocuments, CancellationDocuments;
///$tab 5 Для показателей
DIRECTORY [..\04_DataBase\02_QVD_DB\02_Transaction\];

// Определение последнего протокола оценки для каждого предложения
// Для предотвращения потребления большого объема памяти
FOR Each vTenderYear in FieldValueList('TenderYearAward')
	AwardStaus_Tmp:
	LOAD KeyLotBid, 
	     LastValue(СтатусПротоколаОценки) as СтатусПротоколаОценки,
	     LastValue(IsLimitedAward) as IsLimitedAward,
	     LastValue(IDTenderKey) as IDTenderKey,
	     LastValue(IDLotKey) as IDLotKey,
		 LastValue(IDAwardKey) as IDAwardKey,
		 LastValue(ОписаниеПротоколаОценки) as ОписаниеПротоколаОценки,
		 LastValue(ПротоколОценки) as ПротоколОценки
	Resident Award
	Where TenderYearAward = $(vTenderYear)
	Group By KeyLotBid
	Order By ДатаПредложения;
NEXT

DROP Field TenderYearAward;

// Финальный статус протокола оценки в Award

Left Join (Award)
LOAD
	 IDAwardKey,
	 1 as EndAwardStatusFlag
Resident AwardStaus_Tmp;	 


Left Join (Bid_Tmp)
LOAD
	 KeyLotBid,
	 IDAwardKey, 
     СтатусПротоколаОценки,
     ОписаниеПротоколаОценки,
     ПротоколОценки
Resident AwardStaus_Tmp
Where IsLimitedAward <> 1;  

// Определение начальной и конечной дат Аукциона для тендера
Left Join (Tender_)
LOAD
	IDTenderKey,
	Date(Min([Начальная дата аукциона лота]), '$(TimestampFormat)') as [Начальная дата аукциона],
	Date(Max([Конечная дата аукциона лота]), '$(TimestampFormat)') as [Конечная дата аукциона],
	Date(Floor(Max([Конечная дата аукциона лота]))) as [Дата аукциона тендер],
	Count(IDLotKey) as [Кількість лотів]	
Resident Lot
Group By IDTenderKey;	

// Определение кол-ва предложений для каждого лота

Left Join (Lot)
LOAD	
	 IDLotKey,
	 Count(DISTINCT IDBid) as КоличествоПредложенийЛотаTmp
Resident Bid_Tmp
Where СтатусПредложения <> 'invalid'
Group By IDLotKey;	 


// ============== Рассчет кол-ва уникальных цен в аукционе для каждого тендера, 25% квартиля, медианы ==============
Auction_:
LOAD IDTender as IDTenderKey,
	 IDLotKey,
	 IDBidKey,
     [Начальная сумма аукциона], 
     [Сумма 3 раунда], 
     [Сумма 1 раунда], 
     [Сумма 2 раунда]
FROM Auction_????.qvd (qvd)
Where Exists(IDLotKey);

AuctionTmp:
LOAD IDTenderKey,
	 IDLotKey,
	 IDBidKey, 
     SubField(AmountNums, ';') as AuPrice;

LOAD IDTenderKey,
	 IDLotKey,
	 IDBidKey, 
     [Начальная сумма аукциона]&';'&[Сумма 3 раунда]&';'&[Сумма 1 раунда]&';'&[Сумма 2 раунда] as AmountNums
Resident Auction_;

DROP Table Auction_;

AuctionTmp1:
LOAD Count(DISTINCT AuPrice) as DistLotAuPriceTmp, 
	 Fractile(AuPrice, 0.25) as AuPriceFrac,
	 Median(AuPrice) as AuPriceMedian,
	 IDLotKey
Resident AuctionTmp	 
Group By IDLotKey;

Left Join (AuctionTmp)
LOAD
	 IDLotKey,
	 AuPriceFrac
Resident AuctionTmp1;

Left Join (Lot)
LOAD
	 DistLotAuPriceTmp, 
	 AuPriceFrac,
	 AuPriceMedian,
	 IDLotKey
Resident AuctionTmp1;

DROP Table AuctionTmp1;	

// Определение уникальных предложений с суммой меньше 25% квартиля
AuctionTmp2:
LOAD IDLotKey,
	 Count(DISTINCT IDBidKey) as TendererQtyFrac
Resident AuctionTmp
Where AuPrice < AuPriceFrac
Group By IDLotKey;

DROP Table AuctionTmp;

Left Join (Lot)
LOAD
	 TendererQtyFrac,
	 IDLotKey
Resident AuctionTmp2;

DROP Table AuctionTmp2;

// Отметка предложений от одного участника в одном и том же тендере, если одно из предложений выиграшное
Left Join (Bid_Tmp)
LOAD 
	KeyLotBid,
	IDTendererKey,
	1 as AwardedTendererFlag
Resident 	Bid_Tmp
Where СтатусПротоколаОценки='active';

// Приведенное значение предложения
Left Join (Bid_Tmp)
LOAD
	 KeyLotBid,
	 [Конечная сумма аукциона]/[Коэффициент коррекции] as СуммаПриведенногоПредложения_
Resident Auction;	 

Left Join (Bid_Tmp)
LOAD
	 KeyLotBid,
	 Alt(СуммаПриведенногоПредложения_, СуммаПредложения) as СуммаПриведенногоПредложения
Resident Bid_Tmp;

// Определение не выигранных предложений (более высокая цена)
Left Join (Bid_Tmp)
LOAD Distinct
	 IDLotKey,
	 СуммаПриведенногоПредложения as СуммаПриведенногоВыигранногоПредложения
Resident Bid_Tmp
Where СтатусПротоколаОценки='active';

// Определение Bid c вложенными файлами
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
Left Join (Bid_Tmp)
LOAD Distinct
	 IDBidKey,
	 1 as IsBidDocLoad_
Resident BidDocuments
Where NOT [Файл предложения] Like '*.p7s';	

// Определение конфиденциального предложения
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
Left Join (Bid_Tmp)
LOAD Distinct
	 IDBidKey,
	 1 as IsConfidentiality_
Resident BidDocuments
Where confidentiality = 'buyerOnly';

// Определение даты/времени загрузки последнего файла предложения до завершения приема предложений
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
Left Join (Bid_Tmp)
LOAD 
	 IDBidKey,
	 TimeStamp(Max([Дата публ. файла предложения])) as [Дата/час завантаження останнього файла пропозиції до завершення прийому пропозицій]
Resident BidDocuments
Where [Дата публ. файла предложения] < [Конец приема предложений] AND procurementMethod <> 'limited' AND NOT [Файл предложения] Like '*.p7s'
Group By IDBidKey;

// Определение флага загрузки файла предложения после завершения приема предложений
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
Left Join (Bid_Tmp)
LOAD Distinct
	 IDBidKey,
	 1 as BidFileAfterTenderPeriod
Resident BidDocuments
Where [Дата публ. файла предложения] > [Конец приема предложений] AND procurementMethod <> 'limited' AND NOT [Файл предложения] Like '*.p7s';

DROP Table BidDocuments;

Bid:
NoConcatenate
LOAD IDTenderKey,
     ДатаПредложения, 
     KeyLotBid,
     KeyLotBidFlag,
     IDAwardKey,
     IDLotKey,
     IDBid, 
     IDBidKey,
     IDBID,
     ПлощадкаПредложения,
     СтатусПредложения, 
     СуммаПредложения, 
     СуммаПредложения_Валюта,
     BidAmountEUR,
     ВалютаПредложения, 
     НДСПредложения, 
     IDTendererKey,
     BidType,
     СтатусПротоколаОценки,
     if(СтатусПротоколаОценки<>'active' AND СтатусПротоколаОценки<>'pending' AND СтатусПротоколаОценки<>'unsuccessful' AND СтатусПротоколаОценки<>'cancelled', 1) as NotReviewedFlag,
     if(Previous(IDLotKey)=IDLotKey AND Previous(СтатусПротоколаОценки)='active' AND СуммаПриведенногоПредложения>СуммаПриведенногоВыигранногоПредложения AND СтатусПротоколаОценки<>'active' AND СтатусПротоколаОценки<>'unsuccessful' AND СтатусПротоколаОценки<>'cancelled', 1) as LoseHPriceFlag,
     if((СтатусПротоколаОценки<>'active' OR IsNull(СтатусПротоколаОценки) AND AwardedTendererFlag<>1), 0, if(СтатусПротоколаОценки='active', 1)) as BidAwardFlag,
     if(СтатусПредложения='invalid', Null(), Alt(IsBidDocLoad_, 0)) as [Є файли пропозиції], //ТЗ https://docs.google.com/spreadsheets/d/10BNNhBCX5Sxlj63FyzNlrILgS6huqcKC0CVHqQKm7F0/edit#gid=660045764,
     Alt(IsConfidentiality_, 0) as [Є конфіденційні файли у пропозиції],
     [Дата/час завантаження останнього файла пропозиції до завершення прийому пропозицій],
     if(IsNull([Дата/час завантаження останнього файла пропозиції до завершення прийому пропозицій]), 0, 1) as [Файли учасника завантажені до завершення подачі пропозицій],
     Alt(BidFileAfterTenderPeriod, 0) as [Файли учасника були завантажені після завершення подачі пропозицій],
     1 as EndAwardStatusFlag,
     ОписаниеПротоколаОценки,
     ПротоколОценки,
     LotBidType
Resident Bid_Tmp
Order By IDLotKey, СуммаПриведенногоПредложения;

DROP Table Bid_Tmp;


// Определение  тендеров с определенным победителем
Left Join (Tender_)
LOAD Distinct
	 IDTenderKey,
     1 as 	TenderAwardFlagTmp
Resident 	Bid
Where СтатусПротоколаОценки='active';

Left Join (Tender_)
LOAD Distinct
	 IDTenderKey,
     1 as 	TenderAwardFlagLimitedTmp
Resident 	AwardStaus_Tmp
Where СтатусПротоколаОценки='active' AND IsLimitedAward = 1;

// Определение  лотов с определенным победителем
Left Join (Lot)
LOAD Distinct
	 IDLotKey,
     1 as 	LotAwardFlagTmp
Resident 	Bid
Where СтатусПротоколаОценки='active';

Left Join (Lot)
LOAD Distinct
	 IDLotKey,
     if(IsLimitedAward = 1, 1) as 	LotAwardFlagLimitedTmp,
     IDAwardKey
Resident 	AwardStaus_Tmp
Where СтатусПротоколаОценки='active';

DROP Table AwardStaus_Tmp;

//DROP Field IDTenderKey From Bid;

Left Join (Tender_)
LOAD
	 IDTenderKey,
	 LastValue([Дата підписання договору]) as [Дата підписання договору],
	 1 as IsTenderContractFlagTmp
Resident Contract
Where Match(СтатусКонтракта, 'active', 'terminated')
Group By IDTenderKey
Order By [Дата підписання договору];

DROP Field 	 IDTenderKey From Contract;

Left Join (Tender_)
LOAD
	 IDTenderKey,
	 Max(ДатаОпределенияПобедителя) as ДатаОпределенияПобедителя
Resident Award
Where EndAwardStatusFlag=1
Group By IDTenderKey;

// Определение тендеров с загруженными документами
Left Join (Tender_)
LOAD Distinct
	 IDTenderKey,
	 1 as IsTenderDocLoad_
Resident TenderDocuments
Where NOT WildMatch([Файл тендера], '*.yaml', '*.p7s');	

Left Join (Tender_)
LOAD 
	 IDTenderKey,
	 TimeStamp(Min([Дата публ. файла тендера])) as [Дата/час завантаження першого файла ТД],
	 TimeStamp(Max([Дата публ. файла тендера])) as [Дата/час завантаження останнього файла ТД]
Resident TenderDocuments
Where NOT WildMatch([Файл тендера], '*.yaml', '*.p7s')
Group By IDTenderKey; 

// Определение максимального количества изменений фалов ТД
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
TD_:
LOAD
	 IDTenderKey,
	 Count(IDTenderDoc) as TenderDocNo
Resident TenderDocuments
Where NOT WildMatch([Файл тендера], '*.yaml', '*.p7s')
Group By IDTenderKey, IDTenderDoc;	

DROP Table TenderDocuments;

Left Join (Tender_)
LOAD
	 IDTenderKey,
	 Max(TenderDocNo)-1 as [К-сть змін одного файла ТД (максимальна)]
Resident TD_
Group By IDTenderKey;	

DROP Table TD_;

// Временное решение 
// ТЗ https://docs.google.com/document/d/1aPQ5tcq6FilF8HtBS0AVyXv2kDiLnTUHSUBKEHv6w4g
// ТЗ https://docs.google.com/document/d/1k2TyxUs8NvIw7Qp0_yIxwuKUp0-EajDMT8FsvwhD9CY/edit
// Удалить скрипт и файл C:\QlikView\04_DataBase\02_QVD_DB\02_Transaction\DASU.qvd

DASU_BPZ:
LOAD 
	 ДАСУ, 
//     ИдентификаторДАСУ, 
     IDLot as IDLOT, 
     IDTenderOrig
FROM DASU_BPZ.qvd (qvd);

Left Join (DASU_BPZ)
LOAD
	 ID as IDTenderOrig,
	 IDTenderKey
Resident Tender_;	

Left Join (Lot) 
LOAD
	 IDLOT,
	 IDTenderKey,
	 ДАСУ as [Ініціатор моніторингу (до Prozorro)],
	 1 as [_Чи враховані рекомендації ДАСУ (до Prozorro)]
Resident DASU_BPZ;

DROP Table DASU_BPZ;	 
//

Tender:
NoConcatenate
LOAD
	*,
//	if(IsNull([Дата підписання договору]), if(IsNull([Дата квалификации]), [Дата завершения подачи предложений], [Дата квалификации]), Date(Floor([Дата підписання договору]))) as [Дата завершения],
	Date(Alt(Floor(ТерминальнаяДатаТендера), Floor(ДатаОтменыТендер), Floor([Дата підписання договору]), [Дата определения победителя], Floor(ДатаОпределенияПобедителя), [Дата завершения подачи предложений] )) as [Дата завершения],
	Round(Floor(RangeMax(if(IsNull(ДатаОтменыТендер) AND IsNull(ТерминальнаяДатаТендера), if(IsNull([Дата підписання договору]), if(IsNull([Конечная дата определения победителя]), if(IsNull([Начальная дата определения победителя]), [Конец приема предложений], [Начальная дата определения победителя]), [Конечная дата определения победителя]), [Дата підписання договору]), Alt(ДатаОтменыТендер, ТерминальнаяДатаТендера))-if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), [Начало периода уточнений]), 0), 0.001), 0.01) as [Длительность тендера],
	RangeMax(Ceil(if(IsNull(ДатаОтменыТендер) AND IsNull(ТерминальнаяДатаТендера), if(IsNull([Дата підписання договору]), if(IsNull([Конечная дата определения победителя]), if(IsNull([Начальная дата определения победителя]), [Конец приема предложений], [Начальная дата определения победителя]), [Конечная дата определения победителя]), [Дата підписання договору]), Alt(ДатаОтменыТендер, ТерминальнаяДатаТендера))-if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), [Начало периода уточнений])), 0) as [Длительность тендера д.],
	Round(Floor(RangeMax(if(IsNull(ДатаОтменыТендер) AND IsNull(ТерминальнаяДатаТендера), if(IsNull([Дата підписання договору]), if(IsNull([Конечная дата определения победителя]), if(IsNull([Начальная дата определения победителя]), [Конец приема предложений], [Начальная дата определения победителя]), [Конечная дата определения победителя]), [Дата підписання договору]), Alt(ДатаОтменыТендер, ТерминальнаяДатаТендера))-if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), [Начало периода уточнений]), 0), 0.001), 0.01) as [Duration of tender],
	RangeMax(Ceil(if(IsNull(ДатаОтменыТендер) AND IsNull(ТерминальнаяДатаТендера), if(IsNull([Дата підписання договору]), if(IsNull([Конечная дата определения победителя]), if(IsNull([Начальная дата определения победителя]), [Конец приема предложений], [Начальная дата определения победителя]), [Конечная дата определения победителя]), [Дата підписання договору]), Alt(ДатаОтменыТендер, ТерминальнаяДатаТендера))-if(IsNull([Начало периода уточнений]), Date(Date#(Mid(Идентификатор, 4, 10), 'YYYY-MM-DD')), [Начало периода уточнений])), 0) as [Duration of tender d.],
	NetWorkDays(Alt([Начало периода уточнений], Дата), [Конец периода уточнений], $(vHolidays)) as [Период уточнений д.],
	NetWorkDays(Alt([Начало приема предложений], [Дата завершения периода уточнений]), [Конец приема предложений], $(vHolidays)) as [Период приема предложений д.],
	NetWorkDays(Alt([Начало приема предложений], [Дата завершения периода уточнений]), [Конец приема предложений], $(vHolidays)) as [Period of offers reception d.],
	if(NOT (IsNull([Конечная дата аукциона]) OR IsNull([Конечная дата определения победителя])), NetWorkDays([Конечная дата аукциона], [Конечная дата определения победителя], $(vHolidays))) as [Период от аукциона до завершения],
	Date(Floor(ТерминальнаяДатаТендера)) as [Термінальна дата тендера],
	Date(RangeMin(Alt(Floor(ТерминальнаяДатаТендера), Floor(ДатаОтменыТендер), Floor([Дата підписання договору]), Floor(ДатаОпределенияПобедителя), Floor([Конечная дата определения победителя]), Floor([Конечная дата аукциона]), Floor([Конец квалификационного периода]), Floor([Конец приема предложений]), Floor([Конец периода уточнений])), '$(vCurrentDate)')) as КонДата,
	
	if(IsNull([Начальная дата аукциона]), 0, 1) as IsStartAuctionDate, 
	if(IsNull([Конечная дата аукциона]), 0, 1) as IsEndAuctionDate, 
	if((NOT IsNull([Начальная дата аукциона]) AND ДатаИзмененияТендера<[Начальная дата аукциона] AND (СтатусТендера='cancelled' OR СтатусТендера='unsuccessful')), 1, 0) as IsStartAuctionDateCancel, 
	
	if(СтатусТендера='cancelled' OR СтатусТендера='unsuccessful', if(IsNull(ДатаОтменыТендер) AND IsNull(ТерминальнаяДатаТендера), if(IsNull([Конечная дата определения победителя]), Date(Floor([Конец приема предложений])), Date(Floor([Конечная дата определения победителя]))), Alt(Date(Floor(ДатаОтменыТендер)), Date(Floor(ТерминальнаяДатаТендера))) ) ) as [Дата отмены],
	RangeSum(TenderAwardFlagTmp, TenderAwardFlagLimitedTmp) as TenderAwardFlag,
	Alt(IsTenderContractFlagTmp, 0) as IsTenderContractFlag,
	Alt(IsComplaintTender_, 0) as IsComplaintTender,
	
	if(Match(СтатусТендера, 'complete', 'cancelled', 'unsuccessful'), СтатусТендера,
		if(СтатусТендера='active.awarded' AND Now(1)-[Конечная дата определения победителя]>30 AND ComplaintTenderFlag<>1, 'active.awarded30',
			if(СтатусТендера='active.qualification' AND Now(1)-[Конечная дата аукциона]>30 AND ComplaintTenderFlag<>1, 'active.qualification30',
				if(ComplaintTenderFlag=1 AND СтатусТендера<>'cancelled', 'stopped.by.complaint', СтатусТендера)))) as ПодСтатусТендера,
// Для GPA отчета,  сумма порога в SDR	(по курсу НБУ за 2014-2015 год)			
	СуммаТендера/$(vSDRCurr) as SDRValue,
	if(IsNull([Ключ донора]), 0, 1) as IsFunder,
	Alt(IsTenderDocLoad_, 0) as [Є файли ТД],//IsTenderDocLoad,
	if(Floor([Дата/час завантаження першого файла ТД])<>Floor([Дата/час завантаження останнього файла ТД]), 1, 0) as [Файли ТД публікувались в різні дні],
	Num(Num#(Interval([Конец приема предложений]-[Дата/час завантаження останнього файла ТД], 'hh'))) as [Годин на подання пропозицій],
// ТЗ 	https://docs.google.com/spreadsheets/d/1a8jsXpU4Ln6tVXyZ8NBeTej8xjn4_AlhllQBwyKjQNw
	if(procurementMethodType='aboveThresholdUA',
		if([Начальная дата аукциона]-$(#vCurrentDate)>15, 1, // Не застосовується
			if(([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД]<15 OR IsNull([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД])) AND [Начальная дата аукциона]-$(#vCurrentDate)<15, 2, //Опубліковано не вчасно
				if([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД]>15 AND [Начальная дата аукциона]-$(#vCurrentDate)<15, 3 //Опубліковано вчасно
				)
			)
		),
		if(procurementMethodType='aboveThresholdEU',
			if([Начальная дата аукциона]-$(#vCurrentDate)>30, 1,
				if(([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД]<30 OR IsNull([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД])) AND [Начальная дата аукциона]-$(#vCurrentDate)<30, 2,
					if([Начальная дата аукциона]-[Дата/час завантаження першого файла ТД]>30 AND [Начальная дата аукциона]-$(#vCurrentDate)<30, 3
					)
				)
			), 
			1
		)
	) as TDStatusFPubInTime
Resident Tender_;

TDStatusPubInTime:
Left Keep (Tender)
LOAD * Inline [
TDStatusFPubInTime,	Статус вчасної публікації файлів ТД,	Статус своевременной публикации файлов ТД,	Tender Status File Publication in Time
1,					Не застосовується,						Не применяется,								Not Applicable
2,					Опубліковано не вчасно,					Опубликовано не вовремя,					Published not in time
3,					Опубліковано вчасно,					Опубликовано вовремя,						Published in time
];	 

//[Начальная дата аукциона]-[Дата/час завантаження першого файла ТД] AND [Начальная дата аукциона]-$(#vCurrentDate)

DROP Table Tender_;

DROP Fields TenderAwardFlagTmp, TenderAwardFlagLimitedTmp, IsTenderContractFlagTmp, ComplaintTenderFlag;
DROP Fields ДатаОпределенияПобедителя, ТерминальнаяДатаТендера, IsComplaintTender_, [Дата підписання договору], IsTenderDocLoad_ From Tender;

Left Join (Lot)
LOAD
	 IDTenderKey,
	 ДатаОтменыТендер,
	 [Термінальна дата тендера] as [Термінальна дата тендера Лот]
Resident Tender;	

Left Join (Lot)
LOAD
	 IDAwardKey,
	 Floor(ДатаПредложения) as ДатаПротоколЛот
Resident Award; 

Left Join (Lot)
LOAD
	 IDAwardKey,
	 [Дата публікації договору] as ДатаАктивацииКонтрактаЛот
Resident Contract
Where СтатусКонтракта = 'active';

DROP Field IDAwardKey From Lot;

Left Join (Lot)
LOAD
	IDLotKey,
	RangeSum(LotAwardFlagTmp, LotAwardFlagLimitedTmp) as LotAwardFlag,
	Alt(DistLotAuPriceTmp, 0) as DistLotAuPrice, 
	Alt(КоличествоПредложенийЛотаTmp, 0) as КоличествоПредложенийЛота,
//	Alt(HasItem_, 0) as HasItem,
	Date(Floor([Конечная дата аукциона лота])) as [Дата аукциона],
	if(Match(СтатусЛота, 'active', 'complete'), 1, 0) as SuccessLotFlag,
//	if(Match(СтатусТендера, 'unsuccessful', 'cancelled') AND СтатусЛота_='active', Date(Floor(ДатаОтменыТендер)), Date(Floor(ТерминальнаяДатаЛота))) as [Терминальная дата лота]
	if(IsLot=1,
		if(СтатусЛота_='active' AND NOT Match(СтатусТендера, 'unsuccessful', 'cancelled'), Date(Floor(Alt(ТерминальнаяДатаЛота, ДатаТендера))),
			if(СтатусЛота_='active' AND Match(СтатусТендера, 'unsuccessful', 'cancelled'), Date(Floor(ДатаОтменыТендер)),
				if(Match(СтатусЛота_, 'unsuccessful', 'cancelled'), Date(Floor(Alt(ТерминальнаяДатаЛота, ДатаОтменыЛот))),
					if(СтатусЛота_='complete', Date(Floor(Alt(ТерминальнаяДатаЛота, ДатаАктивацииКонтрактаЛот, ДатаПротоколЛот)))
					)
				)
			)
		), 
		if(NOT Match(СтатусТендера, 'unsuccessful', 'cancelled', 'complete'), Date(ДатаТендера), Date([Термінальна дата тендера Лот])
		)
	) as [Термінальна дата лота],
	if(СуммаГарантииПредложенияЛота = 0 OR IsNull(СуммаГарантииПредложенияЛота), 0, 1) as [Вимагається гарантія забезпечення лота],
	Alt([_Чи враховані рекомендації ДАСУ (до Prozorro)], 0) as [Чи враховані рекомендації ДАСУ (до Prozorro)]
Resident Lot;	

DROP Fields DistLotAuPriceTmp, LotAwardFlagTmp, LotAwardFlagLimitedTmp, КоличествоПредложенийЛотаTmp, ТерминальнаяДатаЛота, ДатаОтменыТендер, 
СтатусЛота_, ДатаТендера, ДатаАктивацииКонтрактаЛот, ДатаПротоколЛот, [Термінальна дата тендера Лот], [_Чи враховані рекомендації ДАСУ (до Prozorro)];

// ===================== Рассчсет Экономии =====================
Left Join (Bid)
LOAD
	 IDTenderKey,
	 СтатусТендера
Resident Tender;	 

Left Join (Bid)
LOAD
	 IDLotKey,
	 СтатусЛота,
	 LotAwardFlag
Resident Lot;	


// Предложения рассмотрено
Left Join (Lot)
LOAD
	IDLotKey,
	СуммаПредложения as EndBid1
Resident Bid
Where СтатусПротоколаОценки='active' AND СтатусТендера='active.awarded' AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled';

// Предложения рассмотрено и неопределен победитель
Left Join (Lot)
LOAD	
	 IDLotKey,
	 Min(СуммаПредложения) as EndBid2
Resident Bid
Where LotAwardFlag<>1 AND СтатусТендера='active.awarded' AND СтатусПротоколаОценки <> 'unsuccessful' AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled'
Group By IDLotKey;	 	

// Квалификация и неопределен победитель
Left Join (Lot)
LOAD	
	 IDLotKey,
	 Min(СуммаПредложения) as EndBid3
Resident Bid
Where LotAwardFlag<>1 AND СтатусТендера='active.qualification' AND СтатусПротоколаОценки <> 'unsuccessful' AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled'
Group By IDLotKey;

// Квалификация и определен победитель
Left Join (Lot)
LOAD	
	 IDLotKey,
	 Min(СуммаПредложения) as EndBid4
Resident Bid
Where LotAwardFlag=1 AND СтатусТендера='active.qualification' AND СтатусПротоколаОценки='active' AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled'
Group By IDLotKey;

// Завершенные
Left Join (Lot)
LOAD	
	 IDLotKey,
	 СуммаПредложения as EndBid5
Resident Bid
Where СтатусПротоколаОценки='active' AND СтатусТендера='complete' AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled';

DROP Fields LotAwardFlag, СтатусТендера, СтатусЛота From Bid;
 
Left Join (Lot)
LOAD
	IDLotKey,
	Round(Floor(if(RangeSum(EndBid1, EndBid2, EndBid3, EndBid4, EndBid5)=0, 0, СуммаЛота - RangeSum(EndBid1, EndBid2, EndBid3, EndBid4, EndBid5)), 0.001), 0.01) as ЭкономияЛота,
	Round(Floor(if(RangeSum(EndBid1, EndBid2, EndBid3, EndBid4, EndBid5)=0, 0, (СуммаЛота - RangeSum(EndBid1, EndBid2, EndBid3, EndBid4, EndBid5))/CurrPubEUR ), 0.001), 0.01) as LotSavingsEUR
Resident Lot;

DROP Fields EndBid1, EndBid2, EndBid3, EndBid4, EndBid5;

// Экономия по тендеру
Left Join (Tender)
LOAD
	IDTenderKey,
	Sum(ЭкономияЛота) as Экономия,
	Sum(LotSavingsEUR) as SavingsEUR
Resident Lot
Group By IDTenderKey;	
// ============================

// Средний % экономии по тендеру
TenderEconomyTmp:
LOAD
	IDTenderKey,
	AVG(RangeSum(ЭкономияЛота/СуммаЛота)) as Avg%TenderEconomy
Resident Lot
Where СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled'
Group By IDTenderKey;	

Left Join (Tender)
LOAD
	IDTenderKey,
	if(Avg%TenderEconomy>=$(LimitEconomy), 1, 0) as HTenderEconomyFlag
Resident TenderEconomyTmp;

DROP Table TenderEconomyTmp;	

Left Join (Lot)
LOAD
	IDLotKey,
	if(СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled', if(RangeSum(ЭкономияЛота/СуммаЛота)>=$(LimitEconomy), 1, 0)) as HLotEconomyFlag,
	Round(Floor(RangeSum(ЭкономияЛота/СуммаЛота), 0.001), 0.01)*100 as %экономииЛота
Resident Lot;	

// Срок поставки товара

Left Join (TenderItemTmp)
LOAD
	 IDTenderKey,
	 [Дата завершения]
Resident Tender;	 

TenderItem:
NoConcatenate
LOAD
	 IDItem,
	 IDItem as IDItemKey,
     IDLotKey,
     IDTenderKey,
     КонДатаПоставки, 
     if(IsNull(КонДатаПоставки) OR КонДатаПоставки='', 0, 1) as IsEndDateDeliv,
     НачДатаПоставки, 
     if(NOT IsNull(КонДатаПоставки), NetWorkDays(if(IsNull(НачДатаПоставки), [Дата завершения], НачДатаПоставки), КонДатаПоставки, $(vHolidays))) as [Дней на поставку],
     Товар, 
     Количество, 
     IDClassCPVKey, 
     IDClassCPV,
     IDClassItemDKPPKey,
     ItemUnitCode, 
//     ЕдИзмерения,
	 [Од. виміру], 
     Unit, 
     [Ед. измерения],
     LineNo,
     [Страна поставки],
     [Город поставки],
     [Индекс поставки],
     [Регион поставки],
     [Адрес поставки],
     Широта, 
     Долгота,
     [Індекс дороги], 
     [Назва дороги]
Resident TenderItemTmp;	 

DROP Table TenderItemTmp;

// Определение даты дисквалификации

//Left Join (Bid)
DisqualDate:
LOAD Distinct
	 KeyLotBid,
	 ДатаДисквалификации
Resident Award
Where NOT IsNull(ДатаДисквалификации)
//EndAwardStatusFlag=1
;	

//Дата определения Победителя 
AwardDate:
LOAD Distinct
	 KeyLotBid,
	 ДатаОпределенияПобедителя
	 
//	,if('$(vCurrentDate)'=ДатаОпределенияПобедителя, 1) as _LastWin1
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<7, 7) as _LastWin7
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<30, 30) as _LastWin30
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<60, 60) as _LastWin60
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<90, 90) as _LastWin90
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<180, 180) as _LastWin180
    ,if('$(vCurrentDate)'-ДатаОпределенияПобедителя<365, 365) as _LastWin365
    
Resident Award
Where NOT IsNull(ДатаОпределенияПобедителя) AND EndAwardStatusFlag=1;

// Расчет количества дисквалификаций для каждого лота
Left Join (Lot)
LOAD  
	 IDLotKey,
	 Count(IDAwardKey) as LotDisqualQty
Resident Award
Where СтатусПротоколаОценки = 'unsuccessful'
Group By IDLotKey
;	 

// Определение максимальной даты файла оценки
Left Join (Award)
LOAD
	 IDAwardKey,
	 Date(Floor(Max([Дата изм. файла оценки]))) as [Дата зміни останнього файла оцінки],
	 Date(Floor(Max([Дата публ. файла оценки]))) as [Дата публікації останнього файла оцінки]
Resident AwardDocuments
Group By IDAwardKey;

DROP Table AwardDocuments;	 

// ================= Определение участников-конкурентов ====================
Concatenate (Bid)
LOAD KeyLotBid, 
	 IDLotKey,
	 IDTenderKey,
     ДатаПредложения, 
     ДатаЗакрытия, 
     ОписаниеПротоколаОценки,
     IDAward, 
     IDAwardKey,
     СтатусПротоколаОценки,
     IDTendererKey,
     if(IsLimitedAward=1, 2, 0) as BidType,
     ПротоколОценки,
     СуммаПредложения,
     СуммаПредложения_Валюта,
     BidAmountEUR,
	 ВалютаПредложения, 
	 НДСПредложения,
     [Начальная дата обжалования],
     [Конечная дата обжалования],
     EndAwardStatusFlag,
	 2 as KeyLotBidFlag,
//   if(IsLimitedAward=1, ДатаДисквалификации, if(EndAwardStatusFlag=1, ДатаДисквалификации)) as ДатаДисквалификации,
//   if(IsLimitedAward=1, ДатаДисквалификации) as ДатаДисквалификации,
	 if(СтатусПротоколаОценки<>'active' AND СтатусПротоколаОценки<>'pending' AND СтатусПротоколаОценки<>'unsuccessful' AND СтатусПротоколаОценки<>'cancelled', 1) as NotReviewedFlag,
	 ПодтверждениеСоответствия,
	 [Дата зміни останнього файла оцінки],
	 [Дата публікації останнього файла оцінки]
//   if(EndAwardStatusFlag=1 AND СтатусПротоколаОценки<>'active' AND СтатусПротоколаОценки<>'unsuccessful' AND СтатусПротоколаОценки<>'cancelled', 1) as NotReviewedFlag 
Resident Award;

DROP Table  Award; 

// ===================== Статусы ценовых предложений ===========================

// Выигравшие
LotBidStatus:
LOAD
	 KeyLotBid,
	 'Won' as LotBidStatus,
	 'Выигравшие' as [Статус ценовых предложений],
	 'Що виграли' as [Статус цінових пропозицій]
Resident Bid
Where Match(BidType, 0, 2) AND EndAwardStatusFlag=1 AND СтатусПротоколаОценки='active';	 

// Не выиграли (выше цена)
Concatenate(LotBidStatus)
LOAD
	 KeyLotBid,
	 'Not won (higher price)' as LotBidStatus,
	 'Не выиграли (выше цена)' as [Статус ценовых предложений],
	 'Не виграли (вища ціна)' as [Статус цінових пропозицій]
Resident Bid
Where BidType=1 AND LoseHPriceFlag=1;	 

// Дисквалифицированы
Concatenate(LotBidStatus)
LOAD
	 KeyLotBid,
	 'Disqualifficated' as LotBidStatus,
	 'Дисквалифицированы' as [Статус ценовых предложений],
	 'Дискваліфіковані' as [Статус цінових пропозицій]
Resident Bid
Where Match(BidType, 0, 2) AND EndAwardStatusFlag=1 AND СтатусПротоколаОценки='unsuccessful';

// Не рассмотренные
Concatenate(LotBidStatus)
LOAD
	 KeyLotBid,
	 'Not reviewed' as LotBidStatus,
	 'Не рассмотренные' as [Статус ценовых предложений],
	 'Не розглянуті' as [Статус цінових пропозицій]
Resident Bid
Where Match(BidType, 1, 2) AND NotReviewedFlag=1 AND LoseHPriceFlag<>1;

// Отмененные
Concatenate(LotBidStatus)
LOAD
	 KeyLotBid,
	 'Cancelled' as LotBidStatus,
	 'Отмененные' as [Статус ценовых предложений],
	 'Відмінені' as [Статус цінових пропозицій]
Resident Bid
//Where BidType=1 AND СтатусПротоколаОценки='cancelled';
Where Match(BidType, 1, 2) /*AND EndAwardStatusFlag=1*/ AND СтатусПротоколаОценки='cancelled';

// Ожидают рассмотрения
Concatenate(LotBidStatus)
LOAD
	 KeyLotBid,
	 'Pending' as LotBidStatus,
	 'Ожидают рассмотрения' as [Статус ценовых предложений],
	 'Очікують розгляду' as [Статус цінових пропозицій]
Resident Bid
Where Match(BidType, 1, 2) AND СтатусПротоколаОценки='pending';
//Where BidType=1 AND СтатусПротоколаОценки='pending';

//
AddTenderer:
NoConcatenate
LOAD Distinct
	 IDLotKey,
	 IDTendererKey,
	 СтатусПротоколаОценки as СтатусПротоколуОцінкиКонкурента
Resident Bid
Where Match(BidType, 1, 2) AND NOT IsNull(IDTendererKey);	 

Left Join (AddTenderer)
LOAD 
	IDTendererKey,
	Участник as УчастникКонкурент,
	TendererEN as TendererENCompetitor,
	IDTenderer as [Код Конкурента],
	[Назва Учасника | Код Учасника] as [Конкурент | Код Конкурента],
	[Tenderer | Tenderer code] as [Competitor | Competitor code],
	[Посилання на профіль в YouControl]  as [Посилання на профіль в YouControl Конкурент] 
Resident Tenderer;	

DROP Field IDTendererKey From AddTenderer;

// Определение даты первого предложения участника

MinDateBid:
NoConcatenate
LOAD
	 Date(Floor(FirstValue(ДатаПредложения))) as [Дата 1 предложения],
	 IDTendererKey,
	 FirstValue(KeyLotBid) as KeyLotBid
Resident Bid
Where Match(BidType, 1, 2) AND NOT IsNull(ДатаПредложения)
Group By IDTendererKey
Order By ДатаПредложения;

Left Join (Tenderer)
LOAD
	 [Дата 1 предложения],
	 IDTendererKey
Resident MinDateBid;

Left Join (Bid)
LOAD
	 KeyLotBid,
	 1 as МіткаПершоїПропозиції
Resident MinDateBid;

DROP Table MinDateBid;	 

// Минимальная дата победного предложения
Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 Date(Floor(Min(ДатаПредложения))) as [Дата 1 переможної пропозиції]
Resident Bid
Where Match(BidType, 1, 2) AND (NOT IsNull(ДатаПредложения)) AND EndAwardStatusFlag = 1 AND СтатусПротоколаОценки = 'active'
Group By IDTendererKey;

//Кол-во участников
TenderTmp:
LOAD Distinct
	 IDTenderKey,
	 IDTendererKey,
	 IDLotKey,
	 МіткаПершоїПропозиції
Resident Bid
Where Match(BidType, 1, 2);

//DROP Field IDTenderKey From Bid;

Left Join (Tender)
LOAD
	IDTenderKey as IDTender,
	Count(DISTINCT IDTendererKey) as КоличествоУчастниковTmp,
	Sum(МіткаПершоїПропозиції) as КоличествоНовыхУчастниковTmp
Resident TenderTmp
Group By IDTenderKey;

Left Join (Lot)
LOAD
	IDLotKey as IDLot,
	Count(DISTINCT IDTendererKey) as КоличествоУчастниковЛотаTmp,
	Sum(МіткаПершоїПропозиції) as КоличествоНовыхУчастниковЛотаTmp
Resident TenderTmp
Group By IDLotKey;

DROP Table TenderTmp;

Left Join (Lot)
LOAD
	IDLotKey,
	Alt(КоличествоУчастниковЛотаTmp, 0) as КоличествоУчастниковЛота,
	if(КоличествоУчастниковЛотаTmp=1, '=1', if(КоличествоУчастниковЛотаTmp>1, '>1')) as Количество1Участников,
	Alt(КоличествоНовыхУчастниковЛотаTmp, 0) as КоличествоНовыхУчастниковЛота,
	Alt(LotDisqualQty, 0) as [Количество дисквалификаций лота]
Resident Lot;	

DROP Fields КоличествоУчастниковЛотаTmp, КоличествоНовыхУчастниковЛотаTmp, LotDisqualQty;



Left Join (Tender)
LOAD 
	IDTender,
	Round(Floor(RangeSum(Экономия/СуммаТендера), 0.001), 0.01)*100 as [% економії], 
	Alt(КоличествоУчастниковTmp, 0) as КоличествоУчастников,
	Alt(КоличествоУчастниковTmp, 0) as TenderersQty,
	Alt(КоличествоНовыхУчастниковTmp, 0) as КоличествоНовыхУчастников,
	
//	if(КоличествоУчастниковTmp=1, 1, if(КоличествоУчастниковTmp>1, 2)) as IDTendererQty,
	if(Match(СтатусТендера, 'unsuccessful', 'cancelled'), 1,
		if(СтатусТендера='complete' AND КоличествоУчастниковTmp=1, 2,
			if(СтатусТендера='complete' AND КоличествоУчастниковTmp>1, 3,
				if(Match(СтатусТендера, 'active.qualification', 'active.awarded', 'active') AND КоличествоУчастниковTmp=1, 4,
					if(Match(СтатусТендера, 'active.qualification', 'active.awarded', 'active') AND КоличествоУчастниковTmp>1, 5,
						if(Match(СтатусТендера, 'active.enquiries', 'active.tendering', 'active.auction', 'active', 'active.pre-qualification', 'active.pre-qualification.stand-still') /*AND IsNull(КоличествоУчастниковTmp)*/, 6)
					)
				)
			)
		)
	) as IDStatusGrTender
Resident 	Tender;

DROP Fields КоличествоУчастниковTmp, КоличествоНовыхУчастниковTmp;

// Определение максимальной даты файла публикации договора
Left Join (Contract)
LOAD
	 IDContractKey,
	 Date(Floor(Max([Дата публ. файла контракта]))) as [Дата публікації останнього файла договору]
Resident ContractDocuments
Where NOT [Файл контракта] Like '*.p7s'
Group By IDContractKey;

DROP Table ContractDocuments;

// Определение даты последнего файла квалификации
// ТЗ https://docs.google.com/spreadsheets/d/1QG-xKUrbmh8ilz8W78G5A5_MHoaga7PIg0mHSpbsP7M
Left Join (Qualification)
LOAD 
	 IDQualificationKey,
	 Date(Floor(Max([Дата публ. файла квалификации]))) as [Дата публікації останнього файла кваліфікації]
Resident QualificationDocuments
Where NOT WildMatch([Файл квалификации], '*.yaml', '*.p7s')
Group By IDQualificationKey;

DROP Table QualificationDocuments;

// Определение тендеров с публикацией документов в день окончания приема предложений

//Left Join (TenderDocuments)
//LOAD 
//	 IDTenderKey,
//	 [Дата завершения подачи предложений]
//Resident 	Tender; 
//
//Left Join (Tender)
//LOAD Distinct
//	 IDTenderKey,
//	 1 as IsTenderDocRel
//Resident 	TenderDocuments
//Where [Дата завершения подачи предложений]=Floor([Дата публ. файла тендера]) AND NOT [Файл тендера]  Like '*.yaml';
//
//DROP Field [Дата завершения подачи предложений] From TenderDocuments;

// Количество файлов с одинаковыми именами в одном тендере

//CountContractDoc:
//LOAD
//	 IDTenderKey,
//	 COUNT([Файл контракта]) as SameContractDocQty
//Resident ContractDocuments
//Group By IDTenderKey, [Файл контракта];
//	 
//DROP Field IDTenderKey From ContractDocuments;
//
//Left Join (Tender)
//LOAD
//	 IDTenderKey,
//	 Max(SameContractDocQty) as SameContractDocQty
//Resident CountContractDoc
//Where SameContractDocQty>1
//Group By IDTenderKey;
//
//DROP Table CountContractDoc; 

// Определение CPV группы с 2 знаками для каждого лота
CPVLotTmp:
LOAD Distinct
	 IDLotKey,
	 Left(IDLotKey, 4) as TenderYear,
	 IDClassCPV 
Resident TenderItem
Where NOT IsNull(IDLotKey);

CPVLot_Tmp:
NoConcatenate
LOAD
	 IDLotKey,
	 MinString(IDClassCPV) as IDClassCPV
Resident CPVLotTmp
Group By IDLotKey;

Left Join (CPVLot_Tmp)
LOAD Distinct
	IDLotKey,
	TenderYear as TenderYear_
Resident CPVLotTmp;	

Left Join (CPVLot_Tmp)
LOAD Distinct
	 IDClassCPV,
	 Подразделения,
	 Divisions
Resident ItemCPV
Where NOT IsNull(Подразделения);

FOR Each vTenderYear in FieldValueList('TenderYear_')
	CPVLotDiv:
	LOAD
		 IDLotKey,
		 MinString(Подразделения) as [Підрозділ CPV лота (агреговано)],
		 MinString(Divisions) as [CPV division of lot (aggregated)]
	Resident CPVLot_Tmp
	Where TenderYear_ = $(vTenderYear)
	Group By IDLotKey;
NEXT

DROP Table CPVLot_Tmp;

Left Join (Lot)
LOAD
	 IDLotKey,
	 [Підрозділ CPV лота (агреговано)],
	 [CPV division of lot (aggregated)]
Resident CPVLotDiv;

DROP Table CPVLotDiv;

// Определение Мин глубины 2017 (4 знака + 336)

CPVTenderTmp:
LOAD Distinct
	 IDTenderKey,
	 IDClassCPV 
Resident TenderItem;

DROP Fields IDTenderKey, IDClassCPV From TenderItem;

CPVTenderMask:
NoConcatenate
LOAD Distinct
	IDTenderKey,
	if(IDClassCPV Like '336*', Left(IDClassCPV, 3), Left(IDClassCPV, 4)) as IDClassCPV
Resident CPVTenderTmp
Where Mid(IDClassCPV, 4, 1)<>0 OR IDClassCPV Like '336*';	

Left Join (CPVTenderMask)
LOAD
	 IDTenderKey,
	 Count(IDClassCPV) as CPVQty
Resident CPVTenderMask	 
Group By IDTenderKey;	

Left Join (CPVTenderTmp)
LOAD Distinct	
	 IDTenderKey,
	 1 as ExclTenderFlag
Resident CPVTenderMask
Where CPVQty > 1;	 

DROP Table 	CPVTenderMask;

CPVTender4_Tmp:
NoConcatenate
LOAD 
	 IDTenderKey,
	 IDClassCPV as IDClassCPV1,
	 if(ExclTenderFlag <> 1 AND (IDClassCPV Like '336*' OR  Mid(IDClassCPV, 4, 1)<>0), IDClassCPV) as IDClassCPV;
	 
LOAD
	 IDTenderKey,
	 MinString(IDClassCPV) as IDClassCPV,
	 Only(ExclTenderFlag) as ExclTenderFlag
Resident CPVTenderTmp
Group By IDTenderKey;

DROP Table CPVTenderTmp;

Left Join (CPVTender4_Tmp)
LOAD 
	 IDClassCPV,
	 Группы,
	 Groups 
Resident 	ItemCPV
Where NOT IsNull(Группы) AND IDClassCPV Like '336*';

Left Join (CPVTender4_Tmp)
LOAD Distinct
	 Left(Классы, 10) as IDClassCPV,
	 Классы,
	 Classes 
Resident 	ItemCPV
Where NOT IsNull(Классы) AND NOT IDClassCPV Like '336*';

Left Join (CPVTender4_Tmp)
LOAD Distinct
	 Left(Категории, 10) as IDClassCPV,
	 Классы as Классы1,
	 Classes as Classes1
Resident 	ItemCPV
Where NOT IsNull(Категории) AND NOT IDClassCPV Like '336*';

Left Join (CPVTender4_Tmp)
LOAD Distinct
	 Left(Подкатегории, 10) as IDClassCPV,
	 Классы as Классы2,
	 Classes as Classes2
Resident 	ItemCPV
Where NOT IsNull(Подкатегории) AND NOT IDClassCPV Like '336*';

Left Join (CPVTender4_Tmp)
LOAD Distinct
	 IDClassCPV,
	 Подразделения,
	 Divisions
Resident ItemCPV
Where IDClassCPV like '99999999*';

Left Join (Tender)
LOAD
	 IDTenderKey,
	 if(Len(Группы&Классы&Классы1&Классы2&Подразделения)>1, Группы&Классы&Классы1&Классы2&Подразделения, '-') as [Минимальная глубина CPV (2017 год)],
	 if(Len(Groups&Classes&Classes1&Classes2&Divisions)>1, Groups&Classes&Classes1&Classes2&Divisions, '-') as [CPV minimum deep (2017 Year)]
Resident CPVTender4_Tmp;

DROP Table CPVTender4_Tmp;

// Определение CPV группы с 2 знаками для каждого тендера
Left Join (Tender)
LOAD
	 IDTenderKey,
	 MinString([Підрозділ CPV лота (агреговано)]) as [Классификация тендера CPV2]
Resident Lot
Group By IDTenderKey;

// Определение типа CPV тендера
Left Join (Tender)
LOAD Distinct
	 Подразделения as [Классификация тендера CPV2],
	 CPVType
Resident ItemCPV;

Left Join (Tender)
LOAD 
	 CPVType,
	 [CPV type] as [CPV tender type]
Resident CPVType;

DROP Field CPVType From Tender;

// ТЗ https://docs.google.com/document/d/13W5yvmZG-_7CPGhj4SZjSgLCV3ZLsvTcmL1eKN8-qu0

Left Join (CPVLotTmp) 	
LOAD Distinct
	 IDLotKey,
	 1 as Flag9
Resident CPVLotTmp
Where IDClassCPV = '99999999-9';	

// Для предотвращения потребления большого объема памяти
FOR Each vTenderYear in FieldValueList('TenderYear')
	CPVLotQty:
	LOAD
		 IDLotKey,
		 Count(DISTINCT Text(Left(IDClassCPV, 2))) as Qty2,
		 Count(DISTINCT Text(Left(IDClassCPV, 3))) as Qty3,
		 Count(DISTINCT Text(Left(IDClassCPV, 4))) as Qty4,
		 Count(DISTINCT Text(Left(IDClassCPV, 5))) as Qty5,
		 Count(DISTINCT Text(Left(IDClassCPV, 6))) as Qty6,
		 Count(DISTINCT Text(Left(IDClassCPV, 7))) as Qty7,
		 Count(DISTINCT Text(Left(IDClassCPV, 8))) as Qty8
	Resident CPVLotTmp
	Where TenderYear = $(vTenderYear)
	Group By IDLotKey;
NEXT


Left Join (CPVLotTmp) 
LOAD
	 IDLotKey,
	 Qty2,
	 Qty3,
	 Qty4,
	 Qty5,
	 Qty6,
	 Qty7,
	 Qty8
Resident CPVLotQty;

DROP Table CPVLotQty;

CPVLot_Tmp:
NoConcatenate
LOAD Distinct
	 IDLotKey,
	 Text(
	 	if(Flag9=1, '99999999-9',
	 		if(Qty2=1 AND Qty3=1 AND Qty4=1 AND Qty5=1 AND Qty6=1 AND Qty7=1 AND Qty8=1, IDClassCPV,
	 			if(Qty6=1, Left(IDClassCPV, 6),
	 				if(Qty5=1, Left(IDClassCPV, 5),
	 					if(Qty4=1, Left(IDClassCPV, 4),
	 						if(Qty3=1, Left(IDClassCPV, 3),
	 							if(Qty2=1, Left(IDClassCPV, 2)
	 							)
	 						)
	 					)
	 				)
	 			)	
	 		)
	 	)
	 ) as IDClassCPV,
	 Text(
	 	if(Flag9=1, '99999999-9',
	 		if(Qty3=1 OR Qty4=1 OR Qty5=1 OR Qty6=1 OR Qty7=1 OR Qty8=1, Left(IDClassCPV, 3),
	 		)
	 	)
	 ) as IDClassCPVGroup,
	 Text(
	 	if(Flag9=1, '99999999-9',
	 		if(Qty4=1 OR Qty5=1 OR Qty6=1 OR Qty7=1 OR Qty8=1, Left(IDClassCPV, 4),
	 		)
	 	)
	 ) as IDClassCPVClass
Resident CPVLotTmp;

DROP Table CPVLotTmp;	

Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Подразделения, 2)) as IDClassCPV,
	 Подразделения,
	 Divisions
Resident ItemCPV;

Left Join (CPVLot_Tmp)
LOAD Distinct
	 IDClassCPV,
	 Подразделения as Подразделения9,
	 Divisions as Divisions9
Resident ItemCPV
Where IDClassCPV like '99999999*';

Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Группы, 3)) as IDClassCPV,
	 Группы,
	 Groups 
Resident 	ItemCPV
Where NOT IsNull(Группы);

Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Классы, 4)) as IDClassCPV,
	 Классы,
	 Classes
Resident 	ItemCPV
Where NOT IsNull(Классы);

Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Категории, 5)) as IDClassCPV,
	 Категории,
	 Categories
Resident 	ItemCPV
Where NOT IsNull(Категории);

Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Подкатегории, 6)) as IDClassCPV,
	 Подкатегории,
	 Subcategories
Resident 	ItemCPV
Where NOT IsNull(Подкатегории) AND Подкатегории like '??????00*';

Left Join (CPVLot_Tmp)
LOAD Distinct
	 IDClassCPV,
	 [Классификация CPV], 
     [CPV Classification]
Resident 	ItemCPV
Where NOT IDClassCPV like '99999999*';

/////////////CPV Lot Group//////////////////
Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Группы, 3)) as IDClassCPVGroup,
	 Группы as ГруппыGroup,
	 Groups as GroupsGroup
Resident 	ItemCPV
Where NOT IsNull(Группы);

/////////////CPV Lot Class//////////////////
Left Join (CPVLot_Tmp)
LOAD Distinct
	 Text(Left(Классы, 4)) as IDClassCPVClass,
	 Классы as КлассыClass,
	 Classes as ClassesClass
Resident 	ItemCPV
Where NOT IsNull(Классы);

Left Join (Lot)
LOAD
	 IDLotKey,
	 if(Len(Подразделения&Подразделения9&Группы&Классы&Категории&Подкатегории&[Классификация CPV])>1, Подразделения&Подразделения9&Группы&Классы&Категории&Подкатегории&[Классификация CPV], '-') as [Класифікація CPV лота],
	 if(Len(Divisions&Divisions9&Groups&Classes&Categories&Subcategories&[CPV Classification])>1, Divisions&Divisions9&Groups&Classes&Categories&Subcategories&[CPV Classification], '-') as [Lot Classification CPV],
	 
	 if(Len(Подразделения9&ГруппыGroup)>1, Подразделения9&ГруппыGroup, '-') as [Група CPV лота (агреговано)],
	 if(Len(Divisions9&GroupsGroup)>1, Divisions9&GroupsGroup, '-') as [CPV Group of lot (aggregated)],
	 
	 if(Len(Подразделения9&КлассыClass)>1, Подразделения9&КлассыClass, '-') as [Клас CPV лота (агреговано)],
	 if(Len(Divisions9&ClassesClass)>1, Divisions9&ClassesClass, '-') as [CPV Class of lot (aggregated)]
Resident CPVLot_Tmp;

DROP Table CPVLot_Tmp;

// Расчет % экономии для Підрозділ CPV лота (агреговано) (для Index)
Left Join (Lot)
LOAD
	[Підрозділ CPV лота (агреговано)],
	Count(DISTINCT IDLotKey) as CPVLotCount
Resident Lot
Where СтатусТендера = 'complete' AND IsLimitedLot <> 1 AND HLotEconomyFlag = 0 AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled'
Group By [Підрозділ CPV лота (агреговано)];	

FracCPVLotEco:
LOAD
	[Підрозділ CPV лота (агреговано)],
	Fractile(RangeSum(ЭкономияЛота/СуммаЛота), 0.25) as FracCPVLotEco
Resident Lot
Where СтатусТендера = 'complete' AND IsLimitedLot <> 1 AND HLotEconomyFlag = 0 AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled' AND CPVLotCount >= 20
Group By [Підрозділ CPV лота (агреговано)];	

FracCPVLotEco_Tmp:
LOAD
	Fractile(RangeSum(ЭкономияЛота/СуммаЛота), 0.25) as FracCPVLotEco
Resident Lot
Where СтатусТендера = 'complete' AND IsLimitedLot <> 1 AND HLotEconomyFlag = 0 AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled';

Left Join (FracCPVLotEco_Tmp)
LOAD
	[Підрозділ CPV лота (агреговано)]
Resident Lot
Where СтатусТендера = 'complete' AND IsLimitedLot <> 1 AND HLotEconomyFlag = 0 AND СтатусЛота <> 'unsuccessful' AND СтатусЛота <> 'cancelled' AND CPVLotCount < 20;

Concatenate (FracCPVLotEco)
LOAD	
	 [Підрозділ CPV лота (агреговано)],
	 FracCPVLotEco
Resident FracCPVLotEco_Tmp;

DROP Table FracCPVLotEco_Tmp;	

DROP Field СтатусТендера From Lot; 

Left Join (Lot)
LOAD
	[Підрозділ CPV лота (агреговано)],
	FracCPVLotEco
Resident FracCPVLotEco;

DROP Table FracCPVLotEco;	

// Статусы и обобщенные статусы Жалоб
ComplaintTender:
Right Keep (GenComplaintStatus)
LOAD
	 ComplaintTenderStatus, 
     ОписаниеЖалобыТендера, 
     ЖалобаТендера, 
     ДатаЖалобыТендера, 
     ДатаПодачиТребованияЖалобыТендера, 
     ДатаПодачиТребования,
     ДатаОтветаЗаказчикаНаТребованиеЖалобыТендера, 
     ДатаЭскалацииТребованияЖалобыТендера, 
     ДатаПринятияРешенияПоТребованиюЖалобыТендера, 
     ДатаОтклоненияЖалобыТендера, 
     IDComplaintTenderKey, 
     IDComplaintTender, 
     ИдентификаторЖалобыТендера, 
     РешениеЗаказчикаЖалобыТендера, 
     resolutionTypeTender, 
     [Complaint tender type], 
     УдовлетвореноЖалобыТендера, 
     РешениеОрганаОбжалованияЖалобыТендера, 
     ПричиныОтклоненияЖалобыТендера, 
     ДействиеУчастникаЖалобыТендера, 
     ДатаДействияУчастникаЖалобыТендера, 
     ДатаАкцептаЖалобыТендера,
     ОрганизацияЖалобыТендера, 
     ИндексЖалобыТендера, 
     СтранаЖалобыТендера, 
     АдресЖалобыТендера, 
     РегионЖалобыТендера, 
     ГородЖалобыТендера, 
     СхемаЖалобыТендера, 
     КодОргЖалобыТендера, 
     ТелефонЖалобыТендера, 
     ИмяЖалобыТендера, 
     ЭлАдресЖалобыТендера, 
     ПретензияУдовлетворенаЖалобыТендера, 
     rejectReasonTender, 
     ОписаниеПричиныОтклоненияЖалобыТендера, 
     ДатаРассмотренияЖалобыТендера, 
     МестоРассмотренияЖалобыТендера, 
     IDTenderKey, 
     IDComplaintAwardKey,
     KeyLotBid,
	 IDLotKey,
     ComplaintLevel,
     ДатаЖалобы,
     ComplaintType,
	 if(NOT IsNull(ПодавшийЖалобу), ПодавшийЖалобу, if(IsNull(ПодавшийЖалобу_), 'Анонімно', ПодавшийЖалобу_)) as ПодавшийЖалобу, 
	 if(NOT IsNull(Complainant), Complainant, if(IsNull(Complainant_), 'Anonymous', Complainant_)) as Complainant,
//	 Задоволено	 1
	 if( ( (procurementMethodType='belowThreshold' AND [Complaint tender type]='claim') AND ((resolutionTypeTender='resolved' AND ComplaintTenderStatus='answered' /*AND УдовлетвореноЖалобыТендера=1*/) OR (ComplaintTenderStatus='resolved')) )
	 	OR ( procurementMethodType='belowThreshold' AND [Complaint tender type]='complaint' AND Match(ComplaintTenderStatus, 'satisfied', 'resolved') )
	 	OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND Match(ComplaintTenderStatus, 'satisfied', 'resolved') )
	 	OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND resolutionTypeTender='resolved' AND Match(ComplaintTenderStatus, 'answered', 'resolved') ), 1,
//	 		Відхилено	2
	 		if( ( procurementMethodType='belowThreshold' AND [Complaint tender type]='claim' AND ((ComplaintTenderStatus='answered' AND resolutionTypeTender='invalid') OR ComplaintTenderStatus='invalid') )
	 			OR ( procurementMethodType='belowThreshold' AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='invalid' )
	 			OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ПретензияУдовлетворенаЖалобыТендера=0 AND (ComplaintTenderStatus='invalid' OR (ComplaintTenderStatus='mistaken' AND resolutionTypeTender='invalid')) )
	 			OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND Match(ComplaintTenderStatus, 'answered', 'invalid') AND resolutionTypeTender='invalid' ), 2,
//					Не задоволено	3 			
	 				if( ( procurementMethodType='belowThreshold' AND [Complaint tender type]='claim' AND Match(ComplaintTenderStatus, 'answered', 'declined') AND resolutionTypeTender='declined' )
	 					OR ( procurementMethodType='belowThreshold' AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='declined' )
	 					OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='declined' )
	 					OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND Match(ComplaintTenderStatus, 'answered', 'declined', 'resolved') AND resolutionTypeTender='declined' ), 3,
//							Відкликано	4	 						
	 						if( ( procurementMethodType='belowThreshold' AND ComplaintTenderStatus='cancelled' )
	 							OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND Match(ComplaintTenderStatus, 'stopped', 'cancelled') )
	 							OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND ComplaintTenderStatus='cancelled' ), 4,
//									В процесі	5-вимога.в процесі, 6-скарга.в процесі (7-скарга.в розгляді, 8-скарга.в процесі відкликання, 9-скарга.не розглянуто, 10-скарга.в процесі задоволення)
	 								if( ( procurementMethodType='belowThreshold' AND [Complaint tender type]='claim' AND ComplaintLevel='condition' AND (((Now(1)-ДатаПодачиТребованияЖалобыТендера<3) AND IsNull(РешениеЗаказчикаЖалобыТендера) AND IsNull(resolutionTypeTender)) OR ComplaintTenderStatus='claim') )
	 									OR ( procurementMethodType='belowThreshold' AND [Complaint tender type]='claim' AND ComplaintLevel='decision' AND ((NOT IsNull(ДатаЭскалацииТребованияЖалобыТендера) AND IsNull(resolutionTypeTender)) OR ComplaintTenderStatus='claim') )
	 									OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND Match(ComplaintTenderStatus, 'pending', 'claim') ), 5,
	 										if( ( procurementMethodType='belowThreshold' AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='pending' AND (Now(1)-ДатаПодачиТребованияЖалобыТендера<14) ), 6,
	 											if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='accepted', 7,
	 												if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='stopping', 8,
	 													if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='pending' AND (Now(1)-ДатаПодачиТребованияЖалобыТендера<3), 9,
	 														if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintLevel='condition' AND ComplaintTenderStatus='satisfied', 10,
//																вимога.Прострочено	11 (12-скарга.прострочено задоволення, 13-скарга.прострочено розгляд, 14-скарга.прострочено рішення про прийняття до розгляду, 15-скарга.прострочено припинення розгляду до прийняття до розгляду, 16-скарга.прострочення припинення розгляду після прийняття до розгляду)	 													
	 																if( ( procurementMethodType='belowThreshold' AND [Complaint tender type]='claim' AND  NOT IsNull(ДатаЭскалацииТребованияЖалобыТендера) AND IsNull(resolutionTypeTender) )
	 																OR ( procurementMethodType='belowThreshold' AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='pending' AND (Now(1)-ДатаПодачиТребованияЖалобыТендера>14) )
	 																OR ( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='claim' AND ComplaintTenderStatus='pending' AND (Now(1)-ДатаПодачиТребованияЖалобыТендера>3) ), 11,
	 																	if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='satisfied' AND (Now(1)-ДатаПринятияРешенияПоТребованиюЖалобыТендера>1), 12,
	 																		if(  Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='accepted' AND (Now(1)-ДатаАкцептаЖалобыТендера>15), 13,
	 																			if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='pending' AND (Now(1)-ДатаПодачиТребованияЖалобыТендера>3), 14,
	 																				if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='stopping' AND IsNull(ПретензияУдовлетворенаЖалобыТендера) AND (Now(1)-ДатаОтклоненияЖалобыТендера>3), 15,
	 																					if( Match(procurementMethodType, 'aboveThresholdUA', 'aboveThresholdEU', 'aboveThresholdUA.defense', 'negotiation', 'negotiation.quick') AND [Complaint tender type]='complaint' AND ComplaintTenderStatus='stopping' AND ПретензияУдовлетворенаЖалобыТендера=1 AND (Now(1)-ДатаОтклоненияЖалобыТендера>15), 16
	 																					)
	 																				)
	 																			)
	 																		)
	 																	)
	 															)
	 														)
	 													)
	 												)
	 											)
	 										)	
	 								)
	 						)
	 				)
	 		)
	 ) as ComplaintStatusCode
Resident ComplaintTender_;

DROP Table ComplaintTender_;

// Определение максимальной даты публикации файла жалобы
Left Join (ComplaintTender)
LOAD
	IDComplaintTenderKey,
	Date(Floor(Max([Дата публ. файла жалобы тендера]))) as [Дата публікації останнього файла скарги]
Resident ComplaintTenderDocuments
Group By IDComplaintTenderKey;	

DROP Table ComplaintTenderDocuments;

// Определение Организаторов, которые закупают через Неконкурентные процедуры
TempOrgs:
LOAD	 
	 IDOrganizatorKey
Where 	PMStr='limited'; 

LOAD	
	 IDOrganizatorKey,
	 Concat(DISTINCT procurementMethod) as PMStr
Resident Tender
Group By IDOrganizatorKey;

Left Join (Organizator)
LOAD
	 IDOrganizatorKey,
	 1 as _LimitedOrgs
Resident 	TempOrgs;

DROP Table TempOrgs; 

// Определение Участников, которые принимаю участие в Неконкурентных процедурах
TempTenderers_:
LOAD Distinct	
	 IDTendererKey,
	 IDTenderKey
Resident Bid;

Left Join (TempTenderers_)
LOAD
	 IDTenderKey,
	 procurementMethod
Resident Tender;	 

TempTenderers:
LOAD	 
	 IDTendererKey
Where 	PMStr='limited'; 

LOAD	
	 IDTendererKey,
	 Concat(DISTINCT procurementMethod) as PMStr
Resident TempTenderers_
Group By IDTendererKey;

DROP Table TempTenderers_;

Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 1 as _LimitedTenderers
Resident 	TempTenderers;

DROP Table TempTenderers; 

MinMaxLotAmount:
LOAD 
	Min(СуммаЛотаTmp) as MinLotAmount,
	Max(СуммаЛотаTmp) as MaxLotAmount;	

LOAD Num(Fieldvalue('СуммаЛота',RecNo())) as СуммаЛотаTmp 
       AUTOGENERATE FieldValueCount('СуммаЛота');

MinMaxContractAmount:
LOAD 
	Min([Сума договору (згідно договору) Tmp]) as MinContractAmount,
	Max([Сума договору (згідно договору) Tmp]) as MaxContractAmount;	

LOAD Num(Fieldvalue('Сума договору (згідно договору)',RecNo())) as [Сума договору (згідно договору) Tmp] 
       AUTOGENERATE FieldValueCount('Сума договору (згідно договору)');

MaxLotBidCount:
LOAD 
	Max(КоличествоПредложенийЛотаTmp) as MaxLotBidCount;	

LOAD Num(Fieldvalue('КоличествоПредложенийЛота',RecNo())) as КоличествоПредложенийЛотаTmp 
       AUTOGENERATE FieldValueCount('КоличествоПредложенийЛота');

DIRECTORY [..\04_DataBase\02_QVD_DB\01_Dictionary\];

// Определение флага GPA Процедура (ТЕНДЕР)
Left Join (Tender)
LOAD 
	 [GPA Organiser Kind] as [GPA Kind], 
     IDOrganizatorKey
Resident Organizator
Where NOT IsNull([GPA Organiser Kind]);

Left Join (Tender)
LOAD [GPA Kind],
     [CPV type] as [CPV tender type], 
     [GPA type] as [GPA tender type],
     [GPA тип] as [GPA тип тендера],
     [SDR Threshold],
     1 as GPAThresholdFlag
FROM SDRThreshold.qvd (qvd);

Left Join (Tender)
LOAD IDTenderKey, 
     if(NOT WildMatch(procurementMethodType, 'belowThreshold', 'reporting*') AND kind<>'other' AND GPAThresholdFlag=1 AND SDRValue >= [SDR Threshold], 1) as GPATenderFlag
Resident  Tender;    

DROP Fields GPAThresholdFlag, SDRValue, [SDR Threshold];

// Определение Участников для отчетов GPA
GPATenders:
LOAD
	 IDTenderKey
Resident Tender
Where GPATenderFlag = 1;	

Left Join (GPATenders) 
LOAD Distinct
	 IDTenderKey,
	 IDTendererKey
Resident Bid;	 

Left Join (Tenderer)
LOAD Distinct
	 IDTendererKey,
	 1 as GPATendererFlag
Resident GPATenders;

DROP Table GPATenders;

// Определение Поставщиков для отчетов GPA
GPATenders:
LOAD
	 IDTenderKey
Resident Tender
Where GPATenderFlag = 1;

Left Join (GPATenders) 
LOAD Distinct
	 IDTenderKey,
	 IDTendererKey,
	 1 as GPASupplierFlag
Resident Bid
Where СтатусПротоколаОценки='active';

DROP Field IDTenderKey From Bid;

Left Join (Tenderer)
LOAD Distinct
	 IDTendererKey,
	 1 as GPASupplierFlag
Resident GPATenders;

DROP Table GPATenders;	 

Left Join (Tenderer)
LOAD
	 РегионУчастника,
	 1 as UARegion_
Resident TendererRegionCoordinates;	 

// Определение г. Киев Организаторах и Участниках
Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 if(WildMatch(Lower(ГородУчастника), '*київ') AND NOT WildMatch(Lower(ГородУчастника), '*киликиїв*'), 1) as UATendererCapital_,
	 if(_Resident<>1 AND NOT WildMatch(СтранаУчастника, 'укр*', 'ukr*') AND UARegion_<>1 AND Len(IDTenderer)<>8 AND ((Len(IDTenderer)=10 AND Left(IDTenderer, 1)=0) OR Len(IDTenderer)<>10), 0) as Resident_
Resident Tenderer;

Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 Alt(UARegion_, 0) as UARegion,
	 Alt(UATendererCapital_, 0) as UATendererCapital,
	 Alt(_Resident, Resident_, 1) as Resident
Resident Tenderer;	 

DROP Fields UARegion_, UATendererCapital_, _Resident, Resident_;

// Возраст компании и Дней до 1 победы
// ТЗ https://docs.google.com/spreadsheets/d/1DvESWrUgJGj-ubOoOMTVZs5hvciFB-rlt8PpnhSTytA
// https://docs.google.com/spreadsheets/d/1a8jsXpU4Ln6tVXyZ8NBeTej8xjn4_AlhllQBwyKjQNw
Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 Round(Floor(($(#vCurrentDate)-[Дата реєстрації юридичної особи])/365, 0.01), 0.1) as [Вік компанії],
	 [Дата 1 переможної пропозиції] - [Дата реєстрації юридичної особи] as [Днів до подачі першої переможної пропозиції]
Resident Tenderer;	 

Left Join (Organizator)
LOAD
	 IDOrganizatorKey,
	 if(WildMatch(Lower(ГородОрганизатора), '*київ', '*киев') AND NOT WildMatch(Lower(ГородОрганизатора), '*киликиїв*'), 1, 0) as UAOrgCapital
Resident Organizator;

//Left Join (Organizator)
//LOAD
//	 IDOrganizatorKey,
//	 Alt(UAOrgCapital_, 0) as UAOrgCapital
//Resident Organizator;
//
//DROP Field UAOrgCapital_;

// Определение Региона участника для географии 
Left Join (Tenderer)
LOAD
	 IDTendererKey,
	 if(UARegion=1, РегионУчастника, 
	 	if(IsNull(РегионУчастника) OR РегионУчастника='', '-',
	 		if(Resident=0, 'Нерезидент', 'Не визначений'))) as [Регіон учасника гео],
	 if(UARegion=1, [Region of Tenderer_], 
	 	if(IsNull(РегионУчастника) OR РегионУчастника='', '-',
	 		if(Resident=0, 'Nonresident', 'Unspecified'))) as [Region of Tenderer geo]		
Resident Tenderer;	

DROP Field [Region of Tenderer_];

// Дней до первого измения договора
Left Join (Contract)
LOAD	
	 IDContractKey,
	 Min([Дата внесення змін до договору]) as [Дата внесення змін до договору Min],
	 Max([Дата внесення змін до договору]) as [Дата внесення змін до договору Max]
Resident ContractChange
Group By IDContractKey;	 

Left Join (Contract)
LOAD	
	 IDContractKey,
	 [Дата внесення змін до договору Min] - [Дата підписання договору] as [Днів до першої зміни договору],
	 if([Дата внесення змін до договору Max] > [Дата закінчення дії договору (згідно договору)], 1, 0) as [Договір змінено після дати завершення дії договору],
	 if(IsNull([Дата публікації останнього файла договору]), 0, 1) as [Є файли договору]
Resident Contract;

DROP Fields [Дата внесення змін до договору Min], [Дата внесення змін до договору Max];

// Цена за единицу
// ТЗ https://docs.google.com/document/d/1K7Vy3BY73TD_Ngl43klOJeD5_QQSvFixRuMKTDUwLk0
LotItem_:
LOAD
	 IDLotKey,
	 Count(IDItemKey) as LotCountItem
Resident TenderItem
Group By IDLotKey;	 

LotItem:
LOAD
	 IDLotKey
Resident LotItem_
Where LotCountItem = 1;

DROP Table LotItem_;

Left Join (LotItem)
LOAD
	 IDLotKey,
	 Количество,
	 [Од. виміру] as [Одиниця виміру],
	 Unit as [Unit of measurement]
Resident TenderItem;

Left Join (LotItem)
LOAD
 	 IDLotKey,
 	 СуммаПредложения,
     BidAmountEUR
Resident Bid
Where EndAwardStatusFlag = 1 AND Match(BidType, 1, 2) AND СтатусПротоколаОценки = 'active'; 

LET vLotsQty = NoOfRows('Lot');
TRACE Befor join from LotItem = $(vLotsQty);

Left Join (Lot)
LOAD
	 IDLotKey,
	 Round(Floor(СуммаПредложения/Количество, 0.001), 0.01) as [Ціна за одиницю],
	 Round(Floor(BidAmountEUR/Количество, 0.001), 0.01) as [Price per unit (EUR)],
	 [Одиниця виміру],
	 [Unit of measurement]
Resident LotItem
Where NOT IsNull(СуммаПредложения);	

DROP Table LotItem; 	 

// Назва дороги лота
Left Join (Lot)
LOAD
	 IDLotKey,
	 Concat(DISTINCT [Індекс дороги], ' | ') as [Індекс дороги лота],
	 Concat(DISTINCT [Назва дороги], ' | ') as [Назва дороги лота]
Resident TenderItem
Where NOT IsNull([Індекс дороги])
Group By IDLotKey;	 
///$tab 6 Диапазоны
// Кол-во участников

RangesTenderersTmp:
LOAD * Inline [
NumOfTenderers
0,
2,
4,
6,
10000
];

LET QtyRangesTenderers = NoOfRows('RangesTenderersTmp');

RangesTenderers:
LOAD
	RangeSum(Previous(NumOfTenderers), 0) as MinNumOfTenderers, 
	NumOfTenderers-1 as MaxNumOfTenderers,
	Dual(RangeSum(Previous(NumOfTenderers), 0) &  if(RecNo()=$(QtyRangesTenderers), '+', '<=  <' & NumOfTenderers), RowNo()) as КоличествоУчастниковОтДо
//	RowNo() as RangeNumOfTenderersID
Resident RangesTenderersTmp
Where NumOfTenderers > 0
Order By NumOfTenderers;	

DROP Table RangesTenderersTmp;

Left Join (Lot)
IntervalMatch (КоличествоУчастниковЛота)
LOAD 
	MinNumOfTenderers,
	MaxNumOfTenderers
Resident RangesTenderers;	

Left Join (Lot)
LOAD 
	MinNumOfTenderers,
	MaxNumOfTenderers,
	КоличествоУчастниковОтДо
//	RangeNumOfTenderersID
Resident RangesTenderers;

DROP Fields MinNumOfTenderers, MaxNumOfTenderers;

DROP Table RangesTenderers;

// Суммы лотов

RangesLotsSumTmp:
LOAD * Inline [
SumOfLots
0,
10000,
50000,
100000,
250000,
1000000,
1000000000000
];

LET SumRangesLots = NoOfRows('RangesLotsSumTmp');

RangesLotsSum:
LOAD
	RangeSum(Previous(SumOfLots), 0) as MinSumOfLots, 
	SumOfLots-0.01 as MaxSumOfLots,
	Dual(Num(RangeSum(Previous(SumOfLots), 0), '# ##0') &  if(RecNo()=$(SumRangesLots), '+', '<=  <' & Num(SumOfLots, '# ##0')), RowNo()) as СуммаЛотаОтДо
//	RowNo() as RangeSumOfLotsID
Resident RangesLotsSumTmp
Where SumOfLots > 0
Order By SumOfLots;	

DROP Table RangesLotsSumTmp;

Left Join (Lot)
IntervalMatch (СуммаЛота)
LOAD 
	MinSumOfLots,
	MaxSumOfLots
Resident RangesLotsSum;	

Left Join (Lot)
LOAD 
	MinSumOfLots,
	MaxSumOfLots,
	СуммаЛотаОтДо
//	RangeSumOfLotsID
Resident RangesLotsSum;

DROP Fields MinSumOfLots, MaxSumOfLots;

DROP Table RangesLotsSum;

// Суммы лотов по квантилям

RangesFracLotsSumTmp:
LOAD
	 SubField(FracSumOfLots, ';') as FracSumOfLots;
LOAD 
	0 & ';' & Fractile(СуммаЛота, 0.1) & ';' & Fractile(СуммаЛота, 0.2) & ';' & Fractile(СуммаЛота, 0.3) & ';' & Fractile(СуммаЛота, 0.4) & ';' & Fractile(СуммаЛота, 0.5) & ';' & Fractile(СуммаЛота, 0.6) & ';' & Fractile(СуммаЛота, 0.7) & '; ' & Fractile(СуммаЛота, 0.8) & ';' & Fractile(СуммаЛота, 0.9) & ';' & Max(СуммаЛота) as FracSumOfLots
Resident Lot;

//0 => Min(СуммаЛота)

LET SumRangesFracLots = NoOfRows('RangesFracLotsSumTmp');

RangesFracLotsSum:
LOAD
	RangeSum(Previous(FracSumOfLots), 0) as MinFracSumOfLots, 
	if(RowNo()+1=$(SumRangesFracLots), FracSumOfLots, FracSumOfLots-0.001) as MaxFracSumOfLots,
//	Dual(Num(RangeSum(Previous(FracSumOfTenders), 0), '# ##0') &  '<=' & if(RowNo()+1=$(SumRangesFracTenders), 'Max', 'Кв-ль ' & RowNo()*10) & '<' & Num(FracSumOfTenders, '# ##0'), RowNo()) as СуммаТендераОтКвантильДо,
	Dual(if(RowNo()=1, 'Min (' & Num(RangeSum(Previous(FracSumOfLots), 0), '# ##0')& ')', 'дециль ' & (RowNo()-1)*10 & ' (' & Num(RangeSum(Previous(FracSumOfLots), 0), '# ##0') & ')') &  '<=  <' & if(RowNo()+1=$(SumRangesFracLots), '=Max (' & Num(FracSumOfLots, '# ##0') & ')', 'дециль ' & RowNo()*10 & ' (' & Num(FracSumOfLots, '# ##0') & ')'), RowNo()) as СуммаЛотаОтКвантильДо
//	RowNo() as RangeFracSumOfLotsID
Resident RangesFracLotsSumTmp
Where FracSumOfLots> 0
Order By FracSumOfLots;	

DROP Table RangesFracLotsSumTmp;

Left Join (Lot)
IntervalMatch (СуммаЛота)
LOAD 
	MinFracSumOfLots,
	MaxFracSumOfLots
Resident RangesFracLotsSum;	

Left Join (Lot)
LOAD 
	MinFracSumOfLots,
	MaxFracSumOfLots,
	СуммаЛотаОтКвантильДо,
	Replace(СуммаЛотаОтКвантильДо, 'дециль', 'decile') as RangeFracSumOfLot
Resident RangesFracLotsSum;

DROP Fields MinFracSumOfLots, MaxFracSumOfLots;

DROP Table RangesFracLotsSum;

// Суммы лотов по диапазонам для билинга, планирования доходов бухгалтерией

RangesLotsSumPlanTmp:
LOAD * Inline [
SumOfLots
0,
20000,
50000,
200000,
1000000,
1000000000000
];

LET SumRangesLots = NoOfRows('RangesLotsSumPlanTmp');

RangesLotsSumPlan:
LOAD
	RangeSum(if(RowNo()=1, 0, Previous(SumOfLots)+0.01), 0) as MinSumOfLots, 
	SumOfLots as MaxSumOfLots,
	Dual(Num(RangeSum(if(RowNo()=1, 0, Previous(SumOfLots)+0.01), 0), '# ##0') &  if(RecNo()=$(SumRangesLots), '+', '<  <=' & Num(SumOfLots, '# ##0')), RowNo()) as ДиапазонСуммЛота
//	RowNo() as RangeSumPlanOfLotsID
Resident RangesLotsSumPlanTmp
Where SumOfLots > 0
Order By SumOfLots;	

DROP Table RangesLotsSumPlanTmp;

Left Join (Lot)
IntervalMatch (СуммаЛота)
LOAD 
	MinSumOfLots,
	MaxSumOfLots
Resident RangesLotsSumPlan;	

Left Join (Lot)
LOAD 
	MinSumOfLots,
	MaxSumOfLots,
	ДиапазонСуммЛота
//	RangeSumPlanOfLotsID
Resident RangesLotsSumPlan;

DROP Fields MinSumOfLots, MaxSumOfLots;

DROP Table RangesLotsSumPlan;


// Суммы лотов в EUR

RangesLotsSumEURTmp:
LOAD * Inline [
SumEUROfLots
0,
300,
1500,
3000,
8000,
30000,
1000000000000
];

LET SumEURRangesLots = NoOfRows('RangesLotsSumEURTmp');

RangesLotsSumEUR:
LOAD
	RangeSum(Previous(SumEUROfLots), 0) as MinSumEUROfLots, 
	SumEUROfLots-0.01 as MaxSumEUROfLots,
	Dual(Num(RangeSum(Previous(SumEUROfLots), 0), '# ##0') &  if(RecNo()=$(SumEURRangesLots), '+', '<=  <' & Num(SumEUROfLots, '# ##0')), RowNo()) as LotValueRangeEUR
Resident RangesLotsSumEURTmp
Where SumEUROfLots > 0
Order By SumEUROfLots;	

DROP Table RangesLotsSumEURTmp;

Left Join (Lot)
IntervalMatch (LotAmountEUR)
LOAD 
	MinSumEUROfLots,
	MaxSumEUROfLots
Resident RangesLotsSumEUR;	

Left Join (Lot)
LOAD 
	MinSumEUROfLots,
	MaxSumEUROfLots,
	LotValueRangeEUR
//	RangeSumOfLotsID
Resident RangesLotsSumEUR;

DROP Fields MinSumEUROfLots, MaxSumEUROfLots;

DROP Table RangesLotsSumEUR;
///$tab 7 Link Table
// Жалобы (связь через IDLotKey)

ComplaintTender_Link:
LOAD
	 IDComplaintTenderKey,
	 IDTenderKey
Resident ComplaintTender
Where ComplaintType = 1 AND IsNull(IDLotKey);	

Left Join (ComplaintTender_Link)
LOAD 
	 IDTenderKey,
	 IDLotKey
Resident Lot;

DROP Field IDTenderKey From ComplaintTender_Link;

	
ComplaintAward_Link:
LOAD
	 IDComplaintTenderKey,
	 IDComplaintAwardKey
Resident ComplaintTender
Where ComplaintType = 2 AND IsNull(IDLotKey); 

Left Join (ComplaintAward_Link)
LOAD 
	 IDAwardKey as IDComplaintAwardKey,
	 IDLotKey
Resident Bid;

Concatenate (ComplaintTender_Link)
LOAD Distinct
	 IDComplaintTenderKey,
	 IDLotKey
Resident ComplaintAward_Link;

DROP Table ComplaintAward_Link;

ComplaintQualification_Link:
LOAD
	 IDComplaintTenderKey,
	 KeyLotBid
Resident ComplaintTender
Where ComplaintType = 3 AND IsNull(IDLotKey); 

Left Join (ComplaintQualification_Link)
LOAD 
     KeyLotBid,
     IDLotKey
Resident Bid
Where BidType = 1;

Concatenate (ComplaintTender_Link)
LOAD Distinct
	 IDComplaintTenderKey,
	 IDLotKey
Resident ComplaintQualification_Link;

DROP Table ComplaintQualification_Link;

Concatenate (ComplaintTender_Link) 
LOAD
	 IDComplaintTenderKey,
	 IDLotKey
Resident ComplaintTender
Where NOT IsNull(IDLotKey);

DROP Fields IDTenderKey, IDLotKey, KeyLotBid From ComplaintTender;

// Вопросы

Question_Link:
LOAD
	 IDQuestion,
	 IDTenderKey
Resident Question
Where questionOf = 'tender';

Left Join (Question_Link)
LOAD 
	 IDTenderKey,
	 IDLotKey
Resident Lot;

DROP Field IDTenderKey From Question_Link;

Concatenate (Question_Link)
LOAD
	 IDQuestion,
	 IDLotKey
Resident Question
Where questionOf = 'lot';	 

Left Join (Question_Link)
LOAD
	 IDLotKey,
	 IDItemKey
Resident TenderItem;	

Concatenate (Question_Link)
LOAD
	 IDQuestion,
	 IDItemKey
Resident Question
Where questionOf = 'item';

QuestionLink:
NoConcatenate
LOAD Distinct
	 IDQuestion,
	 IDItemKey
Resident Question_Link
Where NOT IsNull(IDItemKey);	

DROP Table  Question_Link;

DROP Fields IDItemKey, IDTenderKey, IDLotKey From Question;

// Отмены

CancellationLink:
LOAD
	 IDCancellationKey,
	 IDTenderKey
Resident Cancellation
Where cancellationOf = 'tender';	

Left Join (CancellationLink)
LOAD 
	 IDTenderKey,
	 IDLotKey
Resident Lot; 

DROP Field IDTenderKey From CancellationLink;

Concatenate (CancellationLink)
LOAD 
	 IDCancellationKey,
	 IDLotKey
Resident Cancellation
Where cancellationOf = 'lot';

DROP Fields IDTenderKey, IDLotKey From Cancellation;

// Файлы документов тендера

//TenderDocuments_Link:
//LOAD Distinct
//	 IDTenderDoc,
//	 IDTenderKey 
//Resident TenderDocuments
//Where TenderDocumentOf = 'tender';	 
//
//Left Join (TenderDocuments_Link)
//LOAD 
//	 IDTenderKey,
//	 IDLotKey
//Resident Lot; 
//
//DROP Field IDTenderKey From TenderDocuments_Link;
//
//Concatenate (TenderDocuments_Link)
//LOAD Distinct
//	 IDTenderDoc,
//	 IDLotKey
//Resident TenderDocuments
//Where TenderDocumentOf = 'lot';
//
//Left Join (TenderDocuments_Link)
//LOAD
//	 IDLotKey,
//	 IDItemKey
//Resident TenderItem;
//
//Concatenate (TenderDocuments_Link)
//LOAD Distinct
//	 IDTenderDoc,
//	 IDItemKey
//Resident TenderDocuments
//Where TenderDocumentOf = 'item';
//
//TenderDocumentsLink:
//NoConcatenate
//LOAD Distinct
//	 IDTenderDoc,
//	 IDItemKey
//Resident TenderDocuments_Link
//Where NOT IsNull(IDItemKey);	
//
//DROP Table  TenderDocuments_Link;
//
//DROP Fields IDTenderKey, IDLotKey, IDItemKey From TenderDocuments;

//DROP Field IDTenderKey From BidDocuments;
///$tab 8 Календарь

Календарь:
LOAD
    Дата,
    num(Дата) as DateNum,
	Day(Дата) as "День",
    Year(Дата) as "Рік",
    Month(Дата) as "Місяць",
    WeekDay(Дата) as "День тижня",
    Year(Дата)&num(Month(Дата),'00') as "РікМісяць",
    Dual(Year(Дата)&'-'&Month(Дата), Year(Дата) * 100 + Month(Дата)) as "Рік-Місяць",
    Dual(Month(Дата) & '-' & Year(Дата), Month(Дата) * 10000 + Year(Дата)) as "Місяць-Рік",
	Dual(WeekName(Дата,0), WeekYear(Дата) * 100 + Week(Дата)) as "Рік-Тиждень",
	WeekYear(Дата) & Num(Week(Дата), '00') as РікТиждень,
    'Т' & Week(Дата) as "Тиждень",
    Week(Дата) as ТижденьНомер,
    'К' & Ceil(Month(Дата)/3) AS "Квартал",   
    Dual(Year(Дата)&'-'&'К' & Ceil(Month(Дата)/3), Year(Дата) & num(Ceil(Month(Дата)/3), '00')) as "Рік-Квартал",
    Year(Дата) & num(Ceil(Month(Дата)/3), '00') as РікКвартал,
    Dual('К' & Ceil(Month(Дата)/3) & '-' & Year(Дата), Num(Ceil(Month(Дата)/3), '00') & Year(Дата)) as "Квартал-Рік",
    'П' & Ceil(Month(Дата)/6) AS "Півріччя",
    Dual(Year(Дата)&'-'&'П' & Ceil(Month(Дата)/6), Year(Дата) & num(Ceil(Month(Дата)/6), '00')) as "Рік-Півріччя",
    Dual('П' & Ceil(Month(Дата)/6) & '-' & Year(Дата), Num(Ceil(Month(Дата)/6), '00') & Year(Дата)) as "Півріччя-Рік",
    if(num(WeekDay(Дата))=5 or num(WeekDay(Дата))=6, 1, 0) as IsWeekend
     
    ,if(InYear(Дата,'$(vCurrentDate)',0), 1, 0) AS CY  // Флаг текущего года  
    ,if(InYear(Дата,'$(vCurrentDate)',-1), 1, 0) AS PY  // Флаг предыдущего года 
     
    ,if(InMonth(Дата,'$(vCurrentDate)',0), 1, 0) AS CM  // Флаг текущего месяца 
    ,if(InMonth(Дата,'$(vCurrentDate)',-1), 1, 0) AS PM  // Флаг предыдущего месяца
    ,if(InMonth(Дата,'$(vCurrentDate)',-2), 1, 0) AS PM2  // Флаг предпредыдущего месяца
    ,if(InMonth(Дата,'$(vCurrentDate)',-12), 1, 0) AS PYM  // флаг аналогичного меcяца в предыдущем году
    
     
    ,if(InQuarter(Дата,'$(vCurrentDate)',0), 1, 0) AS CQ  // Флаг текущего квартала
    ,if(InQuarter(Дата,'$(vCurrentDate)',-1), 1, 0) AS PQ  // Флаг предыдущего квартала
    ,if(InQuarter(Дата,'$(vCurrentDate)',-4), 1, 0) AS PYQ // флаг аналогичного квартала в предыдущем году
    
  
    ,if(InWeek(Дата,'$(vCurrentDate)',0), 1, 0) AS CW  // флаг текущей недели
    ,if(InWeek(Дата,'$(vCurrentDate)',-1), 1, 0) AS PW  // флаг предыдущей недели
    ,if(InYear(Дата,'$(vCurrentDate)',-1)  and week(Дата)=week('$(vCurrentDate)'), 1, 0) AS PYW  // флаг аналогичной недели в предыдущем году
    
    ,if(InYearToDate(Дата,'$(vCurrentDate)',0), 1, 0) AS CYD      // флаг ToDate в текущем году
    ,if(InYearToDate(Дата,'$(vCurrentDate)',-1), 1, 0) AS PYD     // флаг ToDate в предыдущем году

    ,if(InMonthToDate(Дата,'$(vCurrentDate)',0), 1, 0) AS CMD     // флаг ToDate в текущем меcяце
    ,if(InMonthToDate(Дата,'$(vCurrentDate)',-1), 1, 0) AS PMD    // флаг ToDate в предыдущем меcяце
    ,if(InMonthToDate(Дата,'$(vCurrentDate)',-12), 1, 0) AS PYMD  // флаг ToDate аналогичного меcяца в предыдущем году
     
    ,if(InQuarterToDate(Дата,'$(vCurrentDate)',0), 1, 0) AS CQD   // флаг ToDate в текущем квартале  
    ,if(InQuarterToDate(Дата,'$(vCurrentDate)',-1), 1, 0) AS PQD  // флаг ToDate в предыдущем квартале
    ,if(InQuarterToDate(Дата,'$(vCurrentDate)',-4), 1, 0) AS PYQD // флаг ToDate аналогичного квартала в предыдущем году
     
    ,if(InWeekToDate(Дата,'$(vCurrentDate)',0), 1, 0) AS CWD  // флаг ToDate в текущей неделе
    ,if(InWeekToDate(Дата,'$(vCurrentDate)',-1), 1, 0) AS PWD  // флаг ToDate в предыдущей неделе       
    ,if(InYear(Дата,'$(vCurrentDate)',-1)  and week(Дата)=week('$(vCurrentDate)') and weekday(Дата)<=weekday('$(vCurrentDate)') , 1, 0) AS PYWD  // флаг ToDate аналогичной недели в предыдущем году
    
//    ,1 as DS
//    ,1 as DE
    ,if(Дата=date(floor(MonthStart(Дата))), 1, 0) as MS
    ,if(Дата=date(floor(MonthEnd(Дата))), 1, 0) as ME
    ,if(Дата=date(floor(QuarterStart(Дата))), 1, 0) as QS
    ,if(Дата=date(floor(QuarterEnd(Дата))), 1, 0) as QE
    ,if(Дата=date(floor(YearStart(Дата))), 1, 0) as YS
    ,if(Дата=date(floor(YearEnd(Дата))), 1, 0) as YE
    
    ,if('$(vCurrentDate)'-Дата=1, 1) as PrevDay
    ,if('$(vCurrentDate)'-Дата<7, 7) as _Last7
    ,if('$(vCurrentDate)'-Дата<30, 30) as _Last30
    ,if('$(vCurrentDate)'-Дата<60, 60) as _Last60
    ,if('$(vCurrentDate)'-Дата<90, 90) as _Last90
    ,if('$(vCurrentDate)'-Дата<180, 180) as _Last180
    ,if('$(vCurrentDate)'-Дата<365, 365) as _Last365
    
//    ,if(Дата <= '$(vCurrentDate)', 1, 0) as FP // Период "транзакций" (за исключением будущих периодов)    
 	Where Дата>='$(vMinTenderDate)' OR Exists(TenderDate, Дата);
LOAD Date('$(vMinDate)' + RecNo() - 1) as Дата
AutoGenerate vMaxDate - vMinDate + 1;

DROP Table DistDates;

SelectCalendar:
//LOAD
//	 Дата,
//	 'Сьогодні' as Днів,
//	 'Today' as Days
//Resident Календарь
//Where NOT IsNull(_Last1);
//
//Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last7 as Днів,
	 _Last7 as Days
Resident Календарь
Where NOT IsNull(_Last7);

Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last30 as Днів,
	 _Last30 as Days
Resident Календарь
Where NOT IsNull(_Last30);	

Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last60 as Днів,
	 _Last60 as Days
Resident Календарь
Where NOT IsNull(_Last60); 

Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last90 as Днів,
	 _Last90 as Days
Resident Календарь
Where NOT IsNull(_Last90);

Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last180 as Днів,
	 _Last180 as Days
Resident Календарь
Where NOT IsNull(_Last180);

Concatenate(SelectCalendar)
LOAD
	 Дата,
	 _Last365 as Днів,
	 _Last365 as Days
Resident Календарь
Where NOT IsNull(_Last365);

DROP Fields _Last7, _Last30, _Last60, _Last90, _Last180, _Last365 From Календарь;

// Для Конечной даты тендера
//DistDates:
//LOAD Distinct
//	 КонДата
//Resident Tender;	 
//
//MinMaxEndDates:
//LOAD 
//	Min(КонДата) as MinEndDate,
//	Max(КонДата) as MaxEndDate
//RESIDENT DistDates;

MinMaxEndDates:
LOAD 
	Min(КонДатаTmp) as MinEndDate,
	Max(КонДатаTmp) as MaxEndDate;	

LOAD Num(Fieldvalue('КонДата',RecNo())) as КонДатаTmp 
       AUTOGENERATE FieldValueCount('КонДата');

LET vMinEndDate = Peek('MinEndDate', -1, 'MinMaxEndDates');
LET vMaxEndDate = Peek('MaxEndDate', -1, 'MinMaxEndDates');

DROP Tables /*DistDates,*/ MinMaxEndDates;

КалендарьКонДата:
LOAD
    КонДата,
    Dual(Year(КонДата)&'-'&Month(КонДата), Year(КонДата) * 100 + Month(КонДата)) as "Рік-Місяць дати останнього статусу",
    Dual(Year(КонДата)&'-'&'К' & Ceil(Month(КонДата)/3), Year(КонДата) & num(Ceil(Month(КонДата)/3), '00')) as "Рік-Квартал дати останнього статусу"
 ;
LOAD Date('$(vMinEndDate)' + RecNo() - 1) as КонДата
AutoGenerate vMaxEndDate - vMinEndDate + 1;

// Для терминальной даты лота
MinMaxEndDates:
LOAD 
	Min([Термінальна дата лотаTmp]) as MinEndLotDate,
	Max([Термінальна дата лотаTmp]) as MaxEndLotDate;	

LOAD Num(Fieldvalue('Термінальна дата лота',RecNo())) as [Термінальна дата лотаTmp] 
       AUTOGENERATE FieldValueCount('Термінальна дата лота');

LET vMinEndLotDate = Peek('MinEndLotDate', -1, 'MinMaxEndDates');
LET vMaxEndLotDate = Peek('MaxEndLotDate', -1, 'MinMaxEndDates');

DROP Tables /*DistDates,*/ MinMaxEndDates;

КалендарьТермДатаЛота:
LOAD
    [Термінальна дата лота],
    Dual(Year([Термінальна дата лота])&'-'&Month([Термінальна дата лота]), Year([Термінальна дата лота]) * 100 + Month([Термінальна дата лота])) as "Рік-Місяць термінальної дати лота",
    Dual(Year([Термінальна дата лота])&'-'&'К' & Ceil(Month([Термінальна дата лота])/3), Year([Термінальна дата лота]) & num(Ceil(Month([Термінальна дата лота])/3), '00')) as "Рік-Квартал термінальної дати лота"
 ;
LOAD Date('$(vMinEndLotDate)' + RecNo() - 1) as [Термінальна дата лота]
AutoGenerate vMaxEndLotDate - vMinEndLotDate + 1;

// Для даты внесения изменений договора
DistChangeDates:
LOAD 
	 Num(Fieldvalue('Дата внесення змін до договору',RecNo())) as [Дата внесення змін до договору_]
AUTOGENERATE FieldValueCount('Дата внесення змін до договору');

MinMaxChangeDates:
LOAD 
	Min([Дата внесення змін до договору_]) as MinChangeDate,
	Max([Дата внесення змін до договору_]) as MaxChangeDate
RESIDENT DistChangeDates;

LET vMinChangeDate = Peek('MinChangeDate', -1, 'MinMaxChangeDates');
LET vMaxChangeDate = Peek('MaxChangeDate', -1, 'MinMaxChangeDates');

DROP Table MinMaxChangeDates;

КалендарьИзмененийДоговора:
LOAD
    [Дата внесення змін до договору],
    Year([Дата внесення змін до договору]) as "Рік внесення змін до договору",
    Dual(Year([Дата внесення змін до договору])&'-'&Month([Дата внесення змін до договору]), Year([Дата внесення змін до договору]) * 100 + Month([Дата внесення змін до договору])) as "Рік-Місяць внесення змін до договору",
    Dual(Year([Дата внесення змін до договору])&'-'&'К' & Ceil(Month([Дата внесення змін до договору])/3), Year([Дата внесення змін до договору]) & num(Ceil(Month([Дата внесення змін до договору])/3), '00')) as "Рік-Квартал внесення змін до договору"
 Where [Дата внесення змін до договору]>='$(vMinTenderDate)' OR Exists([Дата внесення змін до договору_], [Дата внесення змін до договору]);
LOAD Date('$(vMinChangeDate)' + RecNo() - 1) as [Дата внесення змін до договору]
AutoGenerate vMaxChangeDate - vMinChangeDate + 1;

// Для даты подписания договора
DistSignDates:
LOAD 
	 Num(Fieldvalue('Дата підписання договору',RecNo())) as [Дата підписання договору_]
AUTOGENERATE FieldValueCount('Дата підписання договору');

MinMaxSignDates:
LOAD 
	Min([Дата підписання договору_]) as MinSignDate,
	Max([Дата підписання договору_]) as MaxSignDate
RESIDENT DistSignDates;

LET vMinSignDate = Peek('MinSignDate', -1, 'MinMaxSignDates');
LET vMaxSignDate = Peek('MaxSignDate', -1, 'MinMaxSignDates');

DROP Tables MinMaxSignDates;

КалендарьПодписанияДоговора:
LOAD
    [Дата підписання договору],
    Year([Дата підписання договору]) as "Рік підписання договору",
    Dual(Year([Дата підписання договору])&'-'&Month([Дата підписання договору]), Year([Дата підписання договору]) * 100 + Month([Дата підписання договору])) as "Рік-Місяць підписання договору",
    Dual(Year([Дата підписання договору])&'-'&'К' & Ceil(Month([Дата підписання договору])/3), Year([Дата підписання договору]) & num(Ceil(Month([Дата підписання договору])/3), '00')) as "Рік-Квартал підписання договору"
 Where [Дата підписання договору]>='$(vMinTenderDate)' OR Exists([Дата підписання договору_], [Дата підписання договору]);
LOAD Date('$(vMinSignDate)' + RecNo() - 1) as [Дата підписання договору]
AutoGenerate vMaxSignDate - vMinSignDate + 1;

// Для публикации договора
DistPubContractDates:
LOAD 
	 Num(Fieldvalue('Дата публікації договору',RecNo())) as [Дата публікації договору_]
AUTOGENERATE FieldValueCount('Дата публікації договору');

MinMaxPubContractDates:
LOAD 
	Min([Дата публікації договору_]) as MinPubContractDate,
	Max([Дата публікації договору_]) as MaxPubContractDate
RESIDENT DistPubContractDates;

LET vMinPubContractDate = Peek('MinPubContractDate', -1, 'MinMaxPubContractDates');
LET vMaxPubContractDate = Peek('MaxPubContractDate', -1, 'MinMaxPubContractDates');

DROP Tables MinMaxPubContractDates;

КалендарьПубликацииДоговора:
LOAD
    [Дата публікації договору],
    Dual(Year([Дата публікації договору])&'-'&Month([Дата публікації договору]), Year([Дата публікації договору]) * 100 + Month([Дата публікації договору])) as "Рік-Місяць публікації договору"
;
LOAD Date('$(vMinPubContractDate)' + RecNo() - 1) as [Дата публікації договору]
AutoGenerate vMaxPubContractDate - vMinPubContractDate + 1;


// Русс. названия периодов

SET MonthNames='янв;фев;мар;апр;май;июн;июл;авг;сен;окт;ноя;дек';
SET DayNames='Пн;Вт;Ср;Чт;Пт;Сб;Вс';

Left Join (Календарь)
LOAD	
	Дата,
    Year(Дата) as "Год",
    Month(Дата) as "Месяц",
    WeekDay(Дата) as "День недели",
    Year(Дата)&num(Month(Дата),'00') as "ГодМесяц",
    Dual(Year(Дата)&'-'&Month(Дата), Year(Дата) * 100 + Month(Дата)) as "Год-Месяц",
    Dual(Month(Дата) & '-' & Year(Дата), Month(Дата) * 10000 + Year(Дата)) as "Месяц-Год",
	Dual(WeekName(Дата,0), WeekYear(Дата) * 100 + Week(Дата)) as "Год-Неделя",
	WeekYear(Дата) & Num(Week(Дата), '00') as ГодНеделя,
    'Н' & Week(Дата) as "Неделя",
    Dual(Year(Дата)&'-'&'К' & Ceil(Month(Дата)/3), Year(Дата) & num(Ceil(Month(Дата)/3), '00')) as "Год-Квартал",
    Year(Дата) & num(Ceil(Month(Дата)/3), '00') as ГодКвартал,
    Dual('К' & Ceil(Month(Дата)/3) & '-' & Year(Дата), Num(Ceil(Month(Дата)/3), '00') & Year(Дата)) as "Квартал-Год",
    'П' & Ceil(Month(Дата)/6) AS "Полугодие",
    Dual(Year(Дата)&'-'&'П' & Ceil(Month(Дата)/6), Year(Дата) & num(Ceil(Month(Дата)/6), '00')) as "Год-Полугодие",
    Dual('П' & Ceil(Month(Дата)/6) & '-' & Year(Дата), Num(Ceil(Month(Дата)/6), '00') & Year(Дата)) as "Полугодие-Год"
;
LOAD Date('$(vMinDate)' + RecNo() - 1) as Дата
AutoGenerate vMaxDate - vMinDate + 1; 	

Left Join (КалендарьКонДата)
LOAD	
	КонДата,
    Year(КонДата) as "Год даты последнего статуса",
    Dual(Year(КонДата)&'-'&Month(КонДата), Year(КонДата) * 100 + Month(КонДата)) as "Год-Месяц даты последнего статуса",
    Dual(Year(КонДата)&'-'&'К' & Ceil(Month(КонДата)/3), Year(КонДата) & num(Ceil(Month(КонДата)/3), '00')) as "Год-Квартал даты последнего статуса"
;
LOAD Date('$(vMinEndDate)' + RecNo() - 1) as КонДата
AutoGenerate vMaxEndDate - vMinEndDate + 1; 

Left Join (КалендарьТермДатаЛота)
LOAD	
	[Термінальна дата лота],
    Year([Термінальна дата лота]) as "Год терминальной даты лота",
    Dual(Year([Термінальна дата лота])&'-'&Month([Термінальна дата лота]), Year([Термінальна дата лота]) * 100 + Month([Термінальна дата лота])) as "Год-Месяц терминальной даты лота",
    Dual(Year([Термінальна дата лота])&'-'&'К' & Ceil(Month([Термінальна дата лота])/3), Year([Термінальна дата лота]) & num(Ceil(Month([Термінальна дата лота])/3), '00')) as "Год-Квартал терминальной даты лота"
;
LOAD Date('$(vMinEndLotDate)' + RecNo() - 1) as [Термінальна дата лота]
AutoGenerate vMaxEndLotDate - vMinEndLotDate + 1;

Left Join (КалендарьИзмененийДоговора)
LOAD	
	[Дата внесення змін до договору],
    Dual(Year([Дата внесення змін до договору])&'-'&Month([Дата внесення змін до договору]), Year([Дата внесення змін до договору]) * 100 + Month([Дата внесення змін до договору])) as "Год-Месяц внесения изменений к договору"
Where [Дата внесення змін до договору]>='$(vMinTenderDate)' OR Exists([Дата внесення змін до договору_], [Дата внесення змін до договору]);
LOAD Date('$(vMinChangeDate)' + RecNo() - 1) as [Дата внесення змін до договору]
AutoGenerate vMaxChangeDate - vMinChangeDate + 1;

Left Join (КалендарьПодписанияДоговора)
LOAD	
	[Дата підписання договору],
    Dual(Year([Дата підписання договору])&'-'&Month([Дата підписання договору]), Year([Дата підписання договору]) * 100 + Month([Дата підписання договору])) as "Год-Месяц подписания договора"
Where [Дата підписання договору]>='$(vMinTenderDate)' OR Exists([Дата підписання договору_], [Дата підписання договору]);
LOAD Date('$(vMinSignDate)' + RecNo() - 1) as [Дата підписання договору]
AutoGenerate vMaxSignDate - vMinSignDate + 1;

Left Join (КалендарьПубликацииДоговора)
LOAD	
	[Дата публікації договору],
    Dual(Year([Дата публікації договору])&'-'&Month([Дата публікації договору]), Year([Дата публікації договору]) * 100 + Month([Дата публікації договору])) as "Год-Месяц публикации договора"
;
LOAD Date('$(vMinPubContractDate)' + RecNo() - 1) as [Дата публікації договору]
AutoGenerate vMaxPubContractDate - vMinPubContractDate + 1;

// Англ. названия периодов

SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';

Left Join (Календарь)
LOAD	
	Дата,
	Дата as Date,
    Year(Дата) as "Year",
    Month(Дата) as "Month",
    WeekDay(Дата) as "WeekDay",
    Year(Дата)&num(Month(Дата),'00') as "YearMonth",
    Dual(Year(Дата)&'-'&Month(Дата), Year(Дата) * 100 + Month(Дата)) as "Year-Month",
    Dual(Month(Дата) & '-' & Year(Дата), Month(Дата) * 10000 + Year(Дата)) as "Month-Year",
	Dual(WeekName(Дата,0), WeekYear(Дата) * 100 + Week(Дата)) as "Year-Week",
	WeekYear(Дата) & Num(Week(Дата), '00') as YearWeek,
    'W' & Week(Дата) as "Week",
    'Q' & Ceil(Month(Дата)/3) AS "Quarter",
    Dual(Year(Дата)&'-'&'Q' & Ceil(Month(Дата)/3), Year(Дата) & num(Ceil(Month(Дата)/3), '00')) as "Year-Quarter",
    Year(Дата) & num(Ceil(Month(Дата)/3), '00') as YearQuarter,
    Dual('Q' & Ceil(Month(Дата)/3) & '-' & Year(Дата), Num(Ceil(Month(Дата)/3), '00') & Year(Дата)) as "Quarter-Year",
    'HY' & Ceil(Month(Дата)/6) AS "Halfyear",
    Dual(Year(Дата)&'-'&'HY' & Ceil(Month(Дата)/6), Year(Дата) & num(Ceil(Month(Дата)/6), '00')) as "Year-Halfyear",
    Dual('HY' & Ceil(Month(Дата)/6) & '-' & Year(Дата), Num(Ceil(Month(Дата)/6), '00') & Year(Дата)) as "Halfyear-Year"
;
LOAD Date('$(vMinDate)' + RecNo() - 1) as Дата
AutoGenerate vMaxDate - vMinDate + 1;

Left Join (КалендарьКонДата)
LOAD	
	КонДата,
    Dual(Year(КонДата)&'-'&Month(КонДата), Year(КонДата) * 100 + Month(КонДата)) as "Year-Month of Last status date",
    Dual(Year(КонДата)&'-'&'Q' & Ceil(Month(КонДата)/3), Year(КонДата) & num(Ceil(Month(КонДата)/3), '00')) as "Year-Quarter of Last status date"
;
LOAD Date('$(vMinEndDate)' + RecNo() - 1) as КонДата
AutoGenerate vMaxEndDate - vMinEndDate + 1;

Left Join (КалендарьТермДатаЛота)
LOAD	
	[Термінальна дата лота],
    Dual(Year([Термінальна дата лота])&'-'&Month([Термінальна дата лота]), Year([Термінальна дата лота]) * 100 + Month([Термінальна дата лота])) as "Year-Month of Terminal date of lot",
    Dual(Year([Термінальна дата лота])&'-'&'Q' & Ceil(Month([Термінальна дата лота])/3), Year([Термінальна дата лота]) & num(Ceil(Month([Термінальна дата лота])/3), '00')) as "Year-Quarter of Terminal date of lot"
;
LOAD Date('$(vMinEndLotDate)' + RecNo() - 1) as [Термінальна дата лота]
AutoGenerate vMaxEndLotDate - vMinEndLotDate + 1;

Left Join (КалендарьИзмененийДоговора)
LOAD	
	[Дата внесення змін до договору],
    Dual(Year([Дата внесення змін до договору])&'-'&Month([Дата внесення змін до договору]), Year([Дата внесення змін до договору]) * 100 + Month([Дата внесення змін до договору])) as "Year-Month of Date of contract change",
    Dual(Year([Дата внесення змін до договору])&'-'&'Q' & Ceil(Month([Дата внесення змін до договору])/3), Year([Дата внесення змін до договору]) & num(Ceil(Month([Дата внесення змін до договору])/3), '00')) as "Year-Quarter of Date of contract change"
Where [Дата внесення змін до договору]>='$(vMinTenderDate)' OR Exists([Дата внесення змін до договору_], [Дата внесення змін до договору]);
LOAD Date('$(vMinChangeDate)' + RecNo() - 1) as [Дата внесення змін до договору]
AutoGenerate vMaxChangeDate - vMinChangeDate + 1;

DROP Table DistChangeDates;

Left Join (КалендарьПодписанияДоговора)
LOAD	
	[Дата підписання договору],
    Dual(Year([Дата підписання договору])&'-'&Month([Дата підписання договору]), Year([Дата підписання договору]) * 100 + Month([Дата підписання договору])) as "Year-Month of Signed date",
    Dual(Year([Дата підписання договору])&'-'&'Q' & Ceil(Month([Дата підписання договору])/3), Year([Дата підписання договору]) & num(Ceil(Month([Дата підписання договору])/3), '00')) as "Year-Quarter of Signed date"
Where [Дата підписання договору]>='$(vMinTenderDate)' OR Exists([Дата підписання договору_], [Дата підписання договору]);
LOAD Date('$(vMinSignDate)' + RecNo() - 1) as [Дата підписання договору]
AutoGenerate vMaxSignDate - vMinSignDate + 1;

DROP Table DistSignDates;

Left Join (КалендарьПубликацииДоговора)
LOAD	
	[Дата публікації договору],
    Dual(Year([Дата публікації договору])&'-'&Month([Дата публікації договору]), Year([Дата публікації договору]) * 100 + Month([Дата публікації договору])) as "Year-Month of Contrtact Publication date"
;
LOAD Date('$(vMinPubContractDate)' + RecNo() - 1) as [Дата публікації договору]
AutoGenerate vMaxPubContractDate - vMinPubContractDate + 1;

DROP Table DistPubContractDates;

// Календарь для даты завершения Аукциона
MinMaxDates:
LOAD 
	Min([Дата аукционаTmp]) as MinDate,
	Max([Дата аукционаTmp]) as MaxDate;	

LOAD Num(Fieldvalue('Дата аукциона',RecNo())) as [Дата аукционаTmp] 
       AUTOGENERATE FieldValueCount('Дата аукциона');

LET vMinAuctionDate = Peek('MinDate', -1, 'MinMaxDates');
LET vMaxAuctionDate = Peek('MaxDate', -1, 'MinMaxDates');

DROP TABLES /*DistDates,*/ MinMaxDates;

КалендарьАукционов:
LOAD
	Дата as [Дата аукциона],
	Дата as [Дата аукціону],
	Дата as [Auction Date],
	num(Дата) as DateNumAuction,
	"Год-Неделя" as "Год-Неделя аукциона",
	"Рік-Тиждень" as "Рік-Тиждень аукціону",
	"Year-Week" as "Auction Year-Week",
	"Год-Месяц" as "Год-Месяц аукциона",
	"Рік-Місяць" as "Рік-Місяць аукціону",
	"Year-Month" as "Auction Year-Month",
	"Год-Квартал" as "Год-Квартал аукциона",
	"Рік-Квартал" as "Рік-Квартал аукціону",
	"Year-Quarter" as "Auction Year-Quarter"
Resident Календарь
Where Дата>=$(vMinAuctionDate) AND Дата<=$(vMaxAuctionDate);	

// Календарь для даты первого предложения участника
MinMaxDates:
LOAD 
	Min([Дата 1 предложенияTmp]) as MinDate,
	Max([Дата 1 предложенияTmp]) as MaxDate;	

LOAD Num(Fieldvalue('Дата 1 предложения',RecNo())) as [Дата 1 предложенияTmp] 
       AUTOGENERATE FieldValueCount('Дата 1 предложения');

LET vMin1BidDate = Peek('MinDate', -1, 'MinMaxDates');
LET vMax1BidDate = Peek('MaxDate', -1, 'MinMaxDates');

DROP TABLES /*DistDates,*/ MinMaxDates;

Календарь1Предложения:
LOAD
	Дата as [Дата 1 предложения],
	Дата as [Дата 1 пропозиції],
	Дата as [Date of 1 Bid],
	num(Дата) as DateNum1Bid,
	"Год-Неделя" as "Год-Неделя 1 предложения",
	"Рік-Тиждень" as "Рік-Тиждень 1 пропозиції",
	"Year-Week" as "Year-Week of 1 Bid",
	"Год-Месяц" as "Год-Месяц 1 предложения",
	"Рік-Місяць" as "Рік-Місяць 1 пропозиції",
	"Year-Month" as "Year-Month of 1 Bid",
	"Год-Квартал" as "Год-Квартал 1 предложения",
	"Рік-Квартал" as "Рік-Квартал 1 пропозиції",
	"Year-Quarter" as "Year-Quarter of 1 Bid",
	"Год" as "Год 1 предложения",
	"Рік" as "Рік 1 пропозиції",
	"Year" as "Year of 1 Bid"
Resident Календарь
Where Дата>=$(vMin1BidDate) AND Дата<=$(vMax1BidDate);

// Календарь для даты завершения тендера

КалендарьДатаЗавершения:
LOAD Distinct
	[Дата завершения],
	Year([Дата завершения]) as "Год завершения",
	Year([Дата завершения]) as "Рік завершення"
RESIDENT Tender
Where NOT IsNull([Дата завершения]);

//Дата определения Победителя 

SelectWinCalendar:
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin7 as [Днів від визначення переможця],
	 _LastWin7 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin7);

Concatenate(SelectWinCalendar)
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin30 as [Днів від визначення переможця],
	 _LastWin30 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin30);	

Concatenate(SelectWinCalendar)
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin60 as [Днів від визначення переможця],
	 _LastWin60 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin60); 

Concatenate(SelectWinCalendar)
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin90 as [Днів від визначення переможця],
	 _LastWin90 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin90);

Concatenate(SelectWinCalendar)
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin180 as [Днів від визначення переможця],
	 _LastWin180 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin180);

Concatenate(SelectWinCalendar)
LOAD Distinct
	 ДатаОпределенияПобедителя,
	 _LastWin365 as [Днів від визначення переможця],
	 _LastWin365 as [Days from win]
Resident AwardDate
Where NOT IsNull(_LastWin365);

DROP Fields /*_LastWin1,*/ _LastWin7, _LastWin30, _LastWin60, _LastWin90, _LastWin180, _LastWin365 From AwardDate;

// Формирование таблицы со значениями для дистрибуции
DistributeTable:
LOAD Distinct
	 Рік,
	 'Current' as DateDistribute
Resident Календарь
Where Match(Рік, Year($(#vCurrentDate)), Year($(#vPYTenderDate)));	 

//Concatenate (DistributeTable)
//LOAD Distinct
//	 Рік,
//	 'CurrentExp' as DateDistribute
//Resident Календарь
//Where Match(Рік, Year($(#vCurrentDate)), Year($(#vPYTenderDate)), Year($(#vPY2TenderDate)));	
///$tab 9 Мониторинг ДАСУ
// Проверка не перезагружаются ли данные мониторинга
DIRECTORY [$(DIC_QVD_PATH)];

ReloadMonCreator:
LOAD 
	 ReloadMonFlag
FROM ReloadMonCreator.txt
(txt, utf8, embedded labels, delimiter is '\t', msq);

LET vReload = Peek('ReloadMonFlag', -1, 'ReloadMonCreator');

IF vReload = 0 THEN
	
	TRACE Monitoring Data is NOT completed!!!;
	TRACE Exit with ERROR!!!;
	
	FakeTable:
	LOAD FakeField
	Resident ReloadMonCreator;
	
ENDIF

DROP Table ReloadMonCreator;

// Мониторинг
DIRECTORY [$(TRN_QVD_PATH)];

Monitorings:
LOAD 
	 [ID моніторингу], 
	 MonitoringIdKey,
	 [Ідентифікатор моніторингу],
	 [ID закупівлі] as ID, 
	 MonitoringStatus,
	 [Чи було виявлене порушення], 
	 [Результат моніторингу],
	 [Зобов’язання щодо усунення порушення],
	 [Висновок про наявність порушень], 
	 [Дата прийняття рішення про висновок щодо моніторингу], 
	 [Дата час прийняття рішення про висновок щодо моніторингу],
	 DecisionRelatedPartyIdKey,
	 [Рішення моніторингу ДАСУ],
	 [Дата прийняття рішення про проведення моніторингу],
	 EliminationResolutionResult,
	 [corruptionDescription],
	 [corruptionProcurementMethodType],
	 [corruptionPublicDisclosure],
	 [corruptionBiddingDocuments],
	 [documentsForm],
	 [corruptionAwarded],
	 [corruptionCancelled],
	 [corruptionContracting],
	 [corruptionChanges],
	 [other],
//	   CancellationRelatedParty, 
//     CancellationRelatedPartyIdKey, 
//     ConclusionRelatedParty, 
//     DecisionRelatedParty, 
//     DecisionRelatedPartyIdKey, 
//     EliminationResolutionRelatedParty, 
//     EliminationResolutionRelatedPartyIdKey, 
//     [Вплив ризик індикатора], 
//     [Дата відміни моніторингу], 
//     [Дата останньої зміни моніторингу], 
//     [Дата час останньої зміни моніторингу], 
//     [Дата публікації відміни моніторингу], 
//     [Дата публікації оскарження в суді], 
     [Дата публікації перевірки усунення порушень], 
     [Дата час публікації висновку щодо моніторингу],
     [Дата публікації висновку щодо моніторингу], 
     [Дата публікації рішення про проведення моніторингу], 
     [Дата публікації інформації про усунення порушень (замовником)], 
//     [Дата результату усунення порушень], 
//     [Дата створення моніторингу], 
//     [Дата створення оскарження в суді], 
//     [Дата створення рішення про висновок], 
//     [Дата створення рішення про проведення моніторингу], 
//     [Дата усунення порушень], 
//     [Дата час відміни моніторингу], 
     [Дата час прийняття рішення про проведення моніторингу], 
//     [Дата час публікації відміни моніторингу], 
//     [Дата час публікації оскарження в суді], 
     [Дата час публікації перевірки усунення порушень], 
//     [Дата час публікації рішення про висновок], 
     [Дата час публікації рішення про проведення моніторингу], 
     [Дата час публікації інформації про усунення порушень (замовником)], 
//     [Дата час результату усунення порушень], 
//     [Дата час створення моніторингу], 
//     [Дата час створення оскарження в суді], 
//     [Дата час створення рішення про висновок], 
//     [Дата час створення рішення про проведення моніторингу], 
//     [Дата час усунення порушень], 
//     [Загальний опис результату усунення порушень], 
//     [Кінцева дата моніторингу], 
//     [Кінцева дата періоду закриття моніторингу], 
//     [Кінцева дата періоду моніторингу], 
//     [Кінцева дата час моніторингу], 
//     [Кінцева дата час періоду закриття моніторингу], 
//     [Кінцева дата час періоду моніторингу], 
//     Майданчик, 
//     [Обсласть ризик індикатора], 
//     [Оскарження в суді], 
//     [Початкова дата періоду закриття моніторингу], 
       [Дата початку моніторингу], 
       [Дата час початку моніторингу] 
//     [Початкова дата час періоду закриття моніторингу], 
//     [Початкова дата час періоду моніторингу], 
//     [Рішення про відміну моніторингу], 
//     [Усунення порушень]
FROM Monitorings_????.qvd (qvd);

// Підстави моніторингу
Reasons:
LOAD 
//	[ID моніторингу], 
     MonitoringIdKey, 
     Reasons
FROM MonitoringReasons_????.qvd (qvd);

// Статус порушення (в залежності від типу)
// ТЗ https://docs.google.com/document/d/13E7m_KjelYs5SxZ5y6EyyqNernkJubOlc93pRFe2NSY
ViolationTypeStatus:
LOAD 
//	[ID моніторингу], 
     MonitoringIdKey, 
     ViolationType
FROM MonitoringViolationType_????.qvd (qvd);

Violation_Type:
CrossTable(ViolationType, ViolationStatusByType)
LOAD 
	MonitoringIdKey, 
	corruptionDescription, 
    corruptionProcurementMethodType, 
    corruptionPublicDisclosure, 
    corruptionBiddingDocuments, 
    documentsForm, 
    corruptionAwarded, 
    corruptionCancelled, 
    corruptionContracting, 
    corruptionChanges, 
    other
Resident Monitorings;  

Left Join (ViolationTypeStatus)
LOAD
	 MonitoringIdKey,
	 ViolationType,
	 ViolationStatusByType
Resident Violation_Type;

DROP Table Violation_Type;

DROP Fields corruptionDescription, corruptionProcurementMethodType, corruptionPublicDisclosure, corruptionBiddingDocuments, 
documentsForm, corruptionAwarded, corruptionCancelled, corruptionContracting, corruptionChanges, other;

// Контролюючий орган
MonitoringParties:
LOAD 
//	   [ID моніторингу], 
//     MonitoringIdKey, 
     [Ініціатор моніторингу],
     [Код ініціатора моніторингу],
     RelatedPartyIdKey as  DecisionRelatedPartyIdKey     
FROM MonitoringParties_????.qvd (qvd)
Where Exists(DecisionRelatedPartyIdKey, RelatedPartyIdKey);

Left Join (Monitorings)
LOAD 
//	   [ID моніторингу], 
//     MonitoringIdKey, 
     [Ініціатор моніторингу],
     [Код ініціатора моніторингу],
     DecisionRelatedPartyIdKey 
Resident  MonitoringParties;   

DROP Table MonitoringParties; 

DROP Field DecisionRelatedPartyIdKey;

// Документація рішення ДАСУ
DecisionDocuments:
LOAD 
//	 [ID моніторингу], 
     MonitoringIdKey, 
//     DecisionHash, 
//     [Автор документа рішення про проведення моніторингу], 
     [Документ рішення про проведення моніторингу], 
     [Посилання на документ рішення про проведення моніторингу], 
//     DecisionDocFormat, 
     [Дата час публікації документа рішення про проведення моніторингу], 
//     [ID документа рішення про проведення моніторингу], 
//     DecisionDocId, 
     [Дата час зміни документа рішення про проведення моніторингу]
FROM MonitoringDecisionDocuments_????.qvd (qvd);

// Статус моніторингу
MonitoringStatus:
Left Keep (Monitorings)
LOAD * Inline [
MonitoringStatus,	Статус моніторингу,			Monitoring Status
draft,				Чернетка,					Draft
active,				Здійснення моніторингу,		Active
addressed,			Порушення виявлені,			Addressed
declined,			Порушення не виявлені,		Declined
completed,			Вирішено,					Completed
closed,				Завершено,					Closed
cancelled,			Архів,						Cancelled
stopped,			Рішення зупинено,			Stopped
];

// Підстави моніторингу
MonitoringReasons:
Left Keep (Reasons)
LOAD * Inline [
Reasons,		Підстави моніторингу,						Monitoring Reasons
indicator,		Ризик-індикатор,							Risk indicator
authorities,	Органи державної влади,						State authorities
media,			Засоби масової інформації,					Media
fiscal,			Органи державного фінансового контролю,		State controlling entities
public,			Громадські об'єднання,						NGO
];

// Тип порушення
MonitoringViolationType:
Left Keep (ViolationTypeStatus)
LOAD * Inline [
ViolationType,						Тип порушення,											Violation Type
corruptionDescription,				Порушення у визначенні предмета закупівлі,				Violation in definition of the subject of procurement
corruptionProcurementMethodType,	Порушення у виборі процедури закупівлі,					Violation in wrongful election of procurement procedure
corruptionPublicDisclosure,			Порушення у процесі оприлюднення інформації,			Violation in public disclosure process
corruptionBiddingDocuments,			Порушення в тендерній документації,						Violation in tender documentation
documentsForm,						Порушення у формі документів,							Violation in document form
corruptionAwarded,					Порушення у процедурі розгляду тендерної пропозиції,	Violation in consideration of procurement proposal
corruptionCancelled,				Порушення в частині не відміни закупівлі,				Violation in non-cancellation of procurement procedure
corruptionContracting,				Порушення під час укладання договору,					Violation in procurement contract
corruptionChanges,					Порушення в додаткових угодах,							Violation in amendments to the procurement contract
other,								Інші порушення,											Other violations
];

// Статус порушення (в залежності від типу)
MonitoringViolationStatus:
Left Keep (ViolationTypeStatus)
LOAD * Inline [
ViolationStatusByType,	Статус порушення (в залежності від типу),	Result by Type 
eliminated,				Усунено,									Eliminated
not_eliminated,			Не усунено,									Not eliminated
no_mechanism,			Відсутній механізм усунення,				No mechanism of elimination
];

// Статус порушення (загалом)
MonitoringEliminationResolutionResult:
Left Keep (Monitorings)
LOAD * Inline [
EliminationResolutionResult,	Статус порушення (загалом),		Violation Status
completely,						Усунуто,						Eliminated completely
partly,							Частково усунуто,				Eliminated partly
none,							Не усунуто,						Not eliminated
];
///$tab 10 Параметры



Параметры:
LOAD 
'$(vMinDate)' as НачалоПериода,
'$(vMaxDate)' as КонецПериода,
'$(vCurrentDate)' as ТекущаяДата
AutoGenerate 1;

DIRECTORY [..\04_Database\02_QVD_DB\01_Dictionary\];

// Флаг окончания процесса перезагрузки модели
StartControl:
LOAD
	 0 as StartControl
AutoGenerate 1;

STORE StartControl into StartControl.txt (txt);	
DROP Table StartControl; 
///$tab Exit Script
Exit Script;
